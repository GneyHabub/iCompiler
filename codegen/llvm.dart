// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Core.h, Analysis.h and BitWriter.h of LLVM
class LLVM {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  LLVM(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void LLVMInstallFatalErrorHandler(
    ffi.Pointer<ffi.NativeFunction<LLVMFatalErrorHandler>> Handler,
  ) {
    _LLVMInstallFatalErrorHandler ??= _dylib.lookupFunction<
        _c_LLVMInstallFatalErrorHandler,
        _dart_LLVMInstallFatalErrorHandler>('LLVMInstallFatalErrorHandler');
    return _LLVMInstallFatalErrorHandler(
      Handler,
    );
  }

  _dart_LLVMInstallFatalErrorHandler _LLVMInstallFatalErrorHandler;

  void LLVMResetFatalErrorHandler() {
    _LLVMResetFatalErrorHandler ??= _dylib.lookupFunction<
        _c_LLVMResetFatalErrorHandler,
        _dart_LLVMResetFatalErrorHandler>('LLVMResetFatalErrorHandler');
    return _LLVMResetFatalErrorHandler();
  }

  _dart_LLVMResetFatalErrorHandler _LLVMResetFatalErrorHandler;

  void LLVMEnablePrettyStackTrace() {
    _LLVMEnablePrettyStackTrace ??= _dylib.lookupFunction<
        _c_LLVMEnablePrettyStackTrace,
        _dart_LLVMEnablePrettyStackTrace>('LLVMEnablePrettyStackTrace');
    return _LLVMEnablePrettyStackTrace();
  }

  _dart_LLVMEnablePrettyStackTrace _LLVMEnablePrettyStackTrace;

  /// @}
  void LLVMInitializeCore(
    ffi.Pointer<LLVMOpaquePassRegistry> R,
  ) {
    _LLVMInitializeCore ??=
        _dylib.lookupFunction<_c_LLVMInitializeCore, _dart_LLVMInitializeCore>(
            'LLVMInitializeCore');
    return _LLVMInitializeCore(
      R,
    );
  }

  _dart_LLVMInitializeCore _LLVMInitializeCore;

  /// Deallocate and destroy all ManagedStatic variables.
  /// @see llvm::llvm_shutdown
  /// @see ManagedStatic
  void LLVMShutdown() {
    _LLVMShutdown ??= _dylib
        .lookupFunction<_c_LLVMShutdown, _dart_LLVMShutdown>('LLVMShutdown');
    return _LLVMShutdown();
  }

  _dart_LLVMShutdown _LLVMShutdown;

  ffi.Pointer<ffi.Int8> LLVMCreateMessage(
    ffi.Pointer<ffi.Int8> Message,
  ) {
    _LLVMCreateMessage ??=
        _dylib.lookupFunction<_c_LLVMCreateMessage, _dart_LLVMCreateMessage>(
            'LLVMCreateMessage');
    return _LLVMCreateMessage(
      Message,
    );
  }

  _dart_LLVMCreateMessage _LLVMCreateMessage;

  void LLVMDisposeMessage(
    ffi.Pointer<ffi.Int8> Message,
  ) {
    _LLVMDisposeMessage ??=
        _dylib.lookupFunction<_c_LLVMDisposeMessage, _dart_LLVMDisposeMessage>(
            'LLVMDisposeMessage');
    return _LLVMDisposeMessage(
      Message,
    );
  }

  _dart_LLVMDisposeMessage _LLVMDisposeMessage;

  /// Create a new context.
  ///
  /// Every call to this function should be paired with a call to
  /// LLVMContextDispose() or the context will leak memory.
  ffi.Pointer<LLVMOpaqueContext> LLVMContextCreate() {
    _LLVMContextCreate ??=
        _dylib.lookupFunction<_c_LLVMContextCreate, _dart_LLVMContextCreate>(
            'LLVMContextCreate');
    return _LLVMContextCreate();
  }

  _dart_LLVMContextCreate _LLVMContextCreate;

  /// Obtain the global context instance.
  ffi.Pointer<LLVMOpaqueContext> LLVMGetGlobalContext() {
    _LLVMGetGlobalContext ??= _dylib.lookupFunction<_c_LLVMGetGlobalContext,
        _dart_LLVMGetGlobalContext>('LLVMGetGlobalContext');
    return _LLVMGetGlobalContext();
  }

  _dart_LLVMGetGlobalContext _LLVMGetGlobalContext;

  /// Set the diagnostic handler for this context.
  void LLVMContextSetDiagnosticHandler(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.NativeFunction<LLVMDiagnosticHandler>> Handler,
    ffi.Pointer<ffi.Void> DiagnosticContext,
  ) {
    _LLVMContextSetDiagnosticHandler ??= _dylib.lookupFunction<
            _c_LLVMContextSetDiagnosticHandler,
            _dart_LLVMContextSetDiagnosticHandler>(
        'LLVMContextSetDiagnosticHandler');
    return _LLVMContextSetDiagnosticHandler(
      C,
      Handler,
      DiagnosticContext,
    );
  }

  _dart_LLVMContextSetDiagnosticHandler _LLVMContextSetDiagnosticHandler;

  /// Get the diagnostic handler of this context.
  ffi.Pointer<ffi.NativeFunction<LLVMDiagnosticHandler>>
      LLVMContextGetDiagnosticHandler(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMContextGetDiagnosticHandler ??= _dylib.lookupFunction<
            _c_LLVMContextGetDiagnosticHandler,
            _dart_LLVMContextGetDiagnosticHandler>(
        'LLVMContextGetDiagnosticHandler');
    return _LLVMContextGetDiagnosticHandler(
      C,
    );
  }

  _dart_LLVMContextGetDiagnosticHandler _LLVMContextGetDiagnosticHandler;

  /// Get the diagnostic context of this context.
  ffi.Pointer<ffi.Void> LLVMContextGetDiagnosticContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMContextGetDiagnosticContext ??= _dylib.lookupFunction<
            _c_LLVMContextGetDiagnosticContext,
            _dart_LLVMContextGetDiagnosticContext>(
        'LLVMContextGetDiagnosticContext');
    return _LLVMContextGetDiagnosticContext(
      C,
    );
  }

  _dart_LLVMContextGetDiagnosticContext _LLVMContextGetDiagnosticContext;

  /// Set the yield callback function for this context.
  ///
  /// @see LLVMContext::setYieldCallback()
  void LLVMContextSetYieldCallback(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.NativeFunction<LLVMYieldCallback>> Callback,
    ffi.Pointer<ffi.Void> OpaqueHandle,
  ) {
    _LLVMContextSetYieldCallback ??= _dylib.lookupFunction<
        _c_LLVMContextSetYieldCallback,
        _dart_LLVMContextSetYieldCallback>('LLVMContextSetYieldCallback');
    return _LLVMContextSetYieldCallback(
      C,
      Callback,
      OpaqueHandle,
    );
  }

  _dart_LLVMContextSetYieldCallback _LLVMContextSetYieldCallback;

  /// Retrieve whether the given context is set to discard all value names.
  ///
  /// @see LLVMContext::shouldDiscardValueNames()
  int LLVMContextShouldDiscardValueNames(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMContextShouldDiscardValueNames ??= _dylib.lookupFunction<
            _c_LLVMContextShouldDiscardValueNames,
            _dart_LLVMContextShouldDiscardValueNames>(
        'LLVMContextShouldDiscardValueNames');
    return _LLVMContextShouldDiscardValueNames(
      C,
    );
  }

  _dart_LLVMContextShouldDiscardValueNames _LLVMContextShouldDiscardValueNames;

  /// Set whether the given context discards all value names.
  ///
  /// If true, only the names of GlobalValue objects will be available in the IR.
  /// This can be used to save memory and runtime, especially in release mode.
  ///
  /// @see LLVMContext::setDiscardValueNames()
  void LLVMContextSetDiscardValueNames(
    ffi.Pointer<LLVMOpaqueContext> C,
    int Discard,
  ) {
    _LLVMContextSetDiscardValueNames ??= _dylib.lookupFunction<
            _c_LLVMContextSetDiscardValueNames,
            _dart_LLVMContextSetDiscardValueNames>(
        'LLVMContextSetDiscardValueNames');
    return _LLVMContextSetDiscardValueNames(
      C,
      Discard,
    );
  }

  _dart_LLVMContextSetDiscardValueNames _LLVMContextSetDiscardValueNames;

  /// Destroy a context instance.
  ///
  /// This should be called for every call to LLVMContextCreate() or memory
  /// will be leaked.
  void LLVMContextDispose(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMContextDispose ??=
        _dylib.lookupFunction<_c_LLVMContextDispose, _dart_LLVMContextDispose>(
            'LLVMContextDispose');
    return _LLVMContextDispose(
      C,
    );
  }

  _dart_LLVMContextDispose _LLVMContextDispose;

  /// Return a string representation of the DiagnosticInfo. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see DiagnosticInfo::print()
  ffi.Pointer<ffi.Int8> LLVMGetDiagInfoDescription(
    ffi.Pointer<LLVMOpaqueDiagnosticInfo> DI,
  ) {
    _LLVMGetDiagInfoDescription ??= _dylib.lookupFunction<
        _c_LLVMGetDiagInfoDescription,
        _dart_LLVMGetDiagInfoDescription>('LLVMGetDiagInfoDescription');
    return _LLVMGetDiagInfoDescription(
      DI,
    );
  }

  _dart_LLVMGetDiagInfoDescription _LLVMGetDiagInfoDescription;

  /// Return an enum LLVMDiagnosticSeverity.
  ///
  /// @see DiagnosticInfo::getSeverity()
  int LLVMGetDiagInfoSeverity(
    ffi.Pointer<LLVMOpaqueDiagnosticInfo> DI,
  ) {
    _LLVMGetDiagInfoSeverity ??= _dylib.lookupFunction<
        _c_LLVMGetDiagInfoSeverity,
        _dart_LLVMGetDiagInfoSeverity>('LLVMGetDiagInfoSeverity');
    return _LLVMGetDiagInfoSeverity(
      DI,
    );
  }

  _dart_LLVMGetDiagInfoSeverity _LLVMGetDiagInfoSeverity;

  int LLVMGetMDKindIDInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Int8> Name,
    int SLen,
  ) {
    _LLVMGetMDKindIDInContext ??= _dylib.lookupFunction<
        _c_LLVMGetMDKindIDInContext,
        _dart_LLVMGetMDKindIDInContext>('LLVMGetMDKindIDInContext');
    return _LLVMGetMDKindIDInContext(
      C,
      Name,
      SLen,
    );
  }

  _dart_LLVMGetMDKindIDInContext _LLVMGetMDKindIDInContext;

  int LLVMGetMDKindID(
    ffi.Pointer<ffi.Int8> Name,
    int SLen,
  ) {
    _LLVMGetMDKindID ??=
        _dylib.lookupFunction<_c_LLVMGetMDKindID, _dart_LLVMGetMDKindID>(
            'LLVMGetMDKindID');
    return _LLVMGetMDKindID(
      Name,
      SLen,
    );
  }

  _dart_LLVMGetMDKindID _LLVMGetMDKindID;

  /// Return an unique id given the name of a enum attribute,
  /// or 0 if no attribute by that name exists.
  ///
  /// See http://llvm.org/docs/LangRef.html#parameter-attributes
  /// and http://llvm.org/docs/LangRef.html#function-attributes
  /// for the list of available attributes.
  ///
  /// NB: Attribute names and/or id are subject to change without
  /// going through the C API deprecation cycle.
  int LLVMGetEnumAttributeKindForName(
    ffi.Pointer<ffi.Int8> Name,
    int SLen,
  ) {
    _LLVMGetEnumAttributeKindForName ??= _dylib.lookupFunction<
            _c_LLVMGetEnumAttributeKindForName,
            _dart_LLVMGetEnumAttributeKindForName>(
        'LLVMGetEnumAttributeKindForName');
    return _LLVMGetEnumAttributeKindForName(
      Name,
      SLen,
    );
  }

  _dart_LLVMGetEnumAttributeKindForName _LLVMGetEnumAttributeKindForName;

  int LLVMGetLastEnumAttributeKind() {
    _LLVMGetLastEnumAttributeKind ??= _dylib.lookupFunction<
        _c_LLVMGetLastEnumAttributeKind,
        _dart_LLVMGetLastEnumAttributeKind>('LLVMGetLastEnumAttributeKind');
    return _LLVMGetLastEnumAttributeKind();
  }

  _dart_LLVMGetLastEnumAttributeKind _LLVMGetLastEnumAttributeKind;

  /// Create an enum attribute.
  ffi.Pointer<LLVMOpaqueAttributeRef> LLVMCreateEnumAttribute(
    ffi.Pointer<LLVMOpaqueContext> C,
    int KindID,
    int Val,
  ) {
    _LLVMCreateEnumAttribute ??= _dylib.lookupFunction<
        _c_LLVMCreateEnumAttribute,
        _dart_LLVMCreateEnumAttribute>('LLVMCreateEnumAttribute');
    return _LLVMCreateEnumAttribute(
      C,
      KindID,
      Val,
    );
  }

  _dart_LLVMCreateEnumAttribute _LLVMCreateEnumAttribute;

  /// Get the unique id corresponding to the enum attribute
  /// passed as argument.
  int LLVMGetEnumAttributeKind(
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ) {
    _LLVMGetEnumAttributeKind ??= _dylib.lookupFunction<
        _c_LLVMGetEnumAttributeKind,
        _dart_LLVMGetEnumAttributeKind>('LLVMGetEnumAttributeKind');
    return _LLVMGetEnumAttributeKind(
      A,
    );
  }

  _dart_LLVMGetEnumAttributeKind _LLVMGetEnumAttributeKind;

  /// Get the enum attribute's value. 0 is returned if none exists.
  int LLVMGetEnumAttributeValue(
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ) {
    _LLVMGetEnumAttributeValue ??= _dylib.lookupFunction<
        _c_LLVMGetEnumAttributeValue,
        _dart_LLVMGetEnumAttributeValue>('LLVMGetEnumAttributeValue');
    return _LLVMGetEnumAttributeValue(
      A,
    );
  }

  _dart_LLVMGetEnumAttributeValue _LLVMGetEnumAttributeValue;

  /// Create a string attribute.
  ffi.Pointer<LLVMOpaqueAttributeRef> LLVMCreateStringAttribute(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Int8> K,
    int KLength,
    ffi.Pointer<ffi.Int8> V,
    int VLength,
  ) {
    _LLVMCreateStringAttribute ??= _dylib.lookupFunction<
        _c_LLVMCreateStringAttribute,
        _dart_LLVMCreateStringAttribute>('LLVMCreateStringAttribute');
    return _LLVMCreateStringAttribute(
      C,
      K,
      KLength,
      V,
      VLength,
    );
  }

  _dart_LLVMCreateStringAttribute _LLVMCreateStringAttribute;

  /// Get the string attribute's kind.
  ffi.Pointer<ffi.Int8> LLVMGetStringAttributeKind(
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
    ffi.Pointer<ffi.Uint32> Length,
  ) {
    _LLVMGetStringAttributeKind ??= _dylib.lookupFunction<
        _c_LLVMGetStringAttributeKind,
        _dart_LLVMGetStringAttributeKind>('LLVMGetStringAttributeKind');
    return _LLVMGetStringAttributeKind(
      A,
      Length,
    );
  }

  _dart_LLVMGetStringAttributeKind _LLVMGetStringAttributeKind;

  /// Get the string attribute's value.
  ffi.Pointer<ffi.Int8> LLVMGetStringAttributeValue(
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
    ffi.Pointer<ffi.Uint32> Length,
  ) {
    _LLVMGetStringAttributeValue ??= _dylib.lookupFunction<
        _c_LLVMGetStringAttributeValue,
        _dart_LLVMGetStringAttributeValue>('LLVMGetStringAttributeValue');
    return _LLVMGetStringAttributeValue(
      A,
      Length,
    );
  }

  _dart_LLVMGetStringAttributeValue _LLVMGetStringAttributeValue;

  /// Check for the different types of attributes.
  int LLVMIsEnumAttribute(
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ) {
    _LLVMIsEnumAttribute ??= _dylib.lookupFunction<_c_LLVMIsEnumAttribute,
        _dart_LLVMIsEnumAttribute>('LLVMIsEnumAttribute');
    return _LLVMIsEnumAttribute(
      A,
    );
  }

  _dart_LLVMIsEnumAttribute _LLVMIsEnumAttribute;

  int LLVMIsStringAttribute(
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ) {
    _LLVMIsStringAttribute ??= _dylib.lookupFunction<_c_LLVMIsStringAttribute,
        _dart_LLVMIsStringAttribute>('LLVMIsStringAttribute');
    return _LLVMIsStringAttribute(
      A,
    );
  }

  _dart_LLVMIsStringAttribute _LLVMIsStringAttribute;

  /// Create a new, empty module in the global context.
  ///
  /// This is equivalent to calling LLVMModuleCreateWithNameInContext with
  /// LLVMGetGlobalContext() as the context parameter.
  ///
  /// Every invocation should be paired with LLVMDisposeModule() or memory
  /// will be leaked.
  ffi.Pointer<LLVMOpaqueModule> LLVMModuleCreateWithName(
    ffi.Pointer<ffi.Int8> ModuleID,
  ) {
    _LLVMModuleCreateWithName ??= _dylib.lookupFunction<
        _c_LLVMModuleCreateWithName,
        _dart_LLVMModuleCreateWithName>('LLVMModuleCreateWithName');
    return _LLVMModuleCreateWithName(
      ModuleID,
    );
  }

  _dart_LLVMModuleCreateWithName _LLVMModuleCreateWithName;

  /// Create a new, empty module in a specific context.
  ///
  /// Every invocation should be paired with LLVMDisposeModule() or memory
  /// will be leaked.
  ffi.Pointer<LLVMOpaqueModule> LLVMModuleCreateWithNameInContext(
    ffi.Pointer<ffi.Int8> ModuleID,
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMModuleCreateWithNameInContext ??= _dylib.lookupFunction<
            _c_LLVMModuleCreateWithNameInContext,
            _dart_LLVMModuleCreateWithNameInContext>(
        'LLVMModuleCreateWithNameInContext');
    return _LLVMModuleCreateWithNameInContext(
      ModuleID,
      C,
    );
  }

  _dart_LLVMModuleCreateWithNameInContext _LLVMModuleCreateWithNameInContext;

  /// Return an exact copy of the specified module.
  ffi.Pointer<LLVMOpaqueModule> LLVMCloneModule(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMCloneModule ??=
        _dylib.lookupFunction<_c_LLVMCloneModule, _dart_LLVMCloneModule>(
            'LLVMCloneModule');
    return _LLVMCloneModule(
      M,
    );
  }

  _dart_LLVMCloneModule _LLVMCloneModule;

  /// Destroy a module instance.
  ///
  /// This must be called for every created module or memory will be
  /// leaked.
  void LLVMDisposeModule(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMDisposeModule ??=
        _dylib.lookupFunction<_c_LLVMDisposeModule, _dart_LLVMDisposeModule>(
            'LLVMDisposeModule');
    return _LLVMDisposeModule(
      M,
    );
  }

  _dart_LLVMDisposeModule _LLVMDisposeModule;

  /// Obtain the identifier of a module.
  ///
  /// @param M Module to obtain identifier of
  /// @param Len Out parameter which holds the length of the returned string.
  /// @return The identifier of M.
  /// @see Module::getModuleIdentifier()
  ffi.Pointer<ffi.Int8> LLVMGetModuleIdentifier(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Uint64> Len,
  ) {
    _LLVMGetModuleIdentifier ??= _dylib.lookupFunction<
        _c_LLVMGetModuleIdentifier,
        _dart_LLVMGetModuleIdentifier>('LLVMGetModuleIdentifier');
    return _LLVMGetModuleIdentifier(
      M,
      Len,
    );
  }

  _dart_LLVMGetModuleIdentifier _LLVMGetModuleIdentifier;

  /// Set the identifier of a module to a string Ident with length Len.
  ///
  /// @param M The module to set identifier
  /// @param Ident The string to set M's identifier to
  /// @param Len Length of Ident
  /// @see Module::setModuleIdentifier()
  void LLVMSetModuleIdentifier(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Ident,
    int Len,
  ) {
    _LLVMSetModuleIdentifier ??= _dylib.lookupFunction<
        _c_LLVMSetModuleIdentifier,
        _dart_LLVMSetModuleIdentifier>('LLVMSetModuleIdentifier');
    return _LLVMSetModuleIdentifier(
      M,
      Ident,
      Len,
    );
  }

  _dart_LLVMSetModuleIdentifier _LLVMSetModuleIdentifier;

  /// Obtain the module's original source file name.
  ///
  /// @param M Module to obtain the name of
  /// @param Len Out parameter which holds the length of the returned string
  /// @return The original source file name of M
  /// @see Module::getSourceFileName()
  ffi.Pointer<ffi.Int8> LLVMGetSourceFileName(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Uint64> Len,
  ) {
    _LLVMGetSourceFileName ??= _dylib.lookupFunction<_c_LLVMGetSourceFileName,
        _dart_LLVMGetSourceFileName>('LLVMGetSourceFileName');
    return _LLVMGetSourceFileName(
      M,
      Len,
    );
  }

  _dart_LLVMGetSourceFileName _LLVMGetSourceFileName;

  /// Set the original source file name of a module to a string Name with length
  /// Len.
  ///
  /// @param M The module to set the source file name of
  /// @param Name The string to set M's source file name to
  /// @param Len Length of Name
  /// @see Module::setSourceFileName()
  void LLVMSetSourceFileName(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    int Len,
  ) {
    _LLVMSetSourceFileName ??= _dylib.lookupFunction<_c_LLVMSetSourceFileName,
        _dart_LLVMSetSourceFileName>('LLVMSetSourceFileName');
    return _LLVMSetSourceFileName(
      M,
      Name,
      Len,
    );
  }

  _dart_LLVMSetSourceFileName _LLVMSetSourceFileName;

  /// Obtain the data layout for a module.
  ///
  /// @see Module::getDataLayoutStr()
  ///
  /// LLVMGetDataLayout is DEPRECATED, as the name is not only incorrect,
  /// but match the name of another method on the module. Prefer the use
  /// of LLVMGetDataLayoutStr, which is not ambiguous.
  ffi.Pointer<ffi.Int8> LLVMGetDataLayoutStr(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetDataLayoutStr ??= _dylib.lookupFunction<_c_LLVMGetDataLayoutStr,
        _dart_LLVMGetDataLayoutStr>('LLVMGetDataLayoutStr');
    return _LLVMGetDataLayoutStr(
      M,
    );
  }

  _dart_LLVMGetDataLayoutStr _LLVMGetDataLayoutStr;

  ffi.Pointer<ffi.Int8> LLVMGetDataLayout(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetDataLayout ??=
        _dylib.lookupFunction<_c_LLVMGetDataLayout, _dart_LLVMGetDataLayout>(
            'LLVMGetDataLayout');
    return _LLVMGetDataLayout(
      M,
    );
  }

  _dart_LLVMGetDataLayout _LLVMGetDataLayout;

  /// Set the data layout for a module.
  ///
  /// @see Module::setDataLayout()
  void LLVMSetDataLayout(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> DataLayoutStr,
  ) {
    _LLVMSetDataLayout ??=
        _dylib.lookupFunction<_c_LLVMSetDataLayout, _dart_LLVMSetDataLayout>(
            'LLVMSetDataLayout');
    return _LLVMSetDataLayout(
      M,
      DataLayoutStr,
    );
  }

  _dart_LLVMSetDataLayout _LLVMSetDataLayout;

  /// Obtain the target triple for a module.
  ///
  /// @see Module::getTargetTriple()
  ffi.Pointer<ffi.Int8> LLVMGetTarget(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetTarget ??= _dylib
        .lookupFunction<_c_LLVMGetTarget, _dart_LLVMGetTarget>('LLVMGetTarget');
    return _LLVMGetTarget(
      M,
    );
  }

  _dart_LLVMGetTarget _LLVMGetTarget;

  /// Set the target triple for a module.
  ///
  /// @see Module::setTargetTriple()
  void LLVMSetTarget(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Triple,
  ) {
    _LLVMSetTarget ??= _dylib
        .lookupFunction<_c_LLVMSetTarget, _dart_LLVMSetTarget>('LLVMSetTarget');
    return _LLVMSetTarget(
      M,
      Triple,
    );
  }

  _dart_LLVMSetTarget _LLVMSetTarget;

  /// Returns the module flags as an array of flag-key-value triples.  The caller
  /// is responsible for freeing this array by calling
  /// \c LLVMDisposeModuleFlagsMetadata.
  ///
  /// @see Module::getModuleFlagsMetadata()
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> LLVMCopyModuleFlagsMetadata(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Uint64> Len,
  ) {
    _LLVMCopyModuleFlagsMetadata ??= _dylib.lookupFunction<
        _c_LLVMCopyModuleFlagsMetadata,
        _dart_LLVMCopyModuleFlagsMetadata>('LLVMCopyModuleFlagsMetadata');
    return _LLVMCopyModuleFlagsMetadata(
      M,
      Len,
    );
  }

  _dart_LLVMCopyModuleFlagsMetadata _LLVMCopyModuleFlagsMetadata;

  /// Destroys module flags metadata entries.
  void LLVMDisposeModuleFlagsMetadata(
    ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
  ) {
    _LLVMDisposeModuleFlagsMetadata ??= _dylib.lookupFunction<
        _c_LLVMDisposeModuleFlagsMetadata,
        _dart_LLVMDisposeModuleFlagsMetadata>('LLVMDisposeModuleFlagsMetadata');
    return _LLVMDisposeModuleFlagsMetadata(
      Entries,
    );
  }

  _dart_LLVMDisposeModuleFlagsMetadata _LLVMDisposeModuleFlagsMetadata;

  /// Returns the flag behavior for a module flag entry at a specific index.
  ///
  /// @see Module::ModuleFlagEntry::Behavior
  int LLVMModuleFlagEntriesGetFlagBehavior(
    ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
    int Index,
  ) {
    _LLVMModuleFlagEntriesGetFlagBehavior ??= _dylib.lookupFunction<
            _c_LLVMModuleFlagEntriesGetFlagBehavior,
            _dart_LLVMModuleFlagEntriesGetFlagBehavior>(
        'LLVMModuleFlagEntriesGetFlagBehavior');
    return _LLVMModuleFlagEntriesGetFlagBehavior(
      Entries,
      Index,
    );
  }

  _dart_LLVMModuleFlagEntriesGetFlagBehavior
      _LLVMModuleFlagEntriesGetFlagBehavior;

  /// Returns the key for a module flag entry at a specific index.
  ///
  /// @see Module::ModuleFlagEntry::Key
  ffi.Pointer<ffi.Int8> LLVMModuleFlagEntriesGetKey(
    ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
    int Index,
    ffi.Pointer<ffi.Uint64> Len,
  ) {
    _LLVMModuleFlagEntriesGetKey ??= _dylib.lookupFunction<
        _c_LLVMModuleFlagEntriesGetKey,
        _dart_LLVMModuleFlagEntriesGetKey>('LLVMModuleFlagEntriesGetKey');
    return _LLVMModuleFlagEntriesGetKey(
      Entries,
      Index,
      Len,
    );
  }

  _dart_LLVMModuleFlagEntriesGetKey _LLVMModuleFlagEntriesGetKey;

  /// Returns the metadata for a module flag entry at a specific index.
  ///
  /// @see Module::ModuleFlagEntry::Val
  ffi.Pointer<LLVMOpaqueMetadata> LLVMModuleFlagEntriesGetMetadata(
    ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
    int Index,
  ) {
    _LLVMModuleFlagEntriesGetMetadata ??= _dylib.lookupFunction<
            _c_LLVMModuleFlagEntriesGetMetadata,
            _dart_LLVMModuleFlagEntriesGetMetadata>(
        'LLVMModuleFlagEntriesGetMetadata');
    return _LLVMModuleFlagEntriesGetMetadata(
      Entries,
      Index,
    );
  }

  _dart_LLVMModuleFlagEntriesGetMetadata _LLVMModuleFlagEntriesGetMetadata;

  /// Add a module-level flag to the module-level flags metadata if it doesn't
  /// already exist.
  ///
  /// @see Module::getModuleFlag()
  ffi.Pointer<LLVMOpaqueMetadata> LLVMGetModuleFlag(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Key,
    int KeyLen,
  ) {
    _LLVMGetModuleFlag ??=
        _dylib.lookupFunction<_c_LLVMGetModuleFlag, _dart_LLVMGetModuleFlag>(
            'LLVMGetModuleFlag');
    return _LLVMGetModuleFlag(
      M,
      Key,
      KeyLen,
    );
  }

  _dart_LLVMGetModuleFlag _LLVMGetModuleFlag;

  /// Add a module-level flag to the module-level flags metadata if it doesn't
  /// already exist.
  ///
  /// @see Module::addModuleFlag()
  void LLVMAddModuleFlag(
    ffi.Pointer<LLVMOpaqueModule> M,
    int Behavior,
    ffi.Pointer<ffi.Int8> Key,
    int KeyLen,
    ffi.Pointer<LLVMOpaqueMetadata> Val,
  ) {
    _LLVMAddModuleFlag ??=
        _dylib.lookupFunction<_c_LLVMAddModuleFlag, _dart_LLVMAddModuleFlag>(
            'LLVMAddModuleFlag');
    return _LLVMAddModuleFlag(
      M,
      Behavior,
      Key,
      KeyLen,
      Val,
    );
  }

  _dart_LLVMAddModuleFlag _LLVMAddModuleFlag;

  /// Dump a representation of a module to stderr.
  ///
  /// @see Module::dump()
  void LLVMDumpModule(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMDumpModule ??=
        _dylib.lookupFunction<_c_LLVMDumpModule, _dart_LLVMDumpModule>(
            'LLVMDumpModule');
    return _LLVMDumpModule(
      M,
    );
  }

  _dart_LLVMDumpModule _LLVMDumpModule;

  /// Print a representation of a module to a file. The ErrorMessage needs to be
  /// disposed with LLVMDisposeMessage. Returns 0 on success, 1 otherwise.
  ///
  /// @see Module::print()
  int LLVMPrintModuleToFile(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Filename,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ErrorMessage,
  ) {
    _LLVMPrintModuleToFile ??= _dylib.lookupFunction<_c_LLVMPrintModuleToFile,
        _dart_LLVMPrintModuleToFile>('LLVMPrintModuleToFile');
    return _LLVMPrintModuleToFile(
      M,
      Filename,
      ErrorMessage,
    );
  }

  _dart_LLVMPrintModuleToFile _LLVMPrintModuleToFile;

  /// Return a string representation of the module. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see Module::print()
  ffi.Pointer<ffi.Int8> LLVMPrintModuleToString(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMPrintModuleToString ??= _dylib.lookupFunction<
        _c_LLVMPrintModuleToString,
        _dart_LLVMPrintModuleToString>('LLVMPrintModuleToString');
    return _LLVMPrintModuleToString(
      M,
    );
  }

  _dart_LLVMPrintModuleToString _LLVMPrintModuleToString;

  /// Get inline assembly for a module.
  ///
  /// @see Module::getModuleInlineAsm()
  ffi.Pointer<ffi.Int8> LLVMGetModuleInlineAsm(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Uint64> Len,
  ) {
    _LLVMGetModuleInlineAsm ??= _dylib.lookupFunction<_c_LLVMGetModuleInlineAsm,
        _dart_LLVMGetModuleInlineAsm>('LLVMGetModuleInlineAsm');
    return _LLVMGetModuleInlineAsm(
      M,
      Len,
    );
  }

  _dart_LLVMGetModuleInlineAsm _LLVMGetModuleInlineAsm;

  /// Set inline assembly for a module.
  ///
  /// @see Module::setModuleInlineAsm()
  void LLVMSetModuleInlineAsm2(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Asm,
    int Len,
  ) {
    _LLVMSetModuleInlineAsm2 ??= _dylib.lookupFunction<
        _c_LLVMSetModuleInlineAsm2,
        _dart_LLVMSetModuleInlineAsm2>('LLVMSetModuleInlineAsm2');
    return _LLVMSetModuleInlineAsm2(
      M,
      Asm,
      Len,
    );
  }

  _dart_LLVMSetModuleInlineAsm2 _LLVMSetModuleInlineAsm2;

  /// Append inline assembly to a module.
  ///
  /// @see Module::appendModuleInlineAsm()
  void LLVMAppendModuleInlineAsm(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Asm,
    int Len,
  ) {
    _LLVMAppendModuleInlineAsm ??= _dylib.lookupFunction<
        _c_LLVMAppendModuleInlineAsm,
        _dart_LLVMAppendModuleInlineAsm>('LLVMAppendModuleInlineAsm');
    return _LLVMAppendModuleInlineAsm(
      M,
      Asm,
      Len,
    );
  }

  _dart_LLVMAppendModuleInlineAsm _LLVMAppendModuleInlineAsm;

  /// Create the specified uniqued inline asm string.
  ///
  /// @see InlineAsm::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetInlineAsm(
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> AsmString,
    int AsmStringSize,
    ffi.Pointer<ffi.Int8> Constraints,
    int ConstraintsSize,
    int HasSideEffects,
    int IsAlignStack,
    int Dialect,
  ) {
    _LLVMGetInlineAsm ??=
        _dylib.lookupFunction<_c_LLVMGetInlineAsm, _dart_LLVMGetInlineAsm>(
            'LLVMGetInlineAsm');
    return _LLVMGetInlineAsm(
      Ty,
      AsmString,
      AsmStringSize,
      Constraints,
      ConstraintsSize,
      HasSideEffects,
      IsAlignStack,
      Dialect,
    );
  }

  _dart_LLVMGetInlineAsm _LLVMGetInlineAsm;

  /// Obtain the context to which this module is associated.
  ///
  /// @see Module::getContext()
  ffi.Pointer<LLVMOpaqueContext> LLVMGetModuleContext(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetModuleContext ??= _dylib.lookupFunction<_c_LLVMGetModuleContext,
        _dart_LLVMGetModuleContext>('LLVMGetModuleContext');
    return _LLVMGetModuleContext(
      M,
    );
  }

  _dart_LLVMGetModuleContext _LLVMGetModuleContext;

  /// Obtain a Type from a module by its registered name.
  ffi.Pointer<LLVMOpaqueType> LLVMGetTypeByName(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMGetTypeByName ??=
        _dylib.lookupFunction<_c_LLVMGetTypeByName, _dart_LLVMGetTypeByName>(
            'LLVMGetTypeByName');
    return _LLVMGetTypeByName(
      M,
      Name,
    );
  }

  _dart_LLVMGetTypeByName _LLVMGetTypeByName;

  /// Obtain an iterator to the first NamedMDNode in a Module.
  ///
  /// @see llvm::Module::named_metadata_begin()
  ffi.Pointer<LLVMOpaqueNamedMDNode> LLVMGetFirstNamedMetadata(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetFirstNamedMetadata ??= _dylib.lookupFunction<
        _c_LLVMGetFirstNamedMetadata,
        _dart_LLVMGetFirstNamedMetadata>('LLVMGetFirstNamedMetadata');
    return _LLVMGetFirstNamedMetadata(
      M,
    );
  }

  _dart_LLVMGetFirstNamedMetadata _LLVMGetFirstNamedMetadata;

  /// Obtain an iterator to the last NamedMDNode in a Module.
  ///
  /// @see llvm::Module::named_metadata_end()
  ffi.Pointer<LLVMOpaqueNamedMDNode> LLVMGetLastNamedMetadata(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetLastNamedMetadata ??= _dylib.lookupFunction<
        _c_LLVMGetLastNamedMetadata,
        _dart_LLVMGetLastNamedMetadata>('LLVMGetLastNamedMetadata');
    return _LLVMGetLastNamedMetadata(
      M,
    );
  }

  _dart_LLVMGetLastNamedMetadata _LLVMGetLastNamedMetadata;

  /// Advance a NamedMDNode iterator to the next NamedMDNode.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// named metadata nodes.
  ffi.Pointer<LLVMOpaqueNamedMDNode> LLVMGetNextNamedMetadata(
    ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMDNode,
  ) {
    _LLVMGetNextNamedMetadata ??= _dylib.lookupFunction<
        _c_LLVMGetNextNamedMetadata,
        _dart_LLVMGetNextNamedMetadata>('LLVMGetNextNamedMetadata');
    return _LLVMGetNextNamedMetadata(
      NamedMDNode,
    );
  }

  _dart_LLVMGetNextNamedMetadata _LLVMGetNextNamedMetadata;

  /// Decrement a NamedMDNode iterator to the previous NamedMDNode.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous named metadata nodes.
  ffi.Pointer<LLVMOpaqueNamedMDNode> LLVMGetPreviousNamedMetadata(
    ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMDNode,
  ) {
    _LLVMGetPreviousNamedMetadata ??= _dylib.lookupFunction<
        _c_LLVMGetPreviousNamedMetadata,
        _dart_LLVMGetPreviousNamedMetadata>('LLVMGetPreviousNamedMetadata');
    return _LLVMGetPreviousNamedMetadata(
      NamedMDNode,
    );
  }

  _dart_LLVMGetPreviousNamedMetadata _LLVMGetPreviousNamedMetadata;

  /// Retrieve a NamedMDNode with the given name, returning NULL if no such
  /// node exists.
  ///
  /// @see llvm::Module::getNamedMetadata()
  ffi.Pointer<LLVMOpaqueNamedMDNode> LLVMGetNamedMetadata(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    int NameLen,
  ) {
    _LLVMGetNamedMetadata ??= _dylib.lookupFunction<_c_LLVMGetNamedMetadata,
        _dart_LLVMGetNamedMetadata>('LLVMGetNamedMetadata');
    return _LLVMGetNamedMetadata(
      M,
      Name,
      NameLen,
    );
  }

  _dart_LLVMGetNamedMetadata _LLVMGetNamedMetadata;

  /// Retrieve a NamedMDNode with the given name, creating a new node if no such
  /// node exists.
  ///
  /// @see llvm::Module::getOrInsertNamedMetadata()
  ffi.Pointer<LLVMOpaqueNamedMDNode> LLVMGetOrInsertNamedMetadata(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    int NameLen,
  ) {
    _LLVMGetOrInsertNamedMetadata ??= _dylib.lookupFunction<
        _c_LLVMGetOrInsertNamedMetadata,
        _dart_LLVMGetOrInsertNamedMetadata>('LLVMGetOrInsertNamedMetadata');
    return _LLVMGetOrInsertNamedMetadata(
      M,
      Name,
      NameLen,
    );
  }

  _dart_LLVMGetOrInsertNamedMetadata _LLVMGetOrInsertNamedMetadata;

  /// Retrieve the name of a NamedMDNode.
  ///
  /// @see llvm::NamedMDNode::getName()
  ffi.Pointer<ffi.Int8> LLVMGetNamedMetadataName(
    ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMD,
    ffi.Pointer<ffi.Uint64> NameLen,
  ) {
    _LLVMGetNamedMetadataName ??= _dylib.lookupFunction<
        _c_LLVMGetNamedMetadataName,
        _dart_LLVMGetNamedMetadataName>('LLVMGetNamedMetadataName');
    return _LLVMGetNamedMetadataName(
      NamedMD,
      NameLen,
    );
  }

  _dart_LLVMGetNamedMetadataName _LLVMGetNamedMetadataName;

  /// Obtain the number of operands for named metadata in a module.
  ///
  /// @see llvm::Module::getNamedMetadata()
  int LLVMGetNamedMetadataNumOperands(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMGetNamedMetadataNumOperands ??= _dylib.lookupFunction<
            _c_LLVMGetNamedMetadataNumOperands,
            _dart_LLVMGetNamedMetadataNumOperands>(
        'LLVMGetNamedMetadataNumOperands');
    return _LLVMGetNamedMetadataNumOperands(
      M,
      Name,
    );
  }

  _dart_LLVMGetNamedMetadataNumOperands _LLVMGetNamedMetadataNumOperands;

  /// Obtain the named metadata operands for a module.
  ///
  /// The passed LLVMValueRef pointer should refer to an array of
  /// LLVMValueRef at least LLVMGetNamedMetadataNumOperands long. This
  /// array will be populated with the LLVMValueRef instances. Each
  /// instance corresponds to a llvm::MDNode.
  ///
  /// @see llvm::Module::getNamedMetadata()
  /// @see llvm::MDNode::getOperand()
  void LLVMGetNamedMetadataOperands(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Dest,
  ) {
    _LLVMGetNamedMetadataOperands ??= _dylib.lookupFunction<
        _c_LLVMGetNamedMetadataOperands,
        _dart_LLVMGetNamedMetadataOperands>('LLVMGetNamedMetadataOperands');
    return _LLVMGetNamedMetadataOperands(
      M,
      Name,
      Dest,
    );
  }

  _dart_LLVMGetNamedMetadataOperands _LLVMGetNamedMetadataOperands;

  /// Add an operand to named metadata.
  ///
  /// @see llvm::Module::getNamedMetadata()
  /// @see llvm::MDNode::addOperand()
  void LLVMAddNamedMetadataOperand(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMAddNamedMetadataOperand ??= _dylib.lookupFunction<
        _c_LLVMAddNamedMetadataOperand,
        _dart_LLVMAddNamedMetadataOperand>('LLVMAddNamedMetadataOperand');
    return _LLVMAddNamedMetadataOperand(
      M,
      Name,
      Val,
    );
  }

  _dart_LLVMAddNamedMetadataOperand _LLVMAddNamedMetadataOperand;

  /// Return the directory of the debug location for this value, which must be
  /// an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  /// @see llvm::GlobalVariable::getDebugInfo()
  /// @see llvm::Function::getSubprogram()
  ffi.Pointer<ffi.Int8> LLVMGetDebugLocDirectory(
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Uint32> Length,
  ) {
    _LLVMGetDebugLocDirectory ??= _dylib.lookupFunction<
        _c_LLVMGetDebugLocDirectory,
        _dart_LLVMGetDebugLocDirectory>('LLVMGetDebugLocDirectory');
    return _LLVMGetDebugLocDirectory(
      Val,
      Length,
    );
  }

  _dart_LLVMGetDebugLocDirectory _LLVMGetDebugLocDirectory;

  /// Return the filename of the debug location for this value, which must be
  /// an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  /// @see llvm::GlobalVariable::getDebugInfo()
  /// @see llvm::Function::getSubprogram()
  ffi.Pointer<ffi.Int8> LLVMGetDebugLocFilename(
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Uint32> Length,
  ) {
    _LLVMGetDebugLocFilename ??= _dylib.lookupFunction<
        _c_LLVMGetDebugLocFilename,
        _dart_LLVMGetDebugLocFilename>('LLVMGetDebugLocFilename');
    return _LLVMGetDebugLocFilename(
      Val,
      Length,
    );
  }

  _dart_LLVMGetDebugLocFilename _LLVMGetDebugLocFilename;

  /// Return the line number of the debug location for this value, which must be
  /// an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  /// @see llvm::GlobalVariable::getDebugInfo()
  /// @see llvm::Function::getSubprogram()
  int LLVMGetDebugLocLine(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMGetDebugLocLine ??= _dylib.lookupFunction<_c_LLVMGetDebugLocLine,
        _dart_LLVMGetDebugLocLine>('LLVMGetDebugLocLine');
    return _LLVMGetDebugLocLine(
      Val,
    );
  }

  _dart_LLVMGetDebugLocLine _LLVMGetDebugLocLine;

  /// Return the column number of the debug location for this value, which must be
  /// an llvm::Instruction.
  ///
  /// @see llvm::Instruction::getDebugLoc()
  int LLVMGetDebugLocColumn(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMGetDebugLocColumn ??= _dylib.lookupFunction<_c_LLVMGetDebugLocColumn,
        _dart_LLVMGetDebugLocColumn>('LLVMGetDebugLocColumn');
    return _LLVMGetDebugLocColumn(
      Val,
    );
  }

  _dart_LLVMGetDebugLocColumn _LLVMGetDebugLocColumn;

  /// Add a function to a module under a specified name.
  ///
  /// @see llvm::Function::Create()
  ffi.Pointer<LLVMOpaqueValue> LLVMAddFunction(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    ffi.Pointer<LLVMOpaqueType> FunctionTy,
  ) {
    _LLVMAddFunction ??=
        _dylib.lookupFunction<_c_LLVMAddFunction, _dart_LLVMAddFunction>(
            'LLVMAddFunction');
    return _LLVMAddFunction(
      M,
      Name,
      FunctionTy,
    );
  }

  _dart_LLVMAddFunction _LLVMAddFunction;

  /// Obtain a Function value from a Module by its name.
  ///
  /// The returned value corresponds to a llvm::Function value.
  ///
  /// @see llvm::Module::getFunction()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNamedFunction(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMGetNamedFunction ??= _dylib.lookupFunction<_c_LLVMGetNamedFunction,
        _dart_LLVMGetNamedFunction>('LLVMGetNamedFunction');
    return _LLVMGetNamedFunction(
      M,
      Name,
    );
  }

  _dart_LLVMGetNamedFunction _LLVMGetNamedFunction;

  /// Obtain an iterator to the first Function in a Module.
  ///
  /// @see llvm::Module::begin()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetFirstFunction(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetFirstFunction ??= _dylib.lookupFunction<_c_LLVMGetFirstFunction,
        _dart_LLVMGetFirstFunction>('LLVMGetFirstFunction');
    return _LLVMGetFirstFunction(
      M,
    );
  }

  _dart_LLVMGetFirstFunction _LLVMGetFirstFunction;

  /// Obtain an iterator to the last Function in a Module.
  ///
  /// @see llvm::Module::end()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetLastFunction(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetLastFunction ??= _dylib.lookupFunction<_c_LLVMGetLastFunction,
        _dart_LLVMGetLastFunction>('LLVMGetLastFunction');
    return _LLVMGetLastFunction(
      M,
    );
  }

  _dart_LLVMGetLastFunction _LLVMGetLastFunction;

  /// Advance a Function iterator to the next Function.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// functions.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNextFunction(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetNextFunction ??= _dylib.lookupFunction<_c_LLVMGetNextFunction,
        _dart_LLVMGetNextFunction>('LLVMGetNextFunction');
    return _LLVMGetNextFunction(
      Fn,
    );
  }

  _dart_LLVMGetNextFunction _LLVMGetNextFunction;

  /// Decrement a Function iterator to the previous Function.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous functions.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetPreviousFunction(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetPreviousFunction ??= _dylib.lookupFunction<
        _c_LLVMGetPreviousFunction,
        _dart_LLVMGetPreviousFunction>('LLVMGetPreviousFunction');
    return _LLVMGetPreviousFunction(
      Fn,
    );
  }

  _dart_LLVMGetPreviousFunction _LLVMGetPreviousFunction;

  /// Deprecated: Use LLVMSetModuleInlineAsm2 instead.
  void LLVMSetModuleInlineAsm(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Asm,
  ) {
    _LLVMSetModuleInlineAsm ??= _dylib.lookupFunction<_c_LLVMSetModuleInlineAsm,
        _dart_LLVMSetModuleInlineAsm>('LLVMSetModuleInlineAsm');
    return _LLVMSetModuleInlineAsm(
      M,
      Asm,
    );
  }

  _dart_LLVMSetModuleInlineAsm _LLVMSetModuleInlineAsm;

  /// Obtain the enumerated type of a Type instance.
  ///
  /// @see llvm::Type:getTypeID()
  int LLVMGetTypeKind(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMGetTypeKind ??=
        _dylib.lookupFunction<_c_LLVMGetTypeKind, _dart_LLVMGetTypeKind>(
            'LLVMGetTypeKind');
    return _LLVMGetTypeKind(
      Ty,
    );
  }

  _dart_LLVMGetTypeKind _LLVMGetTypeKind;

  /// Whether the type has a known size.
  ///
  /// Things that don't have a size are abstract types, labels, and void.a
  ///
  /// @see llvm::Type::isSized()
  int LLVMTypeIsSized(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMTypeIsSized ??=
        _dylib.lookupFunction<_c_LLVMTypeIsSized, _dart_LLVMTypeIsSized>(
            'LLVMTypeIsSized');
    return _LLVMTypeIsSized(
      Ty,
    );
  }

  _dart_LLVMTypeIsSized _LLVMTypeIsSized;

  /// Obtain the context to which this type instance is associated.
  ///
  /// @see llvm::Type::getContext()
  ffi.Pointer<LLVMOpaqueContext> LLVMGetTypeContext(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMGetTypeContext ??=
        _dylib.lookupFunction<_c_LLVMGetTypeContext, _dart_LLVMGetTypeContext>(
            'LLVMGetTypeContext');
    return _LLVMGetTypeContext(
      Ty,
    );
  }

  _dart_LLVMGetTypeContext _LLVMGetTypeContext;

  /// Dump a representation of a type to stderr.
  ///
  /// @see llvm::Type::dump()
  void LLVMDumpType(
    ffi.Pointer<LLVMOpaqueType> Val,
  ) {
    _LLVMDumpType ??= _dylib
        .lookupFunction<_c_LLVMDumpType, _dart_LLVMDumpType>('LLVMDumpType');
    return _LLVMDumpType(
      Val,
    );
  }

  _dart_LLVMDumpType _LLVMDumpType;

  /// Return a string representation of the type. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see llvm::Type::print()
  ffi.Pointer<ffi.Int8> LLVMPrintTypeToString(
    ffi.Pointer<LLVMOpaqueType> Val,
  ) {
    _LLVMPrintTypeToString ??= _dylib.lookupFunction<_c_LLVMPrintTypeToString,
        _dart_LLVMPrintTypeToString>('LLVMPrintTypeToString');
    return _LLVMPrintTypeToString(
      Val,
    );
  }

  _dart_LLVMPrintTypeToString _LLVMPrintTypeToString;

  /// Obtain an integer type from a context with specified bit width.
  ffi.Pointer<LLVMOpaqueType> LLVMInt1TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMInt1TypeInContext ??= _dylib.lookupFunction<_c_LLVMInt1TypeInContext,
        _dart_LLVMInt1TypeInContext>('LLVMInt1TypeInContext');
    return _LLVMInt1TypeInContext(
      C,
    );
  }

  _dart_LLVMInt1TypeInContext _LLVMInt1TypeInContext;

  ffi.Pointer<LLVMOpaqueType> LLVMInt8TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMInt8TypeInContext ??= _dylib.lookupFunction<_c_LLVMInt8TypeInContext,
        _dart_LLVMInt8TypeInContext>('LLVMInt8TypeInContext');
    return _LLVMInt8TypeInContext(
      C,
    );
  }

  _dart_LLVMInt8TypeInContext _LLVMInt8TypeInContext;

  ffi.Pointer<LLVMOpaqueType> LLVMInt16TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMInt16TypeInContext ??= _dylib.lookupFunction<_c_LLVMInt16TypeInContext,
        _dart_LLVMInt16TypeInContext>('LLVMInt16TypeInContext');
    return _LLVMInt16TypeInContext(
      C,
    );
  }

  _dart_LLVMInt16TypeInContext _LLVMInt16TypeInContext;

  ffi.Pointer<LLVMOpaqueType> LLVMInt32TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMInt32TypeInContext ??= _dylib.lookupFunction<_c_LLVMInt32TypeInContext,
        _dart_LLVMInt32TypeInContext>('LLVMInt32TypeInContext');
    return _LLVMInt32TypeInContext(
      C,
    );
  }

  _dart_LLVMInt32TypeInContext _LLVMInt32TypeInContext;

  ffi.Pointer<LLVMOpaqueType> LLVMInt64TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMInt64TypeInContext ??= _dylib.lookupFunction<_c_LLVMInt64TypeInContext,
        _dart_LLVMInt64TypeInContext>('LLVMInt64TypeInContext');
    return _LLVMInt64TypeInContext(
      C,
    );
  }

  _dart_LLVMInt64TypeInContext _LLVMInt64TypeInContext;

  ffi.Pointer<LLVMOpaqueType> LLVMInt128TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMInt128TypeInContext ??= _dylib.lookupFunction<
        _c_LLVMInt128TypeInContext,
        _dart_LLVMInt128TypeInContext>('LLVMInt128TypeInContext');
    return _LLVMInt128TypeInContext(
      C,
    );
  }

  _dart_LLVMInt128TypeInContext _LLVMInt128TypeInContext;

  ffi.Pointer<LLVMOpaqueType> LLVMIntTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    int NumBits,
  ) {
    _LLVMIntTypeInContext ??= _dylib.lookupFunction<_c_LLVMIntTypeInContext,
        _dart_LLVMIntTypeInContext>('LLVMIntTypeInContext');
    return _LLVMIntTypeInContext(
      C,
      NumBits,
    );
  }

  _dart_LLVMIntTypeInContext _LLVMIntTypeInContext;

  /// Obtain an integer type from the global context with a specified bit
  /// width.
  ffi.Pointer<LLVMOpaqueType> LLVMInt1Type() {
    _LLVMInt1Type ??= _dylib
        .lookupFunction<_c_LLVMInt1Type, _dart_LLVMInt1Type>('LLVMInt1Type');
    return _LLVMInt1Type();
  }

  _dart_LLVMInt1Type _LLVMInt1Type;

  ffi.Pointer<LLVMOpaqueType> LLVMInt8Type() {
    _LLVMInt8Type ??= _dylib
        .lookupFunction<_c_LLVMInt8Type, _dart_LLVMInt8Type>('LLVMInt8Type');
    return _LLVMInt8Type();
  }

  _dart_LLVMInt8Type _LLVMInt8Type;

  ffi.Pointer<LLVMOpaqueType> LLVMInt16Type() {
    _LLVMInt16Type ??= _dylib
        .lookupFunction<_c_LLVMInt16Type, _dart_LLVMInt16Type>('LLVMInt16Type');
    return _LLVMInt16Type();
  }

  _dart_LLVMInt16Type _LLVMInt16Type;

  ffi.Pointer<LLVMOpaqueType> LLVMInt32Type() {
    _LLVMInt32Type ??= _dylib
        .lookupFunction<_c_LLVMInt32Type, _dart_LLVMInt32Type>('LLVMInt32Type');
    return _LLVMInt32Type();
  }

  _dart_LLVMInt32Type _LLVMInt32Type;

  ffi.Pointer<LLVMOpaqueType> LLVMInt64Type() {
    _LLVMInt64Type ??= _dylib
        .lookupFunction<_c_LLVMInt64Type, _dart_LLVMInt64Type>('LLVMInt64Type');
    return _LLVMInt64Type();
  }

  _dart_LLVMInt64Type _LLVMInt64Type;

  ffi.Pointer<LLVMOpaqueType> LLVMInt128Type() {
    _LLVMInt128Type ??=
        _dylib.lookupFunction<_c_LLVMInt128Type, _dart_LLVMInt128Type>(
            'LLVMInt128Type');
    return _LLVMInt128Type();
  }

  _dart_LLVMInt128Type _LLVMInt128Type;

  ffi.Pointer<LLVMOpaqueType> LLVMIntType(
    int NumBits,
  ) {
    _LLVMIntType ??=
        _dylib.lookupFunction<_c_LLVMIntType, _dart_LLVMIntType>('LLVMIntType');
    return _LLVMIntType(
      NumBits,
    );
  }

  _dart_LLVMIntType _LLVMIntType;

  int LLVMGetIntTypeWidth(
    ffi.Pointer<LLVMOpaqueType> IntegerTy,
  ) {
    _LLVMGetIntTypeWidth ??= _dylib.lookupFunction<_c_LLVMGetIntTypeWidth,
        _dart_LLVMGetIntTypeWidth>('LLVMGetIntTypeWidth');
    return _LLVMGetIntTypeWidth(
      IntegerTy,
    );
  }

  _dart_LLVMGetIntTypeWidth _LLVMGetIntTypeWidth;

  /// Obtain a 16-bit floating point type from a context.
  ffi.Pointer<LLVMOpaqueType> LLVMHalfTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMHalfTypeInContext ??= _dylib.lookupFunction<_c_LLVMHalfTypeInContext,
        _dart_LLVMHalfTypeInContext>('LLVMHalfTypeInContext');
    return _LLVMHalfTypeInContext(
      C,
    );
  }

  _dart_LLVMHalfTypeInContext _LLVMHalfTypeInContext;

  /// Obtain a 32-bit floating point type from a context.
  ffi.Pointer<LLVMOpaqueType> LLVMFloatTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMFloatTypeInContext ??= _dylib.lookupFunction<_c_LLVMFloatTypeInContext,
        _dart_LLVMFloatTypeInContext>('LLVMFloatTypeInContext');
    return _LLVMFloatTypeInContext(
      C,
    );
  }

  _dart_LLVMFloatTypeInContext _LLVMFloatTypeInContext;

  /// Obtain a 64-bit floating point type from a context.
  ffi.Pointer<LLVMOpaqueType> LLVMDoubleTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMDoubleTypeInContext ??= _dylib.lookupFunction<
        _c_LLVMDoubleTypeInContext,
        _dart_LLVMDoubleTypeInContext>('LLVMDoubleTypeInContext');
    return _LLVMDoubleTypeInContext(
      C,
    );
  }

  _dart_LLVMDoubleTypeInContext _LLVMDoubleTypeInContext;

  /// Obtain a 80-bit floating point type (X87) from a context.
  ffi.Pointer<LLVMOpaqueType> LLVMX86FP80TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMX86FP80TypeInContext ??= _dylib.lookupFunction<
        _c_LLVMX86FP80TypeInContext,
        _dart_LLVMX86FP80TypeInContext>('LLVMX86FP80TypeInContext');
    return _LLVMX86FP80TypeInContext(
      C,
    );
  }

  _dart_LLVMX86FP80TypeInContext _LLVMX86FP80TypeInContext;

  /// Obtain a 128-bit floating point type (112-bit mantissa) from a
  /// context.
  ffi.Pointer<LLVMOpaqueType> LLVMFP128TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMFP128TypeInContext ??= _dylib.lookupFunction<_c_LLVMFP128TypeInContext,
        _dart_LLVMFP128TypeInContext>('LLVMFP128TypeInContext');
    return _LLVMFP128TypeInContext(
      C,
    );
  }

  _dart_LLVMFP128TypeInContext _LLVMFP128TypeInContext;

  /// Obtain a 128-bit floating point type (two 64-bits) from a context.
  ffi.Pointer<LLVMOpaqueType> LLVMPPCFP128TypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMPPCFP128TypeInContext ??= _dylib.lookupFunction<
        _c_LLVMPPCFP128TypeInContext,
        _dart_LLVMPPCFP128TypeInContext>('LLVMPPCFP128TypeInContext');
    return _LLVMPPCFP128TypeInContext(
      C,
    );
  }

  _dart_LLVMPPCFP128TypeInContext _LLVMPPCFP128TypeInContext;

  /// Obtain a floating point type from the global context.
  ///
  /// These map to the functions in this group of the same name.
  ffi.Pointer<LLVMOpaqueType> LLVMHalfType() {
    _LLVMHalfType ??= _dylib
        .lookupFunction<_c_LLVMHalfType, _dart_LLVMHalfType>('LLVMHalfType');
    return _LLVMHalfType();
  }

  _dart_LLVMHalfType _LLVMHalfType;

  ffi.Pointer<LLVMOpaqueType> LLVMFloatType() {
    _LLVMFloatType ??= _dylib
        .lookupFunction<_c_LLVMFloatType, _dart_LLVMFloatType>('LLVMFloatType');
    return _LLVMFloatType();
  }

  _dart_LLVMFloatType _LLVMFloatType;

  ffi.Pointer<LLVMOpaqueType> LLVMDoubleType() {
    _LLVMDoubleType ??=
        _dylib.lookupFunction<_c_LLVMDoubleType, _dart_LLVMDoubleType>(
            'LLVMDoubleType');
    return _LLVMDoubleType();
  }

  _dart_LLVMDoubleType _LLVMDoubleType;

  ffi.Pointer<LLVMOpaqueType> LLVMX86FP80Type() {
    _LLVMX86FP80Type ??=
        _dylib.lookupFunction<_c_LLVMX86FP80Type, _dart_LLVMX86FP80Type>(
            'LLVMX86FP80Type');
    return _LLVMX86FP80Type();
  }

  _dart_LLVMX86FP80Type _LLVMX86FP80Type;

  ffi.Pointer<LLVMOpaqueType> LLVMFP128Type() {
    _LLVMFP128Type ??= _dylib
        .lookupFunction<_c_LLVMFP128Type, _dart_LLVMFP128Type>('LLVMFP128Type');
    return _LLVMFP128Type();
  }

  _dart_LLVMFP128Type _LLVMFP128Type;

  ffi.Pointer<LLVMOpaqueType> LLVMPPCFP128Type() {
    _LLVMPPCFP128Type ??=
        _dylib.lookupFunction<_c_LLVMPPCFP128Type, _dart_LLVMPPCFP128Type>(
            'LLVMPPCFP128Type');
    return _LLVMPPCFP128Type();
  }

  _dart_LLVMPPCFP128Type _LLVMPPCFP128Type;

  /// Obtain a function type consisting of a specified signature.
  ///
  /// The function is defined as a tuple of a return Type, a list of
  /// parameter types, and whether the function is variadic.
  ffi.Pointer<LLVMOpaqueType> LLVMFunctionType(
    ffi.Pointer<LLVMOpaqueType> ReturnType,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
    int ParamCount,
    int IsVarArg,
  ) {
    _LLVMFunctionType ??=
        _dylib.lookupFunction<_c_LLVMFunctionType, _dart_LLVMFunctionType>(
            'LLVMFunctionType');
    return _LLVMFunctionType(
      ReturnType,
      ParamTypes,
      ParamCount,
      IsVarArg,
    );
  }

  _dart_LLVMFunctionType _LLVMFunctionType;

  /// Returns whether a function type is variadic.
  int LLVMIsFunctionVarArg(
    ffi.Pointer<LLVMOpaqueType> FunctionTy,
  ) {
    _LLVMIsFunctionVarArg ??= _dylib.lookupFunction<_c_LLVMIsFunctionVarArg,
        _dart_LLVMIsFunctionVarArg>('LLVMIsFunctionVarArg');
    return _LLVMIsFunctionVarArg(
      FunctionTy,
    );
  }

  _dart_LLVMIsFunctionVarArg _LLVMIsFunctionVarArg;

  /// Obtain the Type this function Type returns.
  ffi.Pointer<LLVMOpaqueType> LLVMGetReturnType(
    ffi.Pointer<LLVMOpaqueType> FunctionTy,
  ) {
    _LLVMGetReturnType ??=
        _dylib.lookupFunction<_c_LLVMGetReturnType, _dart_LLVMGetReturnType>(
            'LLVMGetReturnType');
    return _LLVMGetReturnType(
      FunctionTy,
    );
  }

  _dart_LLVMGetReturnType _LLVMGetReturnType;

  /// Obtain the number of parameters this function accepts.
  int LLVMCountParamTypes(
    ffi.Pointer<LLVMOpaqueType> FunctionTy,
  ) {
    _LLVMCountParamTypes ??= _dylib.lookupFunction<_c_LLVMCountParamTypes,
        _dart_LLVMCountParamTypes>('LLVMCountParamTypes');
    return _LLVMCountParamTypes(
      FunctionTy,
    );
  }

  _dart_LLVMCountParamTypes _LLVMCountParamTypes;

  /// Obtain the types of a function's parameters.
  ///
  /// The Dest parameter should point to a pre-allocated array of
  /// LLVMTypeRef at least LLVMCountParamTypes() large. On return, the
  /// first LLVMCountParamTypes() entries in the array will be populated
  /// with LLVMTypeRef instances.
  ///
  /// @param FunctionTy The function type to operate on.
  /// @param Dest Memory address of an array to be filled with result.
  void LLVMGetParamTypes(
    ffi.Pointer<LLVMOpaqueType> FunctionTy,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Dest,
  ) {
    _LLVMGetParamTypes ??=
        _dylib.lookupFunction<_c_LLVMGetParamTypes, _dart_LLVMGetParamTypes>(
            'LLVMGetParamTypes');
    return _LLVMGetParamTypes(
      FunctionTy,
      Dest,
    );
  }

  _dart_LLVMGetParamTypes _LLVMGetParamTypes;

  /// Create a new structure type in a context.
  ///
  /// A structure is specified by a list of inner elements/types and
  /// whether these can be packed together.
  ///
  /// @see llvm::StructType::create()
  ffi.Pointer<LLVMOpaqueType> LLVMStructTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    _LLVMStructTypeInContext ??= _dylib.lookupFunction<
        _c_LLVMStructTypeInContext,
        _dart_LLVMStructTypeInContext>('LLVMStructTypeInContext');
    return _LLVMStructTypeInContext(
      C,
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  _dart_LLVMStructTypeInContext _LLVMStructTypeInContext;

  /// Create a new structure type in the global context.
  ///
  /// @see llvm::StructType::create()
  ffi.Pointer<LLVMOpaqueType> LLVMStructType(
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    _LLVMStructType ??=
        _dylib.lookupFunction<_c_LLVMStructType, _dart_LLVMStructType>(
            'LLVMStructType');
    return _LLVMStructType(
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  _dart_LLVMStructType _LLVMStructType;

  /// Create an empty structure in a context having a specified name.
  ///
  /// @see llvm::StructType::create()
  ffi.Pointer<LLVMOpaqueType> LLVMStructCreateNamed(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMStructCreateNamed ??= _dylib.lookupFunction<_c_LLVMStructCreateNamed,
        _dart_LLVMStructCreateNamed>('LLVMStructCreateNamed');
    return _LLVMStructCreateNamed(
      C,
      Name,
    );
  }

  _dart_LLVMStructCreateNamed _LLVMStructCreateNamed;

  /// Obtain the name of a structure.
  ///
  /// @see llvm::StructType::getName()
  ffi.Pointer<ffi.Int8> LLVMGetStructName(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMGetStructName ??=
        _dylib.lookupFunction<_c_LLVMGetStructName, _dart_LLVMGetStructName>(
            'LLVMGetStructName');
    return _LLVMGetStructName(
      Ty,
    );
  }

  _dart_LLVMGetStructName _LLVMGetStructName;

  /// Set the contents of a structure type.
  ///
  /// @see llvm::StructType::setBody()
  void LLVMStructSetBody(
    ffi.Pointer<LLVMOpaqueType> StructTy,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
    int ElementCount,
    int Packed,
  ) {
    _LLVMStructSetBody ??=
        _dylib.lookupFunction<_c_LLVMStructSetBody, _dart_LLVMStructSetBody>(
            'LLVMStructSetBody');
    return _LLVMStructSetBody(
      StructTy,
      ElementTypes,
      ElementCount,
      Packed,
    );
  }

  _dart_LLVMStructSetBody _LLVMStructSetBody;

  /// Get the number of elements defined inside the structure.
  ///
  /// @see llvm::StructType::getNumElements()
  int LLVMCountStructElementTypes(
    ffi.Pointer<LLVMOpaqueType> StructTy,
  ) {
    _LLVMCountStructElementTypes ??= _dylib.lookupFunction<
        _c_LLVMCountStructElementTypes,
        _dart_LLVMCountStructElementTypes>('LLVMCountStructElementTypes');
    return _LLVMCountStructElementTypes(
      StructTy,
    );
  }

  _dart_LLVMCountStructElementTypes _LLVMCountStructElementTypes;

  /// Get the elements within a structure.
  ///
  /// The function is passed the address of a pre-allocated array of
  /// LLVMTypeRef at least LLVMCountStructElementTypes() long. After
  /// invocation, this array will be populated with the structure's
  /// elements. The objects in the destination array will have a lifetime
  /// of the structure type itself, which is the lifetime of the context it
  /// is contained in.
  void LLVMGetStructElementTypes(
    ffi.Pointer<LLVMOpaqueType> StructTy,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Dest,
  ) {
    _LLVMGetStructElementTypes ??= _dylib.lookupFunction<
        _c_LLVMGetStructElementTypes,
        _dart_LLVMGetStructElementTypes>('LLVMGetStructElementTypes');
    return _LLVMGetStructElementTypes(
      StructTy,
      Dest,
    );
  }

  _dart_LLVMGetStructElementTypes _LLVMGetStructElementTypes;

  /// Get the type of the element at a given index in the structure.
  ///
  /// @see llvm::StructType::getTypeAtIndex()
  ffi.Pointer<LLVMOpaqueType> LLVMStructGetTypeAtIndex(
    ffi.Pointer<LLVMOpaqueType> StructTy,
    int i,
  ) {
    _LLVMStructGetTypeAtIndex ??= _dylib.lookupFunction<
        _c_LLVMStructGetTypeAtIndex,
        _dart_LLVMStructGetTypeAtIndex>('LLVMStructGetTypeAtIndex');
    return _LLVMStructGetTypeAtIndex(
      StructTy,
      i,
    );
  }

  _dart_LLVMStructGetTypeAtIndex _LLVMStructGetTypeAtIndex;

  /// Determine whether a structure is packed.
  ///
  /// @see llvm::StructType::isPacked()
  int LLVMIsPackedStruct(
    ffi.Pointer<LLVMOpaqueType> StructTy,
  ) {
    _LLVMIsPackedStruct ??=
        _dylib.lookupFunction<_c_LLVMIsPackedStruct, _dart_LLVMIsPackedStruct>(
            'LLVMIsPackedStruct');
    return _LLVMIsPackedStruct(
      StructTy,
    );
  }

  _dart_LLVMIsPackedStruct _LLVMIsPackedStruct;

  /// Determine whether a structure is opaque.
  ///
  /// @see llvm::StructType::isOpaque()
  int LLVMIsOpaqueStruct(
    ffi.Pointer<LLVMOpaqueType> StructTy,
  ) {
    _LLVMIsOpaqueStruct ??=
        _dylib.lookupFunction<_c_LLVMIsOpaqueStruct, _dart_LLVMIsOpaqueStruct>(
            'LLVMIsOpaqueStruct');
    return _LLVMIsOpaqueStruct(
      StructTy,
    );
  }

  _dart_LLVMIsOpaqueStruct _LLVMIsOpaqueStruct;

  /// Determine whether a structure is literal.
  ///
  /// @see llvm::StructType::isLiteral()
  int LLVMIsLiteralStruct(
    ffi.Pointer<LLVMOpaqueType> StructTy,
  ) {
    _LLVMIsLiteralStruct ??= _dylib.lookupFunction<_c_LLVMIsLiteralStruct,
        _dart_LLVMIsLiteralStruct>('LLVMIsLiteralStruct');
    return _LLVMIsLiteralStruct(
      StructTy,
    );
  }

  _dart_LLVMIsLiteralStruct _LLVMIsLiteralStruct;

  /// Obtain the type of elements within a sequential type.
  ///
  /// This works on array, vector, and pointer types.
  ///
  /// @see llvm::SequentialType::getElementType()
  ffi.Pointer<LLVMOpaqueType> LLVMGetElementType(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMGetElementType ??=
        _dylib.lookupFunction<_c_LLVMGetElementType, _dart_LLVMGetElementType>(
            'LLVMGetElementType');
    return _LLVMGetElementType(
      Ty,
    );
  }

  _dart_LLVMGetElementType _LLVMGetElementType;

  /// Returns type's subtypes
  ///
  /// @see llvm::Type::subtypes()
  void LLVMGetSubtypes(
    ffi.Pointer<LLVMOpaqueType> Tp,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Arr,
  ) {
    _LLVMGetSubtypes ??=
        _dylib.lookupFunction<_c_LLVMGetSubtypes, _dart_LLVMGetSubtypes>(
            'LLVMGetSubtypes');
    return _LLVMGetSubtypes(
      Tp,
      Arr,
    );
  }

  _dart_LLVMGetSubtypes _LLVMGetSubtypes;

  /// Return the number of types in the derived type.
  ///
  /// @see llvm::Type::getNumContainedTypes()
  int LLVMGetNumContainedTypes(
    ffi.Pointer<LLVMOpaqueType> Tp,
  ) {
    _LLVMGetNumContainedTypes ??= _dylib.lookupFunction<
        _c_LLVMGetNumContainedTypes,
        _dart_LLVMGetNumContainedTypes>('LLVMGetNumContainedTypes');
    return _LLVMGetNumContainedTypes(
      Tp,
    );
  }

  _dart_LLVMGetNumContainedTypes _LLVMGetNumContainedTypes;

  /// Create a fixed size array type that refers to a specific type.
  ///
  /// The created type will exist in the context that its element type
  /// exists in.
  ///
  /// @see llvm::ArrayType::get()
  ffi.Pointer<LLVMOpaqueType> LLVMArrayType(
    ffi.Pointer<LLVMOpaqueType> ElementType,
    int ElementCount,
  ) {
    _LLVMArrayType ??= _dylib
        .lookupFunction<_c_LLVMArrayType, _dart_LLVMArrayType>('LLVMArrayType');
    return _LLVMArrayType(
      ElementType,
      ElementCount,
    );
  }

  _dart_LLVMArrayType _LLVMArrayType;

  /// Obtain the length of an array type.
  ///
  /// This only works on types that represent arrays.
  ///
  /// @see llvm::ArrayType::getNumElements()
  int LLVMGetArrayLength(
    ffi.Pointer<LLVMOpaqueType> ArrayTy,
  ) {
    _LLVMGetArrayLength ??=
        _dylib.lookupFunction<_c_LLVMGetArrayLength, _dart_LLVMGetArrayLength>(
            'LLVMGetArrayLength');
    return _LLVMGetArrayLength(
      ArrayTy,
    );
  }

  _dart_LLVMGetArrayLength _LLVMGetArrayLength;

  /// Create a pointer type that points to a defined type.
  ///
  /// The created type will exist in the context that its pointee type
  /// exists in.
  ///
  /// @see llvm::PointerType::get()
  ffi.Pointer<LLVMOpaqueType> LLVMPointerType(
    ffi.Pointer<LLVMOpaqueType> ElementType,
    int AddressSpace,
  ) {
    _LLVMPointerType ??=
        _dylib.lookupFunction<_c_LLVMPointerType, _dart_LLVMPointerType>(
            'LLVMPointerType');
    return _LLVMPointerType(
      ElementType,
      AddressSpace,
    );
  }

  _dart_LLVMPointerType _LLVMPointerType;

  /// Obtain the address space of a pointer type.
  ///
  /// This only works on types that represent pointers.
  ///
  /// @see llvm::PointerType::getAddressSpace()
  int LLVMGetPointerAddressSpace(
    ffi.Pointer<LLVMOpaqueType> PointerTy,
  ) {
    _LLVMGetPointerAddressSpace ??= _dylib.lookupFunction<
        _c_LLVMGetPointerAddressSpace,
        _dart_LLVMGetPointerAddressSpace>('LLVMGetPointerAddressSpace');
    return _LLVMGetPointerAddressSpace(
      PointerTy,
    );
  }

  _dart_LLVMGetPointerAddressSpace _LLVMGetPointerAddressSpace;

  /// Create a vector type that contains a defined type and has a specific
  /// number of elements.
  ///
  /// The created type will exist in the context thats its element type
  /// exists in.
  ///
  /// @see llvm::VectorType::get()
  ffi.Pointer<LLVMOpaqueType> LLVMVectorType(
    ffi.Pointer<LLVMOpaqueType> ElementType,
    int ElementCount,
  ) {
    _LLVMVectorType ??=
        _dylib.lookupFunction<_c_LLVMVectorType, _dart_LLVMVectorType>(
            'LLVMVectorType');
    return _LLVMVectorType(
      ElementType,
      ElementCount,
    );
  }

  _dart_LLVMVectorType _LLVMVectorType;

  /// Obtain the number of elements in a vector type.
  ///
  /// This only works on types that represent vectors.
  ///
  /// @see llvm::VectorType::getNumElements()
  int LLVMGetVectorSize(
    ffi.Pointer<LLVMOpaqueType> VectorTy,
  ) {
    _LLVMGetVectorSize ??=
        _dylib.lookupFunction<_c_LLVMGetVectorSize, _dart_LLVMGetVectorSize>(
            'LLVMGetVectorSize');
    return _LLVMGetVectorSize(
      VectorTy,
    );
  }

  _dart_LLVMGetVectorSize _LLVMGetVectorSize;

  /// Create a void type in a context.
  ffi.Pointer<LLVMOpaqueType> LLVMVoidTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMVoidTypeInContext ??= _dylib.lookupFunction<_c_LLVMVoidTypeInContext,
        _dart_LLVMVoidTypeInContext>('LLVMVoidTypeInContext');
    return _LLVMVoidTypeInContext(
      C,
    );
  }

  _dart_LLVMVoidTypeInContext _LLVMVoidTypeInContext;

  /// Create a label type in a context.
  ffi.Pointer<LLVMOpaqueType> LLVMLabelTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMLabelTypeInContext ??= _dylib.lookupFunction<_c_LLVMLabelTypeInContext,
        _dart_LLVMLabelTypeInContext>('LLVMLabelTypeInContext');
    return _LLVMLabelTypeInContext(
      C,
    );
  }

  _dart_LLVMLabelTypeInContext _LLVMLabelTypeInContext;

  /// Create a X86 MMX type in a context.
  ffi.Pointer<LLVMOpaqueType> LLVMX86MMXTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMX86MMXTypeInContext ??= _dylib.lookupFunction<
        _c_LLVMX86MMXTypeInContext,
        _dart_LLVMX86MMXTypeInContext>('LLVMX86MMXTypeInContext');
    return _LLVMX86MMXTypeInContext(
      C,
    );
  }

  _dart_LLVMX86MMXTypeInContext _LLVMX86MMXTypeInContext;

  /// Create a token type in a context.
  ffi.Pointer<LLVMOpaqueType> LLVMTokenTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMTokenTypeInContext ??= _dylib.lookupFunction<_c_LLVMTokenTypeInContext,
        _dart_LLVMTokenTypeInContext>('LLVMTokenTypeInContext');
    return _LLVMTokenTypeInContext(
      C,
    );
  }

  _dart_LLVMTokenTypeInContext _LLVMTokenTypeInContext;

  /// Create a metadata type in a context.
  ffi.Pointer<LLVMOpaqueType> LLVMMetadataTypeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMMetadataTypeInContext ??= _dylib.lookupFunction<
        _c_LLVMMetadataTypeInContext,
        _dart_LLVMMetadataTypeInContext>('LLVMMetadataTypeInContext');
    return _LLVMMetadataTypeInContext(
      C,
    );
  }

  _dart_LLVMMetadataTypeInContext _LLVMMetadataTypeInContext;

  /// These are similar to the above functions except they operate on the
  /// global context.
  ffi.Pointer<LLVMOpaqueType> LLVMVoidType() {
    _LLVMVoidType ??= _dylib
        .lookupFunction<_c_LLVMVoidType, _dart_LLVMVoidType>('LLVMVoidType');
    return _LLVMVoidType();
  }

  _dart_LLVMVoidType _LLVMVoidType;

  ffi.Pointer<LLVMOpaqueType> LLVMLabelType() {
    _LLVMLabelType ??= _dylib
        .lookupFunction<_c_LLVMLabelType, _dart_LLVMLabelType>('LLVMLabelType');
    return _LLVMLabelType();
  }

  _dart_LLVMLabelType _LLVMLabelType;

  ffi.Pointer<LLVMOpaqueType> LLVMX86MMXType() {
    _LLVMX86MMXType ??=
        _dylib.lookupFunction<_c_LLVMX86MMXType, _dart_LLVMX86MMXType>(
            'LLVMX86MMXType');
    return _LLVMX86MMXType();
  }

  _dart_LLVMX86MMXType _LLVMX86MMXType;

  /// Obtain the type of a value.
  ///
  /// @see llvm::Value::getType()
  ffi.Pointer<LLVMOpaqueType> LLVMTypeOf(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMTypeOf ??=
        _dylib.lookupFunction<_c_LLVMTypeOf, _dart_LLVMTypeOf>('LLVMTypeOf');
    return _LLVMTypeOf(
      Val,
    );
  }

  _dart_LLVMTypeOf _LLVMTypeOf;

  /// Obtain the enumerated type of a Value instance.
  ///
  /// @see llvm::Value::getValueID()
  int LLVMGetValueKind(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMGetValueKind ??=
        _dylib.lookupFunction<_c_LLVMGetValueKind, _dart_LLVMGetValueKind>(
            'LLVMGetValueKind');
    return _LLVMGetValueKind(
      Val,
    );
  }

  _dart_LLVMGetValueKind _LLVMGetValueKind;

  /// Obtain the string name of a value.
  ///
  /// @see llvm::Value::getName()
  ffi.Pointer<ffi.Int8> LLVMGetValueName2(
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Uint64> Length,
  ) {
    _LLVMGetValueName2 ??=
        _dylib.lookupFunction<_c_LLVMGetValueName2, _dart_LLVMGetValueName2>(
            'LLVMGetValueName2');
    return _LLVMGetValueName2(
      Val,
      Length,
    );
  }

  _dart_LLVMGetValueName2 _LLVMGetValueName2;

  /// Set the string name of a value.
  ///
  /// @see llvm::Value::setName()
  void LLVMSetValueName2(
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Int8> Name,
    int NameLen,
  ) {
    _LLVMSetValueName2 ??=
        _dylib.lookupFunction<_c_LLVMSetValueName2, _dart_LLVMSetValueName2>(
            'LLVMSetValueName2');
    return _LLVMSetValueName2(
      Val,
      Name,
      NameLen,
    );
  }

  _dart_LLVMSetValueName2 _LLVMSetValueName2;

  /// Dump a representation of a value to stderr.
  ///
  /// @see llvm::Value::dump()
  void LLVMDumpValue(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMDumpValue ??= _dylib
        .lookupFunction<_c_LLVMDumpValue, _dart_LLVMDumpValue>('LLVMDumpValue');
    return _LLVMDumpValue(
      Val,
    );
  }

  _dart_LLVMDumpValue _LLVMDumpValue;

  /// Return a string representation of the value. Use
  /// LLVMDisposeMessage to free the string.
  ///
  /// @see llvm::Value::print()
  ffi.Pointer<ffi.Int8> LLVMPrintValueToString(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMPrintValueToString ??= _dylib.lookupFunction<_c_LLVMPrintValueToString,
        _dart_LLVMPrintValueToString>('LLVMPrintValueToString');
    return _LLVMPrintValueToString(
      Val,
    );
  }

  _dart_LLVMPrintValueToString _LLVMPrintValueToString;

  /// Replace all uses of a value with another one.
  ///
  /// @see llvm::Value::replaceAllUsesWith()
  void LLVMReplaceAllUsesWith(
    ffi.Pointer<LLVMOpaqueValue> OldVal,
    ffi.Pointer<LLVMOpaqueValue> NewVal,
  ) {
    _LLVMReplaceAllUsesWith ??= _dylib.lookupFunction<_c_LLVMReplaceAllUsesWith,
        _dart_LLVMReplaceAllUsesWith>('LLVMReplaceAllUsesWith');
    return _LLVMReplaceAllUsesWith(
      OldVal,
      NewVal,
    );
  }

  _dart_LLVMReplaceAllUsesWith _LLVMReplaceAllUsesWith;

  /// Determine whether the specified value instance is constant.
  int LLVMIsConstant(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsConstant ??=
        _dylib.lookupFunction<_c_LLVMIsConstant, _dart_LLVMIsConstant>(
            'LLVMIsConstant');
    return _LLVMIsConstant(
      Val,
    );
  }

  _dart_LLVMIsConstant _LLVMIsConstant;

  /// Determine whether a value instance is undefined.
  int LLVMIsUndef(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsUndef ??=
        _dylib.lookupFunction<_c_LLVMIsUndef, _dart_LLVMIsUndef>('LLVMIsUndef');
    return _LLVMIsUndef(
      Val,
    );
  }

  _dart_LLVMIsUndef _LLVMIsUndef;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAArgument(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAArgument ??=
        _dylib.lookupFunction<_c_LLVMIsAArgument, _dart_LLVMIsAArgument>(
            'LLVMIsAArgument');
    return _LLVMIsAArgument(
      Val,
    );
  }

  _dart_LLVMIsAArgument _LLVMIsAArgument;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsABasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsABasicBlock ??=
        _dylib.lookupFunction<_c_LLVMIsABasicBlock, _dart_LLVMIsABasicBlock>(
            'LLVMIsABasicBlock');
    return _LLVMIsABasicBlock(
      Val,
    );
  }

  _dart_LLVMIsABasicBlock _LLVMIsABasicBlock;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAInlineAsm(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAInlineAsm ??=
        _dylib.lookupFunction<_c_LLVMIsAInlineAsm, _dart_LLVMIsAInlineAsm>(
            'LLVMIsAInlineAsm');
    return _LLVMIsAInlineAsm(
      Val,
    );
  }

  _dart_LLVMIsAInlineAsm _LLVMIsAInlineAsm;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAUser(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAUser ??=
        _dylib.lookupFunction<_c_LLVMIsAUser, _dart_LLVMIsAUser>('LLVMIsAUser');
    return _LLVMIsAUser(
      Val,
    );
  }

  _dart_LLVMIsAUser _LLVMIsAUser;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstant(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstant ??=
        _dylib.lookupFunction<_c_LLVMIsAConstant, _dart_LLVMIsAConstant>(
            'LLVMIsAConstant');
    return _LLVMIsAConstant(
      Val,
    );
  }

  _dart_LLVMIsAConstant _LLVMIsAConstant;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsABlockAddress(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsABlockAddress ??= _dylib.lookupFunction<_c_LLVMIsABlockAddress,
        _dart_LLVMIsABlockAddress>('LLVMIsABlockAddress');
    return _LLVMIsABlockAddress(
      Val,
    );
  }

  _dart_LLVMIsABlockAddress _LLVMIsABlockAddress;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantAggregateZero(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantAggregateZero ??= _dylib.lookupFunction<
        _c_LLVMIsAConstantAggregateZero,
        _dart_LLVMIsAConstantAggregateZero>('LLVMIsAConstantAggregateZero');
    return _LLVMIsAConstantAggregateZero(
      Val,
    );
  }

  _dart_LLVMIsAConstantAggregateZero _LLVMIsAConstantAggregateZero;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantArray(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantArray ??= _dylib.lookupFunction<_c_LLVMIsAConstantArray,
        _dart_LLVMIsAConstantArray>('LLVMIsAConstantArray');
    return _LLVMIsAConstantArray(
      Val,
    );
  }

  _dart_LLVMIsAConstantArray _LLVMIsAConstantArray;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantDataSequential(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantDataSequential ??= _dylib.lookupFunction<
        _c_LLVMIsAConstantDataSequential,
        _dart_LLVMIsAConstantDataSequential>('LLVMIsAConstantDataSequential');
    return _LLVMIsAConstantDataSequential(
      Val,
    );
  }

  _dart_LLVMIsAConstantDataSequential _LLVMIsAConstantDataSequential;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantDataArray(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantDataArray ??= _dylib.lookupFunction<
        _c_LLVMIsAConstantDataArray,
        _dart_LLVMIsAConstantDataArray>('LLVMIsAConstantDataArray');
    return _LLVMIsAConstantDataArray(
      Val,
    );
  }

  _dart_LLVMIsAConstantDataArray _LLVMIsAConstantDataArray;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantDataVector(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantDataVector ??= _dylib.lookupFunction<
        _c_LLVMIsAConstantDataVector,
        _dart_LLVMIsAConstantDataVector>('LLVMIsAConstantDataVector');
    return _LLVMIsAConstantDataVector(
      Val,
    );
  }

  _dart_LLVMIsAConstantDataVector _LLVMIsAConstantDataVector;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantExpr(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantExpr ??= _dylib.lookupFunction<_c_LLVMIsAConstantExpr,
        _dart_LLVMIsAConstantExpr>('LLVMIsAConstantExpr');
    return _LLVMIsAConstantExpr(
      Val,
    );
  }

  _dart_LLVMIsAConstantExpr _LLVMIsAConstantExpr;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantFP(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantFP ??=
        _dylib.lookupFunction<_c_LLVMIsAConstantFP, _dart_LLVMIsAConstantFP>(
            'LLVMIsAConstantFP');
    return _LLVMIsAConstantFP(
      Val,
    );
  }

  _dart_LLVMIsAConstantFP _LLVMIsAConstantFP;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantInt(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantInt ??=
        _dylib.lookupFunction<_c_LLVMIsAConstantInt, _dart_LLVMIsAConstantInt>(
            'LLVMIsAConstantInt');
    return _LLVMIsAConstantInt(
      Val,
    );
  }

  _dart_LLVMIsAConstantInt _LLVMIsAConstantInt;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantPointerNull(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantPointerNull ??= _dylib.lookupFunction<
        _c_LLVMIsAConstantPointerNull,
        _dart_LLVMIsAConstantPointerNull>('LLVMIsAConstantPointerNull');
    return _LLVMIsAConstantPointerNull(
      Val,
    );
  }

  _dart_LLVMIsAConstantPointerNull _LLVMIsAConstantPointerNull;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantStruct(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantStruct ??= _dylib.lookupFunction<_c_LLVMIsAConstantStruct,
        _dart_LLVMIsAConstantStruct>('LLVMIsAConstantStruct');
    return _LLVMIsAConstantStruct(
      Val,
    );
  }

  _dart_LLVMIsAConstantStruct _LLVMIsAConstantStruct;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantTokenNone(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantTokenNone ??= _dylib.lookupFunction<
        _c_LLVMIsAConstantTokenNone,
        _dart_LLVMIsAConstantTokenNone>('LLVMIsAConstantTokenNone');
    return _LLVMIsAConstantTokenNone(
      Val,
    );
  }

  _dart_LLVMIsAConstantTokenNone _LLVMIsAConstantTokenNone;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAConstantVector(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAConstantVector ??= _dylib.lookupFunction<_c_LLVMIsAConstantVector,
        _dart_LLVMIsAConstantVector>('LLVMIsAConstantVector');
    return _LLVMIsAConstantVector(
      Val,
    );
  }

  _dart_LLVMIsAConstantVector _LLVMIsAConstantVector;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAGlobalValue(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAGlobalValue ??=
        _dylib.lookupFunction<_c_LLVMIsAGlobalValue, _dart_LLVMIsAGlobalValue>(
            'LLVMIsAGlobalValue');
    return _LLVMIsAGlobalValue(
      Val,
    );
  }

  _dart_LLVMIsAGlobalValue _LLVMIsAGlobalValue;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAGlobalAlias(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAGlobalAlias ??=
        _dylib.lookupFunction<_c_LLVMIsAGlobalAlias, _dart_LLVMIsAGlobalAlias>(
            'LLVMIsAGlobalAlias');
    return _LLVMIsAGlobalAlias(
      Val,
    );
  }

  _dart_LLVMIsAGlobalAlias _LLVMIsAGlobalAlias;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAGlobalIFunc(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAGlobalIFunc ??=
        _dylib.lookupFunction<_c_LLVMIsAGlobalIFunc, _dart_LLVMIsAGlobalIFunc>(
            'LLVMIsAGlobalIFunc');
    return _LLVMIsAGlobalIFunc(
      Val,
    );
  }

  _dart_LLVMIsAGlobalIFunc _LLVMIsAGlobalIFunc;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAGlobalObject(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAGlobalObject ??= _dylib.lookupFunction<_c_LLVMIsAGlobalObject,
        _dart_LLVMIsAGlobalObject>('LLVMIsAGlobalObject');
    return _LLVMIsAGlobalObject(
      Val,
    );
  }

  _dart_LLVMIsAGlobalObject _LLVMIsAGlobalObject;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFunction(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFunction ??=
        _dylib.lookupFunction<_c_LLVMIsAFunction, _dart_LLVMIsAFunction>(
            'LLVMIsAFunction');
    return _LLVMIsAFunction(
      Val,
    );
  }

  _dart_LLVMIsAFunction _LLVMIsAFunction;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAGlobalVariable(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAGlobalVariable ??= _dylib.lookupFunction<_c_LLVMIsAGlobalVariable,
        _dart_LLVMIsAGlobalVariable>('LLVMIsAGlobalVariable');
    return _LLVMIsAGlobalVariable(
      Val,
    );
  }

  _dart_LLVMIsAGlobalVariable _LLVMIsAGlobalVariable;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAUndefValue(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAUndefValue ??=
        _dylib.lookupFunction<_c_LLVMIsAUndefValue, _dart_LLVMIsAUndefValue>(
            'LLVMIsAUndefValue');
    return _LLVMIsAUndefValue(
      Val,
    );
  }

  _dart_LLVMIsAUndefValue _LLVMIsAUndefValue;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAInstruction(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAInstruction ??=
        _dylib.lookupFunction<_c_LLVMIsAInstruction, _dart_LLVMIsAInstruction>(
            'LLVMIsAInstruction');
    return _LLVMIsAInstruction(
      Val,
    );
  }

  _dart_LLVMIsAInstruction _LLVMIsAInstruction;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAUnaryOperator(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAUnaryOperator ??= _dylib.lookupFunction<_c_LLVMIsAUnaryOperator,
        _dart_LLVMIsAUnaryOperator>('LLVMIsAUnaryOperator');
    return _LLVMIsAUnaryOperator(
      Val,
    );
  }

  _dart_LLVMIsAUnaryOperator _LLVMIsAUnaryOperator;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsABinaryOperator(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsABinaryOperator ??= _dylib.lookupFunction<_c_LLVMIsABinaryOperator,
        _dart_LLVMIsABinaryOperator>('LLVMIsABinaryOperator');
    return _LLVMIsABinaryOperator(
      Val,
    );
  }

  _dart_LLVMIsABinaryOperator _LLVMIsABinaryOperator;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACallInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACallInst ??=
        _dylib.lookupFunction<_c_LLVMIsACallInst, _dart_LLVMIsACallInst>(
            'LLVMIsACallInst');
    return _LLVMIsACallInst(
      Val,
    );
  }

  _dart_LLVMIsACallInst _LLVMIsACallInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAIntrinsicInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAIntrinsicInst ??= _dylib.lookupFunction<_c_LLVMIsAIntrinsicInst,
        _dart_LLVMIsAIntrinsicInst>('LLVMIsAIntrinsicInst');
    return _LLVMIsAIntrinsicInst(
      Val,
    );
  }

  _dart_LLVMIsAIntrinsicInst _LLVMIsAIntrinsicInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsADbgInfoIntrinsic(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsADbgInfoIntrinsic ??= _dylib.lookupFunction<
        _c_LLVMIsADbgInfoIntrinsic,
        _dart_LLVMIsADbgInfoIntrinsic>('LLVMIsADbgInfoIntrinsic');
    return _LLVMIsADbgInfoIntrinsic(
      Val,
    );
  }

  _dart_LLVMIsADbgInfoIntrinsic _LLVMIsADbgInfoIntrinsic;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsADbgVariableIntrinsic(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsADbgVariableIntrinsic ??= _dylib.lookupFunction<
        _c_LLVMIsADbgVariableIntrinsic,
        _dart_LLVMIsADbgVariableIntrinsic>('LLVMIsADbgVariableIntrinsic');
    return _LLVMIsADbgVariableIntrinsic(
      Val,
    );
  }

  _dart_LLVMIsADbgVariableIntrinsic _LLVMIsADbgVariableIntrinsic;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsADbgDeclareInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsADbgDeclareInst ??= _dylib.lookupFunction<_c_LLVMIsADbgDeclareInst,
        _dart_LLVMIsADbgDeclareInst>('LLVMIsADbgDeclareInst');
    return _LLVMIsADbgDeclareInst(
      Val,
    );
  }

  _dart_LLVMIsADbgDeclareInst _LLVMIsADbgDeclareInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsADbgLabelInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsADbgLabelInst ??= _dylib.lookupFunction<_c_LLVMIsADbgLabelInst,
        _dart_LLVMIsADbgLabelInst>('LLVMIsADbgLabelInst');
    return _LLVMIsADbgLabelInst(
      Val,
    );
  }

  _dart_LLVMIsADbgLabelInst _LLVMIsADbgLabelInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAMemIntrinsic(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAMemIntrinsic ??= _dylib.lookupFunction<_c_LLVMIsAMemIntrinsic,
        _dart_LLVMIsAMemIntrinsic>('LLVMIsAMemIntrinsic');
    return _LLVMIsAMemIntrinsic(
      Val,
    );
  }

  _dart_LLVMIsAMemIntrinsic _LLVMIsAMemIntrinsic;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAMemCpyInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAMemCpyInst ??=
        _dylib.lookupFunction<_c_LLVMIsAMemCpyInst, _dart_LLVMIsAMemCpyInst>(
            'LLVMIsAMemCpyInst');
    return _LLVMIsAMemCpyInst(
      Val,
    );
  }

  _dart_LLVMIsAMemCpyInst _LLVMIsAMemCpyInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAMemMoveInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAMemMoveInst ??=
        _dylib.lookupFunction<_c_LLVMIsAMemMoveInst, _dart_LLVMIsAMemMoveInst>(
            'LLVMIsAMemMoveInst');
    return _LLVMIsAMemMoveInst(
      Val,
    );
  }

  _dart_LLVMIsAMemMoveInst _LLVMIsAMemMoveInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAMemSetInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAMemSetInst ??=
        _dylib.lookupFunction<_c_LLVMIsAMemSetInst, _dart_LLVMIsAMemSetInst>(
            'LLVMIsAMemSetInst');
    return _LLVMIsAMemSetInst(
      Val,
    );
  }

  _dart_LLVMIsAMemSetInst _LLVMIsAMemSetInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACmpInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACmpInst ??=
        _dylib.lookupFunction<_c_LLVMIsACmpInst, _dart_LLVMIsACmpInst>(
            'LLVMIsACmpInst');
    return _LLVMIsACmpInst(
      Val,
    );
  }

  _dart_LLVMIsACmpInst _LLVMIsACmpInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFCmpInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFCmpInst ??=
        _dylib.lookupFunction<_c_LLVMIsAFCmpInst, _dart_LLVMIsAFCmpInst>(
            'LLVMIsAFCmpInst');
    return _LLVMIsAFCmpInst(
      Val,
    );
  }

  _dart_LLVMIsAFCmpInst _LLVMIsAFCmpInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAICmpInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAICmpInst ??=
        _dylib.lookupFunction<_c_LLVMIsAICmpInst, _dart_LLVMIsAICmpInst>(
            'LLVMIsAICmpInst');
    return _LLVMIsAICmpInst(
      Val,
    );
  }

  _dart_LLVMIsAICmpInst _LLVMIsAICmpInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAExtractElementInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAExtractElementInst ??= _dylib.lookupFunction<
        _c_LLVMIsAExtractElementInst,
        _dart_LLVMIsAExtractElementInst>('LLVMIsAExtractElementInst');
    return _LLVMIsAExtractElementInst(
      Val,
    );
  }

  _dart_LLVMIsAExtractElementInst _LLVMIsAExtractElementInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAGetElementPtrInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAGetElementPtrInst ??= _dylib.lookupFunction<
        _c_LLVMIsAGetElementPtrInst,
        _dart_LLVMIsAGetElementPtrInst>('LLVMIsAGetElementPtrInst');
    return _LLVMIsAGetElementPtrInst(
      Val,
    );
  }

  _dart_LLVMIsAGetElementPtrInst _LLVMIsAGetElementPtrInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAInsertElementInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAInsertElementInst ??= _dylib.lookupFunction<
        _c_LLVMIsAInsertElementInst,
        _dart_LLVMIsAInsertElementInst>('LLVMIsAInsertElementInst');
    return _LLVMIsAInsertElementInst(
      Val,
    );
  }

  _dart_LLVMIsAInsertElementInst _LLVMIsAInsertElementInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAInsertValueInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAInsertValueInst ??= _dylib.lookupFunction<_c_LLVMIsAInsertValueInst,
        _dart_LLVMIsAInsertValueInst>('LLVMIsAInsertValueInst');
    return _LLVMIsAInsertValueInst(
      Val,
    );
  }

  _dart_LLVMIsAInsertValueInst _LLVMIsAInsertValueInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsALandingPadInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsALandingPadInst ??= _dylib.lookupFunction<_c_LLVMIsALandingPadInst,
        _dart_LLVMIsALandingPadInst>('LLVMIsALandingPadInst');
    return _LLVMIsALandingPadInst(
      Val,
    );
  }

  _dart_LLVMIsALandingPadInst _LLVMIsALandingPadInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAPHINode(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAPHINode ??=
        _dylib.lookupFunction<_c_LLVMIsAPHINode, _dart_LLVMIsAPHINode>(
            'LLVMIsAPHINode');
    return _LLVMIsAPHINode(
      Val,
    );
  }

  _dart_LLVMIsAPHINode _LLVMIsAPHINode;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsASelectInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsASelectInst ??=
        _dylib.lookupFunction<_c_LLVMIsASelectInst, _dart_LLVMIsASelectInst>(
            'LLVMIsASelectInst');
    return _LLVMIsASelectInst(
      Val,
    );
  }

  _dart_LLVMIsASelectInst _LLVMIsASelectInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAShuffleVectorInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAShuffleVectorInst ??= _dylib.lookupFunction<
        _c_LLVMIsAShuffleVectorInst,
        _dart_LLVMIsAShuffleVectorInst>('LLVMIsAShuffleVectorInst');
    return _LLVMIsAShuffleVectorInst(
      Val,
    );
  }

  _dart_LLVMIsAShuffleVectorInst _LLVMIsAShuffleVectorInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAStoreInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAStoreInst ??=
        _dylib.lookupFunction<_c_LLVMIsAStoreInst, _dart_LLVMIsAStoreInst>(
            'LLVMIsAStoreInst');
    return _LLVMIsAStoreInst(
      Val,
    );
  }

  _dart_LLVMIsAStoreInst _LLVMIsAStoreInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsABranchInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsABranchInst ??=
        _dylib.lookupFunction<_c_LLVMIsABranchInst, _dart_LLVMIsABranchInst>(
            'LLVMIsABranchInst');
    return _LLVMIsABranchInst(
      Val,
    );
  }

  _dart_LLVMIsABranchInst _LLVMIsABranchInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAIndirectBrInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAIndirectBrInst ??= _dylib.lookupFunction<_c_LLVMIsAIndirectBrInst,
        _dart_LLVMIsAIndirectBrInst>('LLVMIsAIndirectBrInst');
    return _LLVMIsAIndirectBrInst(
      Val,
    );
  }

  _dart_LLVMIsAIndirectBrInst _LLVMIsAIndirectBrInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAInvokeInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAInvokeInst ??=
        _dylib.lookupFunction<_c_LLVMIsAInvokeInst, _dart_LLVMIsAInvokeInst>(
            'LLVMIsAInvokeInst');
    return _LLVMIsAInvokeInst(
      Val,
    );
  }

  _dart_LLVMIsAInvokeInst _LLVMIsAInvokeInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAReturnInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAReturnInst ??=
        _dylib.lookupFunction<_c_LLVMIsAReturnInst, _dart_LLVMIsAReturnInst>(
            'LLVMIsAReturnInst');
    return _LLVMIsAReturnInst(
      Val,
    );
  }

  _dart_LLVMIsAReturnInst _LLVMIsAReturnInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsASwitchInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsASwitchInst ??=
        _dylib.lookupFunction<_c_LLVMIsASwitchInst, _dart_LLVMIsASwitchInst>(
            'LLVMIsASwitchInst');
    return _LLVMIsASwitchInst(
      Val,
    );
  }

  _dart_LLVMIsASwitchInst _LLVMIsASwitchInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAUnreachableInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAUnreachableInst ??= _dylib.lookupFunction<_c_LLVMIsAUnreachableInst,
        _dart_LLVMIsAUnreachableInst>('LLVMIsAUnreachableInst');
    return _LLVMIsAUnreachableInst(
      Val,
    );
  }

  _dart_LLVMIsAUnreachableInst _LLVMIsAUnreachableInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAResumeInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAResumeInst ??=
        _dylib.lookupFunction<_c_LLVMIsAResumeInst, _dart_LLVMIsAResumeInst>(
            'LLVMIsAResumeInst');
    return _LLVMIsAResumeInst(
      Val,
    );
  }

  _dart_LLVMIsAResumeInst _LLVMIsAResumeInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACleanupReturnInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACleanupReturnInst ??= _dylib.lookupFunction<
        _c_LLVMIsACleanupReturnInst,
        _dart_LLVMIsACleanupReturnInst>('LLVMIsACleanupReturnInst');
    return _LLVMIsACleanupReturnInst(
      Val,
    );
  }

  _dart_LLVMIsACleanupReturnInst _LLVMIsACleanupReturnInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACatchReturnInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACatchReturnInst ??= _dylib.lookupFunction<_c_LLVMIsACatchReturnInst,
        _dart_LLVMIsACatchReturnInst>('LLVMIsACatchReturnInst');
    return _LLVMIsACatchReturnInst(
      Val,
    );
  }

  _dart_LLVMIsACatchReturnInst _LLVMIsACatchReturnInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACatchSwitchInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACatchSwitchInst ??= _dylib.lookupFunction<_c_LLVMIsACatchSwitchInst,
        _dart_LLVMIsACatchSwitchInst>('LLVMIsACatchSwitchInst');
    return _LLVMIsACatchSwitchInst(
      Val,
    );
  }

  _dart_LLVMIsACatchSwitchInst _LLVMIsACatchSwitchInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACallBrInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACallBrInst ??=
        _dylib.lookupFunction<_c_LLVMIsACallBrInst, _dart_LLVMIsACallBrInst>(
            'LLVMIsACallBrInst');
    return _LLVMIsACallBrInst(
      Val,
    );
  }

  _dart_LLVMIsACallBrInst _LLVMIsACallBrInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFuncletPadInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFuncletPadInst ??= _dylib.lookupFunction<_c_LLVMIsAFuncletPadInst,
        _dart_LLVMIsAFuncletPadInst>('LLVMIsAFuncletPadInst');
    return _LLVMIsAFuncletPadInst(
      Val,
    );
  }

  _dart_LLVMIsAFuncletPadInst _LLVMIsAFuncletPadInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACatchPadInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACatchPadInst ??= _dylib.lookupFunction<_c_LLVMIsACatchPadInst,
        _dart_LLVMIsACatchPadInst>('LLVMIsACatchPadInst');
    return _LLVMIsACatchPadInst(
      Val,
    );
  }

  _dart_LLVMIsACatchPadInst _LLVMIsACatchPadInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACleanupPadInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACleanupPadInst ??= _dylib.lookupFunction<_c_LLVMIsACleanupPadInst,
        _dart_LLVMIsACleanupPadInst>('LLVMIsACleanupPadInst');
    return _LLVMIsACleanupPadInst(
      Val,
    );
  }

  _dart_LLVMIsACleanupPadInst _LLVMIsACleanupPadInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAUnaryInstruction(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAUnaryInstruction ??= _dylib.lookupFunction<
        _c_LLVMIsAUnaryInstruction,
        _dart_LLVMIsAUnaryInstruction>('LLVMIsAUnaryInstruction');
    return _LLVMIsAUnaryInstruction(
      Val,
    );
  }

  _dart_LLVMIsAUnaryInstruction _LLVMIsAUnaryInstruction;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAAllocaInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAAllocaInst ??=
        _dylib.lookupFunction<_c_LLVMIsAAllocaInst, _dart_LLVMIsAAllocaInst>(
            'LLVMIsAAllocaInst');
    return _LLVMIsAAllocaInst(
      Val,
    );
  }

  _dart_LLVMIsAAllocaInst _LLVMIsAAllocaInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsACastInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsACastInst ??=
        _dylib.lookupFunction<_c_LLVMIsACastInst, _dart_LLVMIsACastInst>(
            'LLVMIsACastInst');
    return _LLVMIsACastInst(
      Val,
    );
  }

  _dart_LLVMIsACastInst _LLVMIsACastInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAAddrSpaceCastInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAAddrSpaceCastInst ??= _dylib.lookupFunction<
        _c_LLVMIsAAddrSpaceCastInst,
        _dart_LLVMIsAAddrSpaceCastInst>('LLVMIsAAddrSpaceCastInst');
    return _LLVMIsAAddrSpaceCastInst(
      Val,
    );
  }

  _dart_LLVMIsAAddrSpaceCastInst _LLVMIsAAddrSpaceCastInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsABitCastInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsABitCastInst ??=
        _dylib.lookupFunction<_c_LLVMIsABitCastInst, _dart_LLVMIsABitCastInst>(
            'LLVMIsABitCastInst');
    return _LLVMIsABitCastInst(
      Val,
    );
  }

  _dart_LLVMIsABitCastInst _LLVMIsABitCastInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFPExtInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFPExtInst ??=
        _dylib.lookupFunction<_c_LLVMIsAFPExtInst, _dart_LLVMIsAFPExtInst>(
            'LLVMIsAFPExtInst');
    return _LLVMIsAFPExtInst(
      Val,
    );
  }

  _dart_LLVMIsAFPExtInst _LLVMIsAFPExtInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFPToSIInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFPToSIInst ??=
        _dylib.lookupFunction<_c_LLVMIsAFPToSIInst, _dart_LLVMIsAFPToSIInst>(
            'LLVMIsAFPToSIInst');
    return _LLVMIsAFPToSIInst(
      Val,
    );
  }

  _dart_LLVMIsAFPToSIInst _LLVMIsAFPToSIInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFPToUIInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFPToUIInst ??=
        _dylib.lookupFunction<_c_LLVMIsAFPToUIInst, _dart_LLVMIsAFPToUIInst>(
            'LLVMIsAFPToUIInst');
    return _LLVMIsAFPToUIInst(
      Val,
    );
  }

  _dart_LLVMIsAFPToUIInst _LLVMIsAFPToUIInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFPTruncInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFPTruncInst ??=
        _dylib.lookupFunction<_c_LLVMIsAFPTruncInst, _dart_LLVMIsAFPTruncInst>(
            'LLVMIsAFPTruncInst');
    return _LLVMIsAFPTruncInst(
      Val,
    );
  }

  _dart_LLVMIsAFPTruncInst _LLVMIsAFPTruncInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAIntToPtrInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAIntToPtrInst ??= _dylib.lookupFunction<_c_LLVMIsAIntToPtrInst,
        _dart_LLVMIsAIntToPtrInst>('LLVMIsAIntToPtrInst');
    return _LLVMIsAIntToPtrInst(
      Val,
    );
  }

  _dart_LLVMIsAIntToPtrInst _LLVMIsAIntToPtrInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAPtrToIntInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAPtrToIntInst ??= _dylib.lookupFunction<_c_LLVMIsAPtrToIntInst,
        _dart_LLVMIsAPtrToIntInst>('LLVMIsAPtrToIntInst');
    return _LLVMIsAPtrToIntInst(
      Val,
    );
  }

  _dart_LLVMIsAPtrToIntInst _LLVMIsAPtrToIntInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsASExtInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsASExtInst ??=
        _dylib.lookupFunction<_c_LLVMIsASExtInst, _dart_LLVMIsASExtInst>(
            'LLVMIsASExtInst');
    return _LLVMIsASExtInst(
      Val,
    );
  }

  _dart_LLVMIsASExtInst _LLVMIsASExtInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsASIToFPInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsASIToFPInst ??=
        _dylib.lookupFunction<_c_LLVMIsASIToFPInst, _dart_LLVMIsASIToFPInst>(
            'LLVMIsASIToFPInst');
    return _LLVMIsASIToFPInst(
      Val,
    );
  }

  _dart_LLVMIsASIToFPInst _LLVMIsASIToFPInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsATruncInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsATruncInst ??=
        _dylib.lookupFunction<_c_LLVMIsATruncInst, _dart_LLVMIsATruncInst>(
            'LLVMIsATruncInst');
    return _LLVMIsATruncInst(
      Val,
    );
  }

  _dart_LLVMIsATruncInst _LLVMIsATruncInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAUIToFPInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAUIToFPInst ??=
        _dylib.lookupFunction<_c_LLVMIsAUIToFPInst, _dart_LLVMIsAUIToFPInst>(
            'LLVMIsAUIToFPInst');
    return _LLVMIsAUIToFPInst(
      Val,
    );
  }

  _dart_LLVMIsAUIToFPInst _LLVMIsAUIToFPInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAZExtInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAZExtInst ??=
        _dylib.lookupFunction<_c_LLVMIsAZExtInst, _dart_LLVMIsAZExtInst>(
            'LLVMIsAZExtInst');
    return _LLVMIsAZExtInst(
      Val,
    );
  }

  _dart_LLVMIsAZExtInst _LLVMIsAZExtInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAExtractValueInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAExtractValueInst ??= _dylib.lookupFunction<
        _c_LLVMIsAExtractValueInst,
        _dart_LLVMIsAExtractValueInst>('LLVMIsAExtractValueInst');
    return _LLVMIsAExtractValueInst(
      Val,
    );
  }

  _dart_LLVMIsAExtractValueInst _LLVMIsAExtractValueInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsALoadInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsALoadInst ??=
        _dylib.lookupFunction<_c_LLVMIsALoadInst, _dart_LLVMIsALoadInst>(
            'LLVMIsALoadInst');
    return _LLVMIsALoadInst(
      Val,
    );
  }

  _dart_LLVMIsALoadInst _LLVMIsALoadInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAVAArgInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAVAArgInst ??=
        _dylib.lookupFunction<_c_LLVMIsAVAArgInst, _dart_LLVMIsAVAArgInst>(
            'LLVMIsAVAArgInst');
    return _LLVMIsAVAArgInst(
      Val,
    );
  }

  _dart_LLVMIsAVAArgInst _LLVMIsAVAArgInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFreezeInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFreezeInst ??=
        _dylib.lookupFunction<_c_LLVMIsAFreezeInst, _dart_LLVMIsAFreezeInst>(
            'LLVMIsAFreezeInst');
    return _LLVMIsAFreezeInst(
      Val,
    );
  }

  _dart_LLVMIsAFreezeInst _LLVMIsAFreezeInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAAtomicCmpXchgInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAAtomicCmpXchgInst ??= _dylib.lookupFunction<
        _c_LLVMIsAAtomicCmpXchgInst,
        _dart_LLVMIsAAtomicCmpXchgInst>('LLVMIsAAtomicCmpXchgInst');
    return _LLVMIsAAtomicCmpXchgInst(
      Val,
    );
  }

  _dart_LLVMIsAAtomicCmpXchgInst _LLVMIsAAtomicCmpXchgInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAAtomicRMWInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAAtomicRMWInst ??= _dylib.lookupFunction<_c_LLVMIsAAtomicRMWInst,
        _dart_LLVMIsAAtomicRMWInst>('LLVMIsAAtomicRMWInst');
    return _LLVMIsAAtomicRMWInst(
      Val,
    );
  }

  _dart_LLVMIsAAtomicRMWInst _LLVMIsAAtomicRMWInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAFenceInst(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAFenceInst ??=
        _dylib.lookupFunction<_c_LLVMIsAFenceInst, _dart_LLVMIsAFenceInst>(
            'LLVMIsAFenceInst');
    return _LLVMIsAFenceInst(
      Val,
    );
  }

  _dart_LLVMIsAFenceInst _LLVMIsAFenceInst;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAMDNode(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAMDNode ??= _dylib
        .lookupFunction<_c_LLVMIsAMDNode, _dart_LLVMIsAMDNode>('LLVMIsAMDNode');
    return _LLVMIsAMDNode(
      Val,
    );
  }

  _dart_LLVMIsAMDNode _LLVMIsAMDNode;

  ffi.Pointer<LLVMOpaqueValue> LLVMIsAMDString(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsAMDString ??=
        _dylib.lookupFunction<_c_LLVMIsAMDString, _dart_LLVMIsAMDString>(
            'LLVMIsAMDString');
    return _LLVMIsAMDString(
      Val,
    );
  }

  _dart_LLVMIsAMDString _LLVMIsAMDString;

  /// Deprecated: Use LLVMGetValueName2 instead.
  ffi.Pointer<ffi.Int8> LLVMGetValueName(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMGetValueName ??=
        _dylib.lookupFunction<_c_LLVMGetValueName, _dart_LLVMGetValueName>(
            'LLVMGetValueName');
    return _LLVMGetValueName(
      Val,
    );
  }

  _dart_LLVMGetValueName _LLVMGetValueName;

  /// Deprecated: Use LLVMSetValueName2 instead.
  void LLVMSetValueName(
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMSetValueName ??=
        _dylib.lookupFunction<_c_LLVMSetValueName, _dart_LLVMSetValueName>(
            'LLVMSetValueName');
    return _LLVMSetValueName(
      Val,
      Name,
    );
  }

  _dart_LLVMSetValueName _LLVMSetValueName;

  /// Obtain the first use of a value.
  ///
  /// Uses are obtained in an iterator fashion. First, call this function
  /// to obtain a reference to the first use. Then, call LLVMGetNextUse()
  /// on that instance and all subsequently obtained instances until
  /// LLVMGetNextUse() returns NULL.
  ///
  /// @see llvm::Value::use_begin()
  ffi.Pointer<LLVMOpaqueUse> LLVMGetFirstUse(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMGetFirstUse ??=
        _dylib.lookupFunction<_c_LLVMGetFirstUse, _dart_LLVMGetFirstUse>(
            'LLVMGetFirstUse');
    return _LLVMGetFirstUse(
      Val,
    );
  }

  _dart_LLVMGetFirstUse _LLVMGetFirstUse;

  /// Obtain the next use of a value.
  ///
  /// This effectively advances the iterator. It returns NULL if you are on
  /// the final use and no more are available.
  ffi.Pointer<LLVMOpaqueUse> LLVMGetNextUse(
    ffi.Pointer<LLVMOpaqueUse> U,
  ) {
    _LLVMGetNextUse ??=
        _dylib.lookupFunction<_c_LLVMGetNextUse, _dart_LLVMGetNextUse>(
            'LLVMGetNextUse');
    return _LLVMGetNextUse(
      U,
    );
  }

  _dart_LLVMGetNextUse _LLVMGetNextUse;

  /// Obtain the user value for a user.
  ///
  /// The returned value corresponds to a llvm::User type.
  ///
  /// @see llvm::Use::getUser()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetUser(
    ffi.Pointer<LLVMOpaqueUse> U,
  ) {
    _LLVMGetUser ??=
        _dylib.lookupFunction<_c_LLVMGetUser, _dart_LLVMGetUser>('LLVMGetUser');
    return _LLVMGetUser(
      U,
    );
  }

  _dart_LLVMGetUser _LLVMGetUser;

  /// Obtain the value this use corresponds to.
  ///
  /// @see llvm::Use::get().
  ffi.Pointer<LLVMOpaqueValue> LLVMGetUsedValue(
    ffi.Pointer<LLVMOpaqueUse> U,
  ) {
    _LLVMGetUsedValue ??=
        _dylib.lookupFunction<_c_LLVMGetUsedValue, _dart_LLVMGetUsedValue>(
            'LLVMGetUsedValue');
    return _LLVMGetUsedValue(
      U,
    );
  }

  _dart_LLVMGetUsedValue _LLVMGetUsedValue;

  /// Obtain an operand at a specific index in a llvm::User value.
  ///
  /// @see llvm::User::getOperand()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetOperand(
    ffi.Pointer<LLVMOpaqueValue> Val,
    int Index,
  ) {
    _LLVMGetOperand ??=
        _dylib.lookupFunction<_c_LLVMGetOperand, _dart_LLVMGetOperand>(
            'LLVMGetOperand');
    return _LLVMGetOperand(
      Val,
      Index,
    );
  }

  _dart_LLVMGetOperand _LLVMGetOperand;

  /// Obtain the use of an operand at a specific index in a llvm::User value.
  ///
  /// @see llvm::User::getOperandUse()
  ffi.Pointer<LLVMOpaqueUse> LLVMGetOperandUse(
    ffi.Pointer<LLVMOpaqueValue> Val,
    int Index,
  ) {
    _LLVMGetOperandUse ??=
        _dylib.lookupFunction<_c_LLVMGetOperandUse, _dart_LLVMGetOperandUse>(
            'LLVMGetOperandUse');
    return _LLVMGetOperandUse(
      Val,
      Index,
    );
  }

  _dart_LLVMGetOperandUse _LLVMGetOperandUse;

  /// Set an operand at a specific index in a llvm::User value.
  ///
  /// @see llvm::User::setOperand()
  void LLVMSetOperand(
    ffi.Pointer<LLVMOpaqueValue> User,
    int Index,
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMSetOperand ??=
        _dylib.lookupFunction<_c_LLVMSetOperand, _dart_LLVMSetOperand>(
            'LLVMSetOperand');
    return _LLVMSetOperand(
      User,
      Index,
      Val,
    );
  }

  _dart_LLVMSetOperand _LLVMSetOperand;

  /// Obtain the number of operands in a llvm::User value.
  ///
  /// @see llvm::User::getNumOperands()
  int LLVMGetNumOperands(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMGetNumOperands ??=
        _dylib.lookupFunction<_c_LLVMGetNumOperands, _dart_LLVMGetNumOperands>(
            'LLVMGetNumOperands');
    return _LLVMGetNumOperands(
      Val,
    );
  }

  _dart_LLVMGetNumOperands _LLVMGetNumOperands;

  /// Obtain a constant value referring to the null instance of a type.
  ///
  /// @see llvm::Constant::getNullValue()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstNull(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMConstNull ??= _dylib
        .lookupFunction<_c_LLVMConstNull, _dart_LLVMConstNull>('LLVMConstNull');
    return _LLVMConstNull(
      Ty,
    );
  }

  _dart_LLVMConstNull _LLVMConstNull;

  /// Obtain a constant value referring to the instance of a type
  /// consisting of all ones.
  ///
  /// This is only valid for integer types.
  ///
  /// @see llvm::Constant::getAllOnesValue()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstAllOnes(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMConstAllOnes ??=
        _dylib.lookupFunction<_c_LLVMConstAllOnes, _dart_LLVMConstAllOnes>(
            'LLVMConstAllOnes');
    return _LLVMConstAllOnes(
      Ty,
    );
  }

  _dart_LLVMConstAllOnes _LLVMConstAllOnes;

  /// Obtain a constant value referring to an undefined value of a type.
  ///
  /// @see llvm::UndefValue::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetUndef(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMGetUndef ??= _dylib
        .lookupFunction<_c_LLVMGetUndef, _dart_LLVMGetUndef>('LLVMGetUndef');
    return _LLVMGetUndef(
      Ty,
    );
  }

  _dart_LLVMGetUndef _LLVMGetUndef;

  /// Determine whether a value instance is null.
  ///
  /// @see llvm::Constant::isNullValue()
  int LLVMIsNull(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMIsNull ??=
        _dylib.lookupFunction<_c_LLVMIsNull, _dart_LLVMIsNull>('LLVMIsNull');
    return _LLVMIsNull(
      Val,
    );
  }

  _dart_LLVMIsNull _LLVMIsNull;

  /// Obtain a constant that is a constant pointer pointing to NULL for a
  /// specified type.
  ffi.Pointer<LLVMOpaqueValue> LLVMConstPointerNull(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMConstPointerNull ??= _dylib.lookupFunction<_c_LLVMConstPointerNull,
        _dart_LLVMConstPointerNull>('LLVMConstPointerNull');
    return _LLVMConstPointerNull(
      Ty,
    );
  }

  _dart_LLVMConstPointerNull _LLVMConstPointerNull;

  /// Obtain a constant value for an integer type.
  ///
  /// The returned value corresponds to a llvm::ConstantInt.
  ///
  /// @see llvm::ConstantInt::get()
  ///
  /// @param IntTy Integer type to obtain value of.
  /// @param N The value the returned instance should refer to.
  /// @param SignExtend Whether to sign extend the produced value.
  ffi.Pointer<LLVMOpaqueValue> LLVMConstInt(
    ffi.Pointer<LLVMOpaqueType> IntTy,
    int N,
    int SignExtend,
  ) {
    _LLVMConstInt ??= _dylib
        .lookupFunction<_c_LLVMConstInt, _dart_LLVMConstInt>('LLVMConstInt');
    return _LLVMConstInt(
      IntTy,
      N,
      SignExtend,
    );
  }

  _dart_LLVMConstInt _LLVMConstInt;

  /// Obtain a constant value for an integer of arbitrary precision.
  ///
  /// @see llvm::ConstantInt::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstIntOfArbitraryPrecision(
    ffi.Pointer<LLVMOpaqueType> IntTy,
    int NumWords,
    ffi.Pointer<ffi.Uint64> Words,
  ) {
    _LLVMConstIntOfArbitraryPrecision ??= _dylib.lookupFunction<
            _c_LLVMConstIntOfArbitraryPrecision,
            _dart_LLVMConstIntOfArbitraryPrecision>(
        'LLVMConstIntOfArbitraryPrecision');
    return _LLVMConstIntOfArbitraryPrecision(
      IntTy,
      NumWords,
      Words,
    );
  }

  _dart_LLVMConstIntOfArbitraryPrecision _LLVMConstIntOfArbitraryPrecision;

  /// Obtain a constant value for an integer parsed from a string.
  ///
  /// A similar API, LLVMConstIntOfStringAndSize is also available. If the
  /// string's length is available, it is preferred to call that function
  /// instead.
  ///
  /// @see llvm::ConstantInt::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstIntOfString(
    ffi.Pointer<LLVMOpaqueType> IntTy,
    ffi.Pointer<ffi.Int8> Text,
    int Radix,
  ) {
    _LLVMConstIntOfString ??= _dylib.lookupFunction<_c_LLVMConstIntOfString,
        _dart_LLVMConstIntOfString>('LLVMConstIntOfString');
    return _LLVMConstIntOfString(
      IntTy,
      Text,
      Radix,
    );
  }

  _dart_LLVMConstIntOfString _LLVMConstIntOfString;

  /// Obtain a constant value for an integer parsed from a string with
  /// specified length.
  ///
  /// @see llvm::ConstantInt::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstIntOfStringAndSize(
    ffi.Pointer<LLVMOpaqueType> IntTy,
    ffi.Pointer<ffi.Int8> Text,
    int SLen,
    int Radix,
  ) {
    _LLVMConstIntOfStringAndSize ??= _dylib.lookupFunction<
        _c_LLVMConstIntOfStringAndSize,
        _dart_LLVMConstIntOfStringAndSize>('LLVMConstIntOfStringAndSize');
    return _LLVMConstIntOfStringAndSize(
      IntTy,
      Text,
      SLen,
      Radix,
    );
  }

  _dart_LLVMConstIntOfStringAndSize _LLVMConstIntOfStringAndSize;

  /// Obtain a constant value referring to a double floating point value.
  ffi.Pointer<LLVMOpaqueValue> LLVMConstReal(
    ffi.Pointer<LLVMOpaqueType> RealTy,
    double N,
  ) {
    _LLVMConstReal ??= _dylib
        .lookupFunction<_c_LLVMConstReal, _dart_LLVMConstReal>('LLVMConstReal');
    return _LLVMConstReal(
      RealTy,
      N,
    );
  }

  _dart_LLVMConstReal _LLVMConstReal;

  /// Obtain a constant for a floating point value parsed from a string.
  ///
  /// A similar API, LLVMConstRealOfStringAndSize is also available. It
  /// should be used if the input string's length is known.
  ffi.Pointer<LLVMOpaqueValue> LLVMConstRealOfString(
    ffi.Pointer<LLVMOpaqueType> RealTy,
    ffi.Pointer<ffi.Int8> Text,
  ) {
    _LLVMConstRealOfString ??= _dylib.lookupFunction<_c_LLVMConstRealOfString,
        _dart_LLVMConstRealOfString>('LLVMConstRealOfString');
    return _LLVMConstRealOfString(
      RealTy,
      Text,
    );
  }

  _dart_LLVMConstRealOfString _LLVMConstRealOfString;

  /// Obtain a constant for a floating point value parsed from a string.
  ffi.Pointer<LLVMOpaqueValue> LLVMConstRealOfStringAndSize(
    ffi.Pointer<LLVMOpaqueType> RealTy,
    ffi.Pointer<ffi.Int8> Text,
    int SLen,
  ) {
    _LLVMConstRealOfStringAndSize ??= _dylib.lookupFunction<
        _c_LLVMConstRealOfStringAndSize,
        _dart_LLVMConstRealOfStringAndSize>('LLVMConstRealOfStringAndSize');
    return _LLVMConstRealOfStringAndSize(
      RealTy,
      Text,
      SLen,
    );
  }

  _dart_LLVMConstRealOfStringAndSize _LLVMConstRealOfStringAndSize;

  /// Obtain the zero extended value for an integer constant value.
  ///
  /// @see llvm::ConstantInt::getZExtValue()
  int LLVMConstIntGetZExtValue(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMConstIntGetZExtValue ??= _dylib.lookupFunction<
        _c_LLVMConstIntGetZExtValue,
        _dart_LLVMConstIntGetZExtValue>('LLVMConstIntGetZExtValue');
    return _LLVMConstIntGetZExtValue(
      ConstantVal,
    );
  }

  _dart_LLVMConstIntGetZExtValue _LLVMConstIntGetZExtValue;

  /// Obtain the sign extended value for an integer constant value.
  ///
  /// @see llvm::ConstantInt::getSExtValue()
  int LLVMConstIntGetSExtValue(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMConstIntGetSExtValue ??= _dylib.lookupFunction<
        _c_LLVMConstIntGetSExtValue,
        _dart_LLVMConstIntGetSExtValue>('LLVMConstIntGetSExtValue');
    return _LLVMConstIntGetSExtValue(
      ConstantVal,
    );
  }

  _dart_LLVMConstIntGetSExtValue _LLVMConstIntGetSExtValue;

  /// Obtain the double value for an floating point constant value.
  /// losesInfo indicates if some precision was lost in the conversion.
  ///
  /// @see llvm::ConstantFP::getDoubleValue
  double LLVMConstRealGetDouble(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<ffi.Int32> losesInfo,
  ) {
    _LLVMConstRealGetDouble ??= _dylib.lookupFunction<_c_LLVMConstRealGetDouble,
        _dart_LLVMConstRealGetDouble>('LLVMConstRealGetDouble');
    return _LLVMConstRealGetDouble(
      ConstantVal,
      losesInfo,
    );
  }

  _dart_LLVMConstRealGetDouble _LLVMConstRealGetDouble;

  /// Create a ConstantDataSequential and initialize it with a string.
  ///
  /// @see llvm::ConstantDataArray::getString()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstStringInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Int8> Str,
    int Length,
    int DontNullTerminate,
  ) {
    _LLVMConstStringInContext ??= _dylib.lookupFunction<
        _c_LLVMConstStringInContext,
        _dart_LLVMConstStringInContext>('LLVMConstStringInContext');
    return _LLVMConstStringInContext(
      C,
      Str,
      Length,
      DontNullTerminate,
    );
  }

  _dart_LLVMConstStringInContext _LLVMConstStringInContext;

  /// Create a ConstantDataSequential with string content in the global context.
  ///
  /// This is the same as LLVMConstStringInContext except it operates on the
  /// global context.
  ///
  /// @see LLVMConstStringInContext()
  /// @see llvm::ConstantDataArray::getString()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstString(
    ffi.Pointer<ffi.Int8> Str,
    int Length,
    int DontNullTerminate,
  ) {
    _LLVMConstString ??=
        _dylib.lookupFunction<_c_LLVMConstString, _dart_LLVMConstString>(
            'LLVMConstString');
    return _LLVMConstString(
      Str,
      Length,
      DontNullTerminate,
    );
  }

  _dart_LLVMConstString _LLVMConstString;

  /// Returns true if the specified constant is an array of i8.
  ///
  /// @see ConstantDataSequential::getAsString()
  int LLVMIsConstantString(
    ffi.Pointer<LLVMOpaqueValue> c,
  ) {
    _LLVMIsConstantString ??= _dylib.lookupFunction<_c_LLVMIsConstantString,
        _dart_LLVMIsConstantString>('LLVMIsConstantString');
    return _LLVMIsConstantString(
      c,
    );
  }

  _dart_LLVMIsConstantString _LLVMIsConstantString;

  /// Get the given constant data sequential as a string.
  ///
  /// @see ConstantDataSequential::getAsString()
  ffi.Pointer<ffi.Int8> LLVMGetAsString(
    ffi.Pointer<LLVMOpaqueValue> c,
    ffi.Pointer<ffi.Uint64> Length,
  ) {
    _LLVMGetAsString ??=
        _dylib.lookupFunction<_c_LLVMGetAsString, _dart_LLVMGetAsString>(
            'LLVMGetAsString');
    return _LLVMGetAsString(
      c,
      Length,
    );
  }

  _dart_LLVMGetAsString _LLVMGetAsString;

  /// Create an anonymous ConstantStruct with the specified values.
  ///
  /// @see llvm::ConstantStruct::getAnon()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstStructInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
    int Count,
    int Packed,
  ) {
    _LLVMConstStructInContext ??= _dylib.lookupFunction<
        _c_LLVMConstStructInContext,
        _dart_LLVMConstStructInContext>('LLVMConstStructInContext');
    return _LLVMConstStructInContext(
      C,
      ConstantVals,
      Count,
      Packed,
    );
  }

  _dart_LLVMConstStructInContext _LLVMConstStructInContext;

  /// Create a ConstantStruct in the global Context.
  ///
  /// This is the same as LLVMConstStructInContext except it operates on the
  /// global Context.
  ///
  /// @see LLVMConstStructInContext()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstStruct(
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
    int Count,
    int Packed,
  ) {
    _LLVMConstStruct ??=
        _dylib.lookupFunction<_c_LLVMConstStruct, _dart_LLVMConstStruct>(
            'LLVMConstStruct');
    return _LLVMConstStruct(
      ConstantVals,
      Count,
      Packed,
    );
  }

  _dart_LLVMConstStruct _LLVMConstStruct;

  /// Create a ConstantArray from values.
  ///
  /// @see llvm::ConstantArray::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstArray(
    ffi.Pointer<LLVMOpaqueType> ElementTy,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
    int Length,
  ) {
    _LLVMConstArray ??=
        _dylib.lookupFunction<_c_LLVMConstArray, _dart_LLVMConstArray>(
            'LLVMConstArray');
    return _LLVMConstArray(
      ElementTy,
      ConstantVals,
      Length,
    );
  }

  _dart_LLVMConstArray _LLVMConstArray;

  /// Create a non-anonymous ConstantStruct from values.
  ///
  /// @see llvm::ConstantStruct::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstNamedStruct(
    ffi.Pointer<LLVMOpaqueType> StructTy,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
    int Count,
  ) {
    _LLVMConstNamedStruct ??= _dylib.lookupFunction<_c_LLVMConstNamedStruct,
        _dart_LLVMConstNamedStruct>('LLVMConstNamedStruct');
    return _LLVMConstNamedStruct(
      StructTy,
      ConstantVals,
      Count,
    );
  }

  _dart_LLVMConstNamedStruct _LLVMConstNamedStruct;

  /// Get an element at specified index as a constant.
  ///
  /// @see ConstantDataSequential::getElementAsConstant()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetElementAsConstant(
    ffi.Pointer<LLVMOpaqueValue> C,
    int idx,
  ) {
    _LLVMGetElementAsConstant ??= _dylib.lookupFunction<
        _c_LLVMGetElementAsConstant,
        _dart_LLVMGetElementAsConstant>('LLVMGetElementAsConstant');
    return _LLVMGetElementAsConstant(
      C,
      idx,
    );
  }

  _dart_LLVMGetElementAsConstant _LLVMGetElementAsConstant;

  /// Create a ConstantVector from values.
  ///
  /// @see llvm::ConstantVector::get()
  ffi.Pointer<LLVMOpaqueValue> LLVMConstVector(
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ScalarConstantVals,
    int Size,
  ) {
    _LLVMConstVector ??=
        _dylib.lookupFunction<_c_LLVMConstVector, _dart_LLVMConstVector>(
            'LLVMConstVector');
    return _LLVMConstVector(
      ScalarConstantVals,
      Size,
    );
  }

  _dart_LLVMConstVector _LLVMConstVector;

  /// @defgroup LLVMCCoreValueConstantExpressions Constant Expressions
  ///
  /// Functions in this group correspond to APIs on llvm::ConstantExpr.
  ///
  /// @see llvm::ConstantExpr.
  ///
  /// @{
  int LLVMGetConstOpcode(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMGetConstOpcode ??=
        _dylib.lookupFunction<_c_LLVMGetConstOpcode, _dart_LLVMGetConstOpcode>(
            'LLVMGetConstOpcode');
    return _LLVMGetConstOpcode(
      ConstantVal,
    );
  }

  _dart_LLVMGetConstOpcode _LLVMGetConstOpcode;

  ffi.Pointer<LLVMOpaqueValue> LLVMAlignOf(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMAlignOf ??=
        _dylib.lookupFunction<_c_LLVMAlignOf, _dart_LLVMAlignOf>('LLVMAlignOf');
    return _LLVMAlignOf(
      Ty,
    );
  }

  _dart_LLVMAlignOf _LLVMAlignOf;

  ffi.Pointer<LLVMOpaqueValue> LLVMSizeOf(
    ffi.Pointer<LLVMOpaqueType> Ty,
  ) {
    _LLVMSizeOf ??=
        _dylib.lookupFunction<_c_LLVMSizeOf, _dart_LLVMSizeOf>('LLVMSizeOf');
    return _LLVMSizeOf(
      Ty,
    );
  }

  _dart_LLVMSizeOf _LLVMSizeOf;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNeg(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMConstNeg ??= _dylib
        .lookupFunction<_c_LLVMConstNeg, _dart_LLVMConstNeg>('LLVMConstNeg');
    return _LLVMConstNeg(
      ConstantVal,
    );
  }

  _dart_LLVMConstNeg _LLVMConstNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNSWNeg(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMConstNSWNeg ??=
        _dylib.lookupFunction<_c_LLVMConstNSWNeg, _dart_LLVMConstNSWNeg>(
            'LLVMConstNSWNeg');
    return _LLVMConstNSWNeg(
      ConstantVal,
    );
  }

  _dart_LLVMConstNSWNeg _LLVMConstNSWNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNUWNeg(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMConstNUWNeg ??=
        _dylib.lookupFunction<_c_LLVMConstNUWNeg, _dart_LLVMConstNUWNeg>(
            'LLVMConstNUWNeg');
    return _LLVMConstNUWNeg(
      ConstantVal,
    );
  }

  _dart_LLVMConstNUWNeg _LLVMConstNUWNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFNeg(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMConstFNeg ??= _dylib
        .lookupFunction<_c_LLVMConstFNeg, _dart_LLVMConstFNeg>('LLVMConstFNeg');
    return _LLVMConstFNeg(
      ConstantVal,
    );
  }

  _dart_LLVMConstFNeg _LLVMConstFNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNot(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMConstNot ??= _dylib
        .lookupFunction<_c_LLVMConstNot, _dart_LLVMConstNot>('LLVMConstNot');
    return _LLVMConstNot(
      ConstantVal,
    );
  }

  _dart_LLVMConstNot _LLVMConstNot;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstAdd(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstAdd ??= _dylib
        .lookupFunction<_c_LLVMConstAdd, _dart_LLVMConstAdd>('LLVMConstAdd');
    return _LLVMConstAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstAdd _LLVMConstAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNSWAdd(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstNSWAdd ??=
        _dylib.lookupFunction<_c_LLVMConstNSWAdd, _dart_LLVMConstNSWAdd>(
            'LLVMConstNSWAdd');
    return _LLVMConstNSWAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstNSWAdd _LLVMConstNSWAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNUWAdd(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstNUWAdd ??=
        _dylib.lookupFunction<_c_LLVMConstNUWAdd, _dart_LLVMConstNUWAdd>(
            'LLVMConstNUWAdd');
    return _LLVMConstNUWAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstNUWAdd _LLVMConstNUWAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFAdd(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstFAdd ??= _dylib
        .lookupFunction<_c_LLVMConstFAdd, _dart_LLVMConstFAdd>('LLVMConstFAdd');
    return _LLVMConstFAdd(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstFAdd _LLVMConstFAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstSub(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstSub ??= _dylib
        .lookupFunction<_c_LLVMConstSub, _dart_LLVMConstSub>('LLVMConstSub');
    return _LLVMConstSub(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstSub _LLVMConstSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNSWSub(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstNSWSub ??=
        _dylib.lookupFunction<_c_LLVMConstNSWSub, _dart_LLVMConstNSWSub>(
            'LLVMConstNSWSub');
    return _LLVMConstNSWSub(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstNSWSub _LLVMConstNSWSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNUWSub(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstNUWSub ??=
        _dylib.lookupFunction<_c_LLVMConstNUWSub, _dart_LLVMConstNUWSub>(
            'LLVMConstNUWSub');
    return _LLVMConstNUWSub(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstNUWSub _LLVMConstNUWSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFSub(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstFSub ??= _dylib
        .lookupFunction<_c_LLVMConstFSub, _dart_LLVMConstFSub>('LLVMConstFSub');
    return _LLVMConstFSub(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstFSub _LLVMConstFSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstMul(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstMul ??= _dylib
        .lookupFunction<_c_LLVMConstMul, _dart_LLVMConstMul>('LLVMConstMul');
    return _LLVMConstMul(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstMul _LLVMConstMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNSWMul(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstNSWMul ??=
        _dylib.lookupFunction<_c_LLVMConstNSWMul, _dart_LLVMConstNSWMul>(
            'LLVMConstNSWMul');
    return _LLVMConstNSWMul(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstNSWMul _LLVMConstNSWMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstNUWMul(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstNUWMul ??=
        _dylib.lookupFunction<_c_LLVMConstNUWMul, _dart_LLVMConstNUWMul>(
            'LLVMConstNUWMul');
    return _LLVMConstNUWMul(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstNUWMul _LLVMConstNUWMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFMul(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstFMul ??= _dylib
        .lookupFunction<_c_LLVMConstFMul, _dart_LLVMConstFMul>('LLVMConstFMul');
    return _LLVMConstFMul(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstFMul _LLVMConstFMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstUDiv(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstUDiv ??= _dylib
        .lookupFunction<_c_LLVMConstUDiv, _dart_LLVMConstUDiv>('LLVMConstUDiv');
    return _LLVMConstUDiv(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstUDiv _LLVMConstUDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstExactUDiv(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstExactUDiv ??=
        _dylib.lookupFunction<_c_LLVMConstExactUDiv, _dart_LLVMConstExactUDiv>(
            'LLVMConstExactUDiv');
    return _LLVMConstExactUDiv(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstExactUDiv _LLVMConstExactUDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstSDiv(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstSDiv ??= _dylib
        .lookupFunction<_c_LLVMConstSDiv, _dart_LLVMConstSDiv>('LLVMConstSDiv');
    return _LLVMConstSDiv(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstSDiv _LLVMConstSDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstExactSDiv(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstExactSDiv ??=
        _dylib.lookupFunction<_c_LLVMConstExactSDiv, _dart_LLVMConstExactSDiv>(
            'LLVMConstExactSDiv');
    return _LLVMConstExactSDiv(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstExactSDiv _LLVMConstExactSDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFDiv(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstFDiv ??= _dylib
        .lookupFunction<_c_LLVMConstFDiv, _dart_LLVMConstFDiv>('LLVMConstFDiv');
    return _LLVMConstFDiv(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstFDiv _LLVMConstFDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstURem(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstURem ??= _dylib
        .lookupFunction<_c_LLVMConstURem, _dart_LLVMConstURem>('LLVMConstURem');
    return _LLVMConstURem(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstURem _LLVMConstURem;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstSRem(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstSRem ??= _dylib
        .lookupFunction<_c_LLVMConstSRem, _dart_LLVMConstSRem>('LLVMConstSRem');
    return _LLVMConstSRem(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstSRem _LLVMConstSRem;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFRem(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstFRem ??= _dylib
        .lookupFunction<_c_LLVMConstFRem, _dart_LLVMConstFRem>('LLVMConstFRem');
    return _LLVMConstFRem(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstFRem _LLVMConstFRem;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstAnd(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstAnd ??= _dylib
        .lookupFunction<_c_LLVMConstAnd, _dart_LLVMConstAnd>('LLVMConstAnd');
    return _LLVMConstAnd(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstAnd _LLVMConstAnd;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstOr(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstOr ??=
        _dylib.lookupFunction<_c_LLVMConstOr, _dart_LLVMConstOr>('LLVMConstOr');
    return _LLVMConstOr(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstOr _LLVMConstOr;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstXor(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstXor ??= _dylib
        .lookupFunction<_c_LLVMConstXor, _dart_LLVMConstXor>('LLVMConstXor');
    return _LLVMConstXor(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstXor _LLVMConstXor;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstICmp(
    int Predicate,
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstICmp ??= _dylib
        .lookupFunction<_c_LLVMConstICmp, _dart_LLVMConstICmp>('LLVMConstICmp');
    return _LLVMConstICmp(
      Predicate,
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstICmp _LLVMConstICmp;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFCmp(
    int Predicate,
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstFCmp ??= _dylib
        .lookupFunction<_c_LLVMConstFCmp, _dart_LLVMConstFCmp>('LLVMConstFCmp');
    return _LLVMConstFCmp(
      Predicate,
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstFCmp _LLVMConstFCmp;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstShl(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstShl ??= _dylib
        .lookupFunction<_c_LLVMConstShl, _dart_LLVMConstShl>('LLVMConstShl');
    return _LLVMConstShl(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstShl _LLVMConstShl;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstLShr(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstLShr ??= _dylib
        .lookupFunction<_c_LLVMConstLShr, _dart_LLVMConstLShr>('LLVMConstLShr');
    return _LLVMConstLShr(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstLShr _LLVMConstLShr;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstAShr(
    ffi.Pointer<LLVMOpaqueValue> LHSConstant,
    ffi.Pointer<LLVMOpaqueValue> RHSConstant,
  ) {
    _LLVMConstAShr ??= _dylib
        .lookupFunction<_c_LLVMConstAShr, _dart_LLVMConstAShr>('LLVMConstAShr');
    return _LLVMConstAShr(
      LHSConstant,
      RHSConstant,
    );
  }

  _dart_LLVMConstAShr _LLVMConstAShr;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstGEP(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
    int NumIndices,
  ) {
    _LLVMConstGEP ??= _dylib
        .lookupFunction<_c_LLVMConstGEP, _dart_LLVMConstGEP>('LLVMConstGEP');
    return _LLVMConstGEP(
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  _dart_LLVMConstGEP _LLVMConstGEP;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstGEP2(
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
    int NumIndices,
  ) {
    _LLVMConstGEP2 ??= _dylib
        .lookupFunction<_c_LLVMConstGEP2, _dart_LLVMConstGEP2>('LLVMConstGEP2');
    return _LLVMConstGEP2(
      Ty,
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  _dart_LLVMConstGEP2 _LLVMConstGEP2;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstInBoundsGEP(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
    int NumIndices,
  ) {
    _LLVMConstInBoundsGEP ??= _dylib.lookupFunction<_c_LLVMConstInBoundsGEP,
        _dart_LLVMConstInBoundsGEP>('LLVMConstInBoundsGEP');
    return _LLVMConstInBoundsGEP(
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  _dart_LLVMConstInBoundsGEP _LLVMConstInBoundsGEP;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstInBoundsGEP2(
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
    int NumIndices,
  ) {
    _LLVMConstInBoundsGEP2 ??= _dylib.lookupFunction<_c_LLVMConstInBoundsGEP2,
        _dart_LLVMConstInBoundsGEP2>('LLVMConstInBoundsGEP2');
    return _LLVMConstInBoundsGEP2(
      Ty,
      ConstantVal,
      ConstantIndices,
      NumIndices,
    );
  }

  _dart_LLVMConstInBoundsGEP2 _LLVMConstInBoundsGEP2;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstTrunc(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstTrunc ??=
        _dylib.lookupFunction<_c_LLVMConstTrunc, _dart_LLVMConstTrunc>(
            'LLVMConstTrunc');
    return _LLVMConstTrunc(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstTrunc _LLVMConstTrunc;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstSExt(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstSExt ??= _dylib
        .lookupFunction<_c_LLVMConstSExt, _dart_LLVMConstSExt>('LLVMConstSExt');
    return _LLVMConstSExt(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstSExt _LLVMConstSExt;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstZExt(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstZExt ??= _dylib
        .lookupFunction<_c_LLVMConstZExt, _dart_LLVMConstZExt>('LLVMConstZExt');
    return _LLVMConstZExt(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstZExt _LLVMConstZExt;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFPTrunc(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstFPTrunc ??=
        _dylib.lookupFunction<_c_LLVMConstFPTrunc, _dart_LLVMConstFPTrunc>(
            'LLVMConstFPTrunc');
    return _LLVMConstFPTrunc(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstFPTrunc _LLVMConstFPTrunc;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFPExt(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstFPExt ??=
        _dylib.lookupFunction<_c_LLVMConstFPExt, _dart_LLVMConstFPExt>(
            'LLVMConstFPExt');
    return _LLVMConstFPExt(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstFPExt _LLVMConstFPExt;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstUIToFP(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstUIToFP ??=
        _dylib.lookupFunction<_c_LLVMConstUIToFP, _dart_LLVMConstUIToFP>(
            'LLVMConstUIToFP');
    return _LLVMConstUIToFP(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstUIToFP _LLVMConstUIToFP;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstSIToFP(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstSIToFP ??=
        _dylib.lookupFunction<_c_LLVMConstSIToFP, _dart_LLVMConstSIToFP>(
            'LLVMConstSIToFP');
    return _LLVMConstSIToFP(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstSIToFP _LLVMConstSIToFP;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFPToUI(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstFPToUI ??=
        _dylib.lookupFunction<_c_LLVMConstFPToUI, _dart_LLVMConstFPToUI>(
            'LLVMConstFPToUI');
    return _LLVMConstFPToUI(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstFPToUI _LLVMConstFPToUI;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFPToSI(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstFPToSI ??=
        _dylib.lookupFunction<_c_LLVMConstFPToSI, _dart_LLVMConstFPToSI>(
            'LLVMConstFPToSI');
    return _LLVMConstFPToSI(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstFPToSI _LLVMConstFPToSI;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstPtrToInt(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstPtrToInt ??=
        _dylib.lookupFunction<_c_LLVMConstPtrToInt, _dart_LLVMConstPtrToInt>(
            'LLVMConstPtrToInt');
    return _LLVMConstPtrToInt(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstPtrToInt _LLVMConstPtrToInt;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstIntToPtr(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstIntToPtr ??=
        _dylib.lookupFunction<_c_LLVMConstIntToPtr, _dart_LLVMConstIntToPtr>(
            'LLVMConstIntToPtr');
    return _LLVMConstIntToPtr(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstIntToPtr _LLVMConstIntToPtr;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstBitCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstBitCast ??=
        _dylib.lookupFunction<_c_LLVMConstBitCast, _dart_LLVMConstBitCast>(
            'LLVMConstBitCast');
    return _LLVMConstBitCast(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstBitCast _LLVMConstBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstAddrSpaceCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstAddrSpaceCast ??= _dylib.lookupFunction<_c_LLVMConstAddrSpaceCast,
        _dart_LLVMConstAddrSpaceCast>('LLVMConstAddrSpaceCast');
    return _LLVMConstAddrSpaceCast(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstAddrSpaceCast _LLVMConstAddrSpaceCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstZExtOrBitCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstZExtOrBitCast ??= _dylib.lookupFunction<_c_LLVMConstZExtOrBitCast,
        _dart_LLVMConstZExtOrBitCast>('LLVMConstZExtOrBitCast');
    return _LLVMConstZExtOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstZExtOrBitCast _LLVMConstZExtOrBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstSExtOrBitCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstSExtOrBitCast ??= _dylib.lookupFunction<_c_LLVMConstSExtOrBitCast,
        _dart_LLVMConstSExtOrBitCast>('LLVMConstSExtOrBitCast');
    return _LLVMConstSExtOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstSExtOrBitCast _LLVMConstSExtOrBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstTruncOrBitCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstTruncOrBitCast ??= _dylib.lookupFunction<
        _c_LLVMConstTruncOrBitCast,
        _dart_LLVMConstTruncOrBitCast>('LLVMConstTruncOrBitCast');
    return _LLVMConstTruncOrBitCast(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstTruncOrBitCast _LLVMConstTruncOrBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstPointerCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstPointerCast ??= _dylib.lookupFunction<_c_LLVMConstPointerCast,
        _dart_LLVMConstPointerCast>('LLVMConstPointerCast');
    return _LLVMConstPointerCast(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstPointerCast _LLVMConstPointerCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstIntCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
    int isSigned,
  ) {
    _LLVMConstIntCast ??=
        _dylib.lookupFunction<_c_LLVMConstIntCast, _dart_LLVMConstIntCast>(
            'LLVMConstIntCast');
    return _LLVMConstIntCast(
      ConstantVal,
      ToType,
      isSigned,
    );
  }

  _dart_LLVMConstIntCast _LLVMConstIntCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstFPCast(
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
    ffi.Pointer<LLVMOpaqueType> ToType,
  ) {
    _LLVMConstFPCast ??=
        _dylib.lookupFunction<_c_LLVMConstFPCast, _dart_LLVMConstFPCast>(
            'LLVMConstFPCast');
    return _LLVMConstFPCast(
      ConstantVal,
      ToType,
    );
  }

  _dart_LLVMConstFPCast _LLVMConstFPCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstSelect(
    ffi.Pointer<LLVMOpaqueValue> ConstantCondition,
    ffi.Pointer<LLVMOpaqueValue> ConstantIfTrue,
    ffi.Pointer<LLVMOpaqueValue> ConstantIfFalse,
  ) {
    _LLVMConstSelect ??=
        _dylib.lookupFunction<_c_LLVMConstSelect, _dart_LLVMConstSelect>(
            'LLVMConstSelect');
    return _LLVMConstSelect(
      ConstantCondition,
      ConstantIfTrue,
      ConstantIfFalse,
    );
  }

  _dart_LLVMConstSelect _LLVMConstSelect;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstExtractElement(
    ffi.Pointer<LLVMOpaqueValue> VectorConstant,
    ffi.Pointer<LLVMOpaqueValue> IndexConstant,
  ) {
    _LLVMConstExtractElement ??= _dylib.lookupFunction<
        _c_LLVMConstExtractElement,
        _dart_LLVMConstExtractElement>('LLVMConstExtractElement');
    return _LLVMConstExtractElement(
      VectorConstant,
      IndexConstant,
    );
  }

  _dart_LLVMConstExtractElement _LLVMConstExtractElement;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstInsertElement(
    ffi.Pointer<LLVMOpaqueValue> VectorConstant,
    ffi.Pointer<LLVMOpaqueValue> ElementValueConstant,
    ffi.Pointer<LLVMOpaqueValue> IndexConstant,
  ) {
    _LLVMConstInsertElement ??= _dylib.lookupFunction<_c_LLVMConstInsertElement,
        _dart_LLVMConstInsertElement>('LLVMConstInsertElement');
    return _LLVMConstInsertElement(
      VectorConstant,
      ElementValueConstant,
      IndexConstant,
    );
  }

  _dart_LLVMConstInsertElement _LLVMConstInsertElement;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstShuffleVector(
    ffi.Pointer<LLVMOpaqueValue> VectorAConstant,
    ffi.Pointer<LLVMOpaqueValue> VectorBConstant,
    ffi.Pointer<LLVMOpaqueValue> MaskConstant,
  ) {
    _LLVMConstShuffleVector ??= _dylib.lookupFunction<_c_LLVMConstShuffleVector,
        _dart_LLVMConstShuffleVector>('LLVMConstShuffleVector');
    return _LLVMConstShuffleVector(
      VectorAConstant,
      VectorBConstant,
      MaskConstant,
    );
  }

  _dart_LLVMConstShuffleVector _LLVMConstShuffleVector;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstExtractValue(
    ffi.Pointer<LLVMOpaqueValue> AggConstant,
    ffi.Pointer<ffi.Uint32> IdxList,
    int NumIdx,
  ) {
    _LLVMConstExtractValue ??= _dylib.lookupFunction<_c_LLVMConstExtractValue,
        _dart_LLVMConstExtractValue>('LLVMConstExtractValue');
    return _LLVMConstExtractValue(
      AggConstant,
      IdxList,
      NumIdx,
    );
  }

  _dart_LLVMConstExtractValue _LLVMConstExtractValue;

  ffi.Pointer<LLVMOpaqueValue> LLVMConstInsertValue(
    ffi.Pointer<LLVMOpaqueValue> AggConstant,
    ffi.Pointer<LLVMOpaqueValue> ElementValueConstant,
    ffi.Pointer<ffi.Uint32> IdxList,
    int NumIdx,
  ) {
    _LLVMConstInsertValue ??= _dylib.lookupFunction<_c_LLVMConstInsertValue,
        _dart_LLVMConstInsertValue>('LLVMConstInsertValue');
    return _LLVMConstInsertValue(
      AggConstant,
      ElementValueConstant,
      IdxList,
      NumIdx,
    );
  }

  _dart_LLVMConstInsertValue _LLVMConstInsertValue;

  ffi.Pointer<LLVMOpaqueValue> LLVMBlockAddress(
    ffi.Pointer<LLVMOpaqueValue> F,
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMBlockAddress ??=
        _dylib.lookupFunction<_c_LLVMBlockAddress, _dart_LLVMBlockAddress>(
            'LLVMBlockAddress');
    return _LLVMBlockAddress(
      F,
      BB,
    );
  }

  _dart_LLVMBlockAddress _LLVMBlockAddress;

  /// Deprecated: Use LLVMGetInlineAsm instead.
  ffi.Pointer<LLVMOpaqueValue> LLVMConstInlineAsm(
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> AsmString,
    ffi.Pointer<ffi.Int8> Constraints,
    int HasSideEffects,
    int IsAlignStack,
  ) {
    _LLVMConstInlineAsm ??=
        _dylib.lookupFunction<_c_LLVMConstInlineAsm, _dart_LLVMConstInlineAsm>(
            'LLVMConstInlineAsm');
    return _LLVMConstInlineAsm(
      Ty,
      AsmString,
      Constraints,
      HasSideEffects,
      IsAlignStack,
    );
  }

  _dart_LLVMConstInlineAsm _LLVMConstInlineAsm;

  /// @defgroup LLVMCCoreValueConstantGlobals Global Values
  ///
  /// This group contains functions that operate on global values. Functions in
  /// this group relate to functions in the llvm::GlobalValue class tree.
  ///
  /// @see llvm::GlobalValue
  ///
  /// @{
  ffi.Pointer<LLVMOpaqueModule> LLVMGetGlobalParent(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGetGlobalParent ??= _dylib.lookupFunction<_c_LLVMGetGlobalParent,
        _dart_LLVMGetGlobalParent>('LLVMGetGlobalParent');
    return _LLVMGetGlobalParent(
      Global,
    );
  }

  _dart_LLVMGetGlobalParent _LLVMGetGlobalParent;

  int LLVMIsDeclaration(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMIsDeclaration ??=
        _dylib.lookupFunction<_c_LLVMIsDeclaration, _dart_LLVMIsDeclaration>(
            'LLVMIsDeclaration');
    return _LLVMIsDeclaration(
      Global,
    );
  }

  _dart_LLVMIsDeclaration _LLVMIsDeclaration;

  int LLVMGetLinkage(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGetLinkage ??=
        _dylib.lookupFunction<_c_LLVMGetLinkage, _dart_LLVMGetLinkage>(
            'LLVMGetLinkage');
    return _LLVMGetLinkage(
      Global,
    );
  }

  _dart_LLVMGetLinkage _LLVMGetLinkage;

  void LLVMSetLinkage(
    ffi.Pointer<LLVMOpaqueValue> Global,
    int Linkage,
  ) {
    _LLVMSetLinkage ??=
        _dylib.lookupFunction<_c_LLVMSetLinkage, _dart_LLVMSetLinkage>(
            'LLVMSetLinkage');
    return _LLVMSetLinkage(
      Global,
      Linkage,
    );
  }

  _dart_LLVMSetLinkage _LLVMSetLinkage;

  ffi.Pointer<ffi.Int8> LLVMGetSection(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGetSection ??=
        _dylib.lookupFunction<_c_LLVMGetSection, _dart_LLVMGetSection>(
            'LLVMGetSection');
    return _LLVMGetSection(
      Global,
    );
  }

  _dart_LLVMGetSection _LLVMGetSection;

  void LLVMSetSection(
    ffi.Pointer<LLVMOpaqueValue> Global,
    ffi.Pointer<ffi.Int8> Section,
  ) {
    _LLVMSetSection ??=
        _dylib.lookupFunction<_c_LLVMSetSection, _dart_LLVMSetSection>(
            'LLVMSetSection');
    return _LLVMSetSection(
      Global,
      Section,
    );
  }

  _dart_LLVMSetSection _LLVMSetSection;

  int LLVMGetVisibility(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGetVisibility ??=
        _dylib.lookupFunction<_c_LLVMGetVisibility, _dart_LLVMGetVisibility>(
            'LLVMGetVisibility');
    return _LLVMGetVisibility(
      Global,
    );
  }

  _dart_LLVMGetVisibility _LLVMGetVisibility;

  void LLVMSetVisibility(
    ffi.Pointer<LLVMOpaqueValue> Global,
    int Viz,
  ) {
    _LLVMSetVisibility ??=
        _dylib.lookupFunction<_c_LLVMSetVisibility, _dart_LLVMSetVisibility>(
            'LLVMSetVisibility');
    return _LLVMSetVisibility(
      Global,
      Viz,
    );
  }

  _dart_LLVMSetVisibility _LLVMSetVisibility;

  int LLVMGetDLLStorageClass(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGetDLLStorageClass ??= _dylib.lookupFunction<_c_LLVMGetDLLStorageClass,
        _dart_LLVMGetDLLStorageClass>('LLVMGetDLLStorageClass');
    return _LLVMGetDLLStorageClass(
      Global,
    );
  }

  _dart_LLVMGetDLLStorageClass _LLVMGetDLLStorageClass;

  void LLVMSetDLLStorageClass(
    ffi.Pointer<LLVMOpaqueValue> Global,
    int Class,
  ) {
    _LLVMSetDLLStorageClass ??= _dylib.lookupFunction<_c_LLVMSetDLLStorageClass,
        _dart_LLVMSetDLLStorageClass>('LLVMSetDLLStorageClass');
    return _LLVMSetDLLStorageClass(
      Global,
      Class,
    );
  }

  _dart_LLVMSetDLLStorageClass _LLVMSetDLLStorageClass;

  int LLVMGetUnnamedAddress(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGetUnnamedAddress ??= _dylib.lookupFunction<_c_LLVMGetUnnamedAddress,
        _dart_LLVMGetUnnamedAddress>('LLVMGetUnnamedAddress');
    return _LLVMGetUnnamedAddress(
      Global,
    );
  }

  _dart_LLVMGetUnnamedAddress _LLVMGetUnnamedAddress;

  void LLVMSetUnnamedAddress(
    ffi.Pointer<LLVMOpaqueValue> Global,
    int UnnamedAddr,
  ) {
    _LLVMSetUnnamedAddress ??= _dylib.lookupFunction<_c_LLVMSetUnnamedAddress,
        _dart_LLVMSetUnnamedAddress>('LLVMSetUnnamedAddress');
    return _LLVMSetUnnamedAddress(
      Global,
      UnnamedAddr,
    );
  }

  _dart_LLVMSetUnnamedAddress _LLVMSetUnnamedAddress;

  /// Returns the "value type" of a global value.  This differs from the formal
  /// type of a global value which is always a pointer type.
  ///
  /// @see llvm::GlobalValue::getValueType()
  ffi.Pointer<LLVMOpaqueType> LLVMGlobalGetValueType(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGlobalGetValueType ??= _dylib.lookupFunction<_c_LLVMGlobalGetValueType,
        _dart_LLVMGlobalGetValueType>('LLVMGlobalGetValueType');
    return _LLVMGlobalGetValueType(
      Global,
    );
  }

  _dart_LLVMGlobalGetValueType _LLVMGlobalGetValueType;

  /// Deprecated: Use LLVMGetUnnamedAddress instead.
  int LLVMHasUnnamedAddr(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMHasUnnamedAddr ??=
        _dylib.lookupFunction<_c_LLVMHasUnnamedAddr, _dart_LLVMHasUnnamedAddr>(
            'LLVMHasUnnamedAddr');
    return _LLVMHasUnnamedAddr(
      Global,
    );
  }

  _dart_LLVMHasUnnamedAddr _LLVMHasUnnamedAddr;

  /// Deprecated: Use LLVMSetUnnamedAddress instead.
  void LLVMSetUnnamedAddr(
    ffi.Pointer<LLVMOpaqueValue> Global,
    int HasUnnamedAddr,
  ) {
    _LLVMSetUnnamedAddr ??=
        _dylib.lookupFunction<_c_LLVMSetUnnamedAddr, _dart_LLVMSetUnnamedAddr>(
            'LLVMSetUnnamedAddr');
    return _LLVMSetUnnamedAddr(
      Global,
      HasUnnamedAddr,
    );
  }

  _dart_LLVMSetUnnamedAddr _LLVMSetUnnamedAddr;

  /// Obtain the preferred alignment of the value.
  /// @see llvm::AllocaInst::getAlignment()
  /// @see llvm::LoadInst::getAlignment()
  /// @see llvm::StoreInst::getAlignment()
  /// @see llvm::GlobalValue::getAlignment()
  int LLVMGetAlignment(
    ffi.Pointer<LLVMOpaqueValue> V,
  ) {
    _LLVMGetAlignment ??=
        _dylib.lookupFunction<_c_LLVMGetAlignment, _dart_LLVMGetAlignment>(
            'LLVMGetAlignment');
    return _LLVMGetAlignment(
      V,
    );
  }

  _dart_LLVMGetAlignment _LLVMGetAlignment;

  /// Set the preferred alignment of the value.
  /// @see llvm::AllocaInst::setAlignment()
  /// @see llvm::LoadInst::setAlignment()
  /// @see llvm::StoreInst::setAlignment()
  /// @see llvm::GlobalValue::setAlignment()
  void LLVMSetAlignment(
    ffi.Pointer<LLVMOpaqueValue> V,
    int Bytes,
  ) {
    _LLVMSetAlignment ??=
        _dylib.lookupFunction<_c_LLVMSetAlignment, _dart_LLVMSetAlignment>(
            'LLVMSetAlignment');
    return _LLVMSetAlignment(
      V,
      Bytes,
    );
  }

  _dart_LLVMSetAlignment _LLVMSetAlignment;

  /// Sets a metadata attachment, erasing the existing metadata attachment if
  /// it already exists for the given kind.
  ///
  /// @see llvm::GlobalObject::setMetadata()
  void LLVMGlobalSetMetadata(
    ffi.Pointer<LLVMOpaqueValue> Global,
    int Kind,
    ffi.Pointer<LLVMOpaqueMetadata> MD,
  ) {
    _LLVMGlobalSetMetadata ??= _dylib.lookupFunction<_c_LLVMGlobalSetMetadata,
        _dart_LLVMGlobalSetMetadata>('LLVMGlobalSetMetadata');
    return _LLVMGlobalSetMetadata(
      Global,
      Kind,
      MD,
    );
  }

  _dart_LLVMGlobalSetMetadata _LLVMGlobalSetMetadata;

  /// Erases a metadata attachment of the given kind if it exists.
  ///
  /// @see llvm::GlobalObject::eraseMetadata()
  void LLVMGlobalEraseMetadata(
    ffi.Pointer<LLVMOpaqueValue> Global,
    int Kind,
  ) {
    _LLVMGlobalEraseMetadata ??= _dylib.lookupFunction<
        _c_LLVMGlobalEraseMetadata,
        _dart_LLVMGlobalEraseMetadata>('LLVMGlobalEraseMetadata');
    return _LLVMGlobalEraseMetadata(
      Global,
      Kind,
    );
  }

  _dart_LLVMGlobalEraseMetadata _LLVMGlobalEraseMetadata;

  /// Removes all metadata attachments from this value.
  ///
  /// @see llvm::GlobalObject::clearMetadata()
  void LLVMGlobalClearMetadata(
    ffi.Pointer<LLVMOpaqueValue> Global,
  ) {
    _LLVMGlobalClearMetadata ??= _dylib.lookupFunction<
        _c_LLVMGlobalClearMetadata,
        _dart_LLVMGlobalClearMetadata>('LLVMGlobalClearMetadata');
    return _LLVMGlobalClearMetadata(
      Global,
    );
  }

  _dart_LLVMGlobalClearMetadata _LLVMGlobalClearMetadata;

  /// Retrieves an array of metadata entries representing the metadata attached to
  /// this value. The caller is responsible for freeing this array by calling
  /// \c LLVMDisposeValueMetadataEntries.
  ///
  /// @see llvm::GlobalObject::getAllMetadata()
  ffi.Pointer<LLVMOpaqueValueMetadataEntry> LLVMGlobalCopyAllMetadata(
    ffi.Pointer<LLVMOpaqueValue> Value,
    ffi.Pointer<ffi.Uint64> NumEntries,
  ) {
    _LLVMGlobalCopyAllMetadata ??= _dylib.lookupFunction<
        _c_LLVMGlobalCopyAllMetadata,
        _dart_LLVMGlobalCopyAllMetadata>('LLVMGlobalCopyAllMetadata');
    return _LLVMGlobalCopyAllMetadata(
      Value,
      NumEntries,
    );
  }

  _dart_LLVMGlobalCopyAllMetadata _LLVMGlobalCopyAllMetadata;

  /// Destroys value metadata entries.
  void LLVMDisposeValueMetadataEntries(
    ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
  ) {
    _LLVMDisposeValueMetadataEntries ??= _dylib.lookupFunction<
            _c_LLVMDisposeValueMetadataEntries,
            _dart_LLVMDisposeValueMetadataEntries>(
        'LLVMDisposeValueMetadataEntries');
    return _LLVMDisposeValueMetadataEntries(
      Entries,
    );
  }

  _dart_LLVMDisposeValueMetadataEntries _LLVMDisposeValueMetadataEntries;

  /// Returns the kind of a value metadata entry at a specific index.
  int LLVMValueMetadataEntriesGetKind(
    ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
    int Index,
  ) {
    _LLVMValueMetadataEntriesGetKind ??= _dylib.lookupFunction<
            _c_LLVMValueMetadataEntriesGetKind,
            _dart_LLVMValueMetadataEntriesGetKind>(
        'LLVMValueMetadataEntriesGetKind');
    return _LLVMValueMetadataEntriesGetKind(
      Entries,
      Index,
    );
  }

  _dart_LLVMValueMetadataEntriesGetKind _LLVMValueMetadataEntriesGetKind;

  /// Returns the underlying metadata node of a value metadata entry at a
  /// specific index.
  ffi.Pointer<LLVMOpaqueMetadata> LLVMValueMetadataEntriesGetMetadata(
    ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
    int Index,
  ) {
    _LLVMValueMetadataEntriesGetMetadata ??= _dylib.lookupFunction<
            _c_LLVMValueMetadataEntriesGetMetadata,
            _dart_LLVMValueMetadataEntriesGetMetadata>(
        'LLVMValueMetadataEntriesGetMetadata');
    return _LLVMValueMetadataEntriesGetMetadata(
      Entries,
      Index,
    );
  }

  _dart_LLVMValueMetadataEntriesGetMetadata
      _LLVMValueMetadataEntriesGetMetadata;

  /// @defgroup LLVMCoreValueConstantGlobalVariable Global Variables
  ///
  /// This group contains functions that operate on global variable values.
  ///
  /// @see llvm::GlobalVariable
  ///
  /// @{
  ffi.Pointer<LLVMOpaqueValue> LLVMAddGlobal(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMAddGlobal ??= _dylib
        .lookupFunction<_c_LLVMAddGlobal, _dart_LLVMAddGlobal>('LLVMAddGlobal');
    return _LLVMAddGlobal(
      M,
      Ty,
      Name,
    );
  }

  _dart_LLVMAddGlobal _LLVMAddGlobal;

  ffi.Pointer<LLVMOpaqueValue> LLVMAddGlobalInAddressSpace(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> Name,
    int AddressSpace,
  ) {
    _LLVMAddGlobalInAddressSpace ??= _dylib.lookupFunction<
        _c_LLVMAddGlobalInAddressSpace,
        _dart_LLVMAddGlobalInAddressSpace>('LLVMAddGlobalInAddressSpace');
    return _LLVMAddGlobalInAddressSpace(
      M,
      Ty,
      Name,
      AddressSpace,
    );
  }

  _dart_LLVMAddGlobalInAddressSpace _LLVMAddGlobalInAddressSpace;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetNamedGlobal(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMGetNamedGlobal ??=
        _dylib.lookupFunction<_c_LLVMGetNamedGlobal, _dart_LLVMGetNamedGlobal>(
            'LLVMGetNamedGlobal');
    return _LLVMGetNamedGlobal(
      M,
      Name,
    );
  }

  _dart_LLVMGetNamedGlobal _LLVMGetNamedGlobal;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetFirstGlobal(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetFirstGlobal ??=
        _dylib.lookupFunction<_c_LLVMGetFirstGlobal, _dart_LLVMGetFirstGlobal>(
            'LLVMGetFirstGlobal');
    return _LLVMGetFirstGlobal(
      M,
    );
  }

  _dart_LLVMGetFirstGlobal _LLVMGetFirstGlobal;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetLastGlobal(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetLastGlobal ??=
        _dylib.lookupFunction<_c_LLVMGetLastGlobal, _dart_LLVMGetLastGlobal>(
            'LLVMGetLastGlobal');
    return _LLVMGetLastGlobal(
      M,
    );
  }

  _dart_LLVMGetLastGlobal _LLVMGetLastGlobal;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetNextGlobal(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMGetNextGlobal ??=
        _dylib.lookupFunction<_c_LLVMGetNextGlobal, _dart_LLVMGetNextGlobal>(
            'LLVMGetNextGlobal');
    return _LLVMGetNextGlobal(
      GlobalVar,
    );
  }

  _dart_LLVMGetNextGlobal _LLVMGetNextGlobal;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetPreviousGlobal(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMGetPreviousGlobal ??= _dylib.lookupFunction<_c_LLVMGetPreviousGlobal,
        _dart_LLVMGetPreviousGlobal>('LLVMGetPreviousGlobal');
    return _LLVMGetPreviousGlobal(
      GlobalVar,
    );
  }

  _dart_LLVMGetPreviousGlobal _LLVMGetPreviousGlobal;

  void LLVMDeleteGlobal(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMDeleteGlobal ??=
        _dylib.lookupFunction<_c_LLVMDeleteGlobal, _dart_LLVMDeleteGlobal>(
            'LLVMDeleteGlobal');
    return _LLVMDeleteGlobal(
      GlobalVar,
    );
  }

  _dart_LLVMDeleteGlobal _LLVMDeleteGlobal;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetInitializer(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMGetInitializer ??=
        _dylib.lookupFunction<_c_LLVMGetInitializer, _dart_LLVMGetInitializer>(
            'LLVMGetInitializer');
    return _LLVMGetInitializer(
      GlobalVar,
    );
  }

  _dart_LLVMGetInitializer _LLVMGetInitializer;

  void LLVMSetInitializer(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
    ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ) {
    _LLVMSetInitializer ??=
        _dylib.lookupFunction<_c_LLVMSetInitializer, _dart_LLVMSetInitializer>(
            'LLVMSetInitializer');
    return _LLVMSetInitializer(
      GlobalVar,
      ConstantVal,
    );
  }

  _dart_LLVMSetInitializer _LLVMSetInitializer;

  int LLVMIsThreadLocal(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMIsThreadLocal ??=
        _dylib.lookupFunction<_c_LLVMIsThreadLocal, _dart_LLVMIsThreadLocal>(
            'LLVMIsThreadLocal');
    return _LLVMIsThreadLocal(
      GlobalVar,
    );
  }

  _dart_LLVMIsThreadLocal _LLVMIsThreadLocal;

  void LLVMSetThreadLocal(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
    int IsThreadLocal,
  ) {
    _LLVMSetThreadLocal ??=
        _dylib.lookupFunction<_c_LLVMSetThreadLocal, _dart_LLVMSetThreadLocal>(
            'LLVMSetThreadLocal');
    return _LLVMSetThreadLocal(
      GlobalVar,
      IsThreadLocal,
    );
  }

  _dart_LLVMSetThreadLocal _LLVMSetThreadLocal;

  int LLVMIsGlobalConstant(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMIsGlobalConstant ??= _dylib.lookupFunction<_c_LLVMIsGlobalConstant,
        _dart_LLVMIsGlobalConstant>('LLVMIsGlobalConstant');
    return _LLVMIsGlobalConstant(
      GlobalVar,
    );
  }

  _dart_LLVMIsGlobalConstant _LLVMIsGlobalConstant;

  void LLVMSetGlobalConstant(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
    int IsConstant,
  ) {
    _LLVMSetGlobalConstant ??= _dylib.lookupFunction<_c_LLVMSetGlobalConstant,
        _dart_LLVMSetGlobalConstant>('LLVMSetGlobalConstant');
    return _LLVMSetGlobalConstant(
      GlobalVar,
      IsConstant,
    );
  }

  _dart_LLVMSetGlobalConstant _LLVMSetGlobalConstant;

  int LLVMGetThreadLocalMode(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMGetThreadLocalMode ??= _dylib.lookupFunction<_c_LLVMGetThreadLocalMode,
        _dart_LLVMGetThreadLocalMode>('LLVMGetThreadLocalMode');
    return _LLVMGetThreadLocalMode(
      GlobalVar,
    );
  }

  _dart_LLVMGetThreadLocalMode _LLVMGetThreadLocalMode;

  void LLVMSetThreadLocalMode(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
    int Mode,
  ) {
    _LLVMSetThreadLocalMode ??= _dylib.lookupFunction<_c_LLVMSetThreadLocalMode,
        _dart_LLVMSetThreadLocalMode>('LLVMSetThreadLocalMode');
    return _LLVMSetThreadLocalMode(
      GlobalVar,
      Mode,
    );
  }

  _dart_LLVMSetThreadLocalMode _LLVMSetThreadLocalMode;

  int LLVMIsExternallyInitialized(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ) {
    _LLVMIsExternallyInitialized ??= _dylib.lookupFunction<
        _c_LLVMIsExternallyInitialized,
        _dart_LLVMIsExternallyInitialized>('LLVMIsExternallyInitialized');
    return _LLVMIsExternallyInitialized(
      GlobalVar,
    );
  }

  _dart_LLVMIsExternallyInitialized _LLVMIsExternallyInitialized;

  void LLVMSetExternallyInitialized(
    ffi.Pointer<LLVMOpaqueValue> GlobalVar,
    int IsExtInit,
  ) {
    _LLVMSetExternallyInitialized ??= _dylib.lookupFunction<
        _c_LLVMSetExternallyInitialized,
        _dart_LLVMSetExternallyInitialized>('LLVMSetExternallyInitialized');
    return _LLVMSetExternallyInitialized(
      GlobalVar,
      IsExtInit,
    );
  }

  _dart_LLVMSetExternallyInitialized _LLVMSetExternallyInitialized;

  /// @defgroup LLVMCoreValueConstantGlobalAlias Global Aliases
  ///
  /// This group contains function that operate on global alias values.
  ///
  /// @see llvm::GlobalAlias
  ///
  /// @{
  ffi.Pointer<LLVMOpaqueValue> LLVMAddAlias(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> Aliasee,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMAddAlias ??= _dylib
        .lookupFunction<_c_LLVMAddAlias, _dart_LLVMAddAlias>('LLVMAddAlias');
    return _LLVMAddAlias(
      M,
      Ty,
      Aliasee,
      Name,
    );
  }

  _dart_LLVMAddAlias _LLVMAddAlias;

  /// Obtain a GlobalAlias value from a Module by its name.
  ///
  /// The returned value corresponds to a llvm::GlobalAlias value.
  ///
  /// @see llvm::Module::getNamedAlias()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNamedGlobalAlias(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    int NameLen,
  ) {
    _LLVMGetNamedGlobalAlias ??= _dylib.lookupFunction<
        _c_LLVMGetNamedGlobalAlias,
        _dart_LLVMGetNamedGlobalAlias>('LLVMGetNamedGlobalAlias');
    return _LLVMGetNamedGlobalAlias(
      M,
      Name,
      NameLen,
    );
  }

  _dart_LLVMGetNamedGlobalAlias _LLVMGetNamedGlobalAlias;

  /// Obtain an iterator to the first GlobalAlias in a Module.
  ///
  /// @see llvm::Module::alias_begin()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetFirstGlobalAlias(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetFirstGlobalAlias ??= _dylib.lookupFunction<
        _c_LLVMGetFirstGlobalAlias,
        _dart_LLVMGetFirstGlobalAlias>('LLVMGetFirstGlobalAlias');
    return _LLVMGetFirstGlobalAlias(
      M,
    );
  }

  _dart_LLVMGetFirstGlobalAlias _LLVMGetFirstGlobalAlias;

  /// Obtain an iterator to the last GlobalAlias in a Module.
  ///
  /// @see llvm::Module::alias_end()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetLastGlobalAlias(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetLastGlobalAlias ??= _dylib.lookupFunction<_c_LLVMGetLastGlobalAlias,
        _dart_LLVMGetLastGlobalAlias>('LLVMGetLastGlobalAlias');
    return _LLVMGetLastGlobalAlias(
      M,
    );
  }

  _dart_LLVMGetLastGlobalAlias _LLVMGetLastGlobalAlias;

  /// Advance a GlobalAlias iterator to the next GlobalAlias.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// global aliases.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNextGlobalAlias(
    ffi.Pointer<LLVMOpaqueValue> GA,
  ) {
    _LLVMGetNextGlobalAlias ??= _dylib.lookupFunction<_c_LLVMGetNextGlobalAlias,
        _dart_LLVMGetNextGlobalAlias>('LLVMGetNextGlobalAlias');
    return _LLVMGetNextGlobalAlias(
      GA,
    );
  }

  _dart_LLVMGetNextGlobalAlias _LLVMGetNextGlobalAlias;

  /// Decrement a GlobalAlias iterator to the previous GlobalAlias.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous global aliases.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetPreviousGlobalAlias(
    ffi.Pointer<LLVMOpaqueValue> GA,
  ) {
    _LLVMGetPreviousGlobalAlias ??= _dylib.lookupFunction<
        _c_LLVMGetPreviousGlobalAlias,
        _dart_LLVMGetPreviousGlobalAlias>('LLVMGetPreviousGlobalAlias');
    return _LLVMGetPreviousGlobalAlias(
      GA,
    );
  }

  _dart_LLVMGetPreviousGlobalAlias _LLVMGetPreviousGlobalAlias;

  /// Retrieve the target value of an alias.
  ffi.Pointer<LLVMOpaqueValue> LLVMAliasGetAliasee(
    ffi.Pointer<LLVMOpaqueValue> Alias,
  ) {
    _LLVMAliasGetAliasee ??= _dylib.lookupFunction<_c_LLVMAliasGetAliasee,
        _dart_LLVMAliasGetAliasee>('LLVMAliasGetAliasee');
    return _LLVMAliasGetAliasee(
      Alias,
    );
  }

  _dart_LLVMAliasGetAliasee _LLVMAliasGetAliasee;

  /// Set the target value of an alias.
  void LLVMAliasSetAliasee(
    ffi.Pointer<LLVMOpaqueValue> Alias,
    ffi.Pointer<LLVMOpaqueValue> Aliasee,
  ) {
    _LLVMAliasSetAliasee ??= _dylib.lookupFunction<_c_LLVMAliasSetAliasee,
        _dart_LLVMAliasSetAliasee>('LLVMAliasSetAliasee');
    return _LLVMAliasSetAliasee(
      Alias,
      Aliasee,
    );
  }

  _dart_LLVMAliasSetAliasee _LLVMAliasSetAliasee;

  /// Remove a function from its containing module and deletes it.
  ///
  /// @see llvm::Function::eraseFromParent()
  void LLVMDeleteFunction(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMDeleteFunction ??=
        _dylib.lookupFunction<_c_LLVMDeleteFunction, _dart_LLVMDeleteFunction>(
            'LLVMDeleteFunction');
    return _LLVMDeleteFunction(
      Fn,
    );
  }

  _dart_LLVMDeleteFunction _LLVMDeleteFunction;

  /// Check whether the given function has a personality function.
  ///
  /// @see llvm::Function::hasPersonalityFn()
  int LLVMHasPersonalityFn(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMHasPersonalityFn ??= _dylib.lookupFunction<_c_LLVMHasPersonalityFn,
        _dart_LLVMHasPersonalityFn>('LLVMHasPersonalityFn');
    return _LLVMHasPersonalityFn(
      Fn,
    );
  }

  _dart_LLVMHasPersonalityFn _LLVMHasPersonalityFn;

  /// Obtain the personality function attached to the function.
  ///
  /// @see llvm::Function::getPersonalityFn()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetPersonalityFn(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetPersonalityFn ??= _dylib.lookupFunction<_c_LLVMGetPersonalityFn,
        _dart_LLVMGetPersonalityFn>('LLVMGetPersonalityFn');
    return _LLVMGetPersonalityFn(
      Fn,
    );
  }

  _dart_LLVMGetPersonalityFn _LLVMGetPersonalityFn;

  /// Set the personality function attached to the function.
  ///
  /// @see llvm::Function::setPersonalityFn()
  void LLVMSetPersonalityFn(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<LLVMOpaqueValue> PersonalityFn,
  ) {
    _LLVMSetPersonalityFn ??= _dylib.lookupFunction<_c_LLVMSetPersonalityFn,
        _dart_LLVMSetPersonalityFn>('LLVMSetPersonalityFn');
    return _LLVMSetPersonalityFn(
      Fn,
      PersonalityFn,
    );
  }

  _dart_LLVMSetPersonalityFn _LLVMSetPersonalityFn;

  /// Obtain the intrinsic ID number which matches the given function name.
  ///
  /// @see llvm::Function::lookupIntrinsicID()
  int LLVMLookupIntrinsicID(
    ffi.Pointer<ffi.Int8> Name,
    int NameLen,
  ) {
    _LLVMLookupIntrinsicID ??= _dylib.lookupFunction<_c_LLVMLookupIntrinsicID,
        _dart_LLVMLookupIntrinsicID>('LLVMLookupIntrinsicID');
    return _LLVMLookupIntrinsicID(
      Name,
      NameLen,
    );
  }

  _dart_LLVMLookupIntrinsicID _LLVMLookupIntrinsicID;

  /// Obtain the ID number from a function instance.
  ///
  /// @see llvm::Function::getIntrinsicID()
  int LLVMGetIntrinsicID(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetIntrinsicID ??=
        _dylib.lookupFunction<_c_LLVMGetIntrinsicID, _dart_LLVMGetIntrinsicID>(
            'LLVMGetIntrinsicID');
    return _LLVMGetIntrinsicID(
      Fn,
    );
  }

  _dart_LLVMGetIntrinsicID _LLVMGetIntrinsicID;

  /// Create or insert the declaration of an intrinsic.  For overloaded intrinsics,
  /// parameter types must be provided to uniquely identify an overload.
  ///
  /// @see llvm::Intrinsic::getDeclaration()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetIntrinsicDeclaration(
    ffi.Pointer<LLVMOpaqueModule> Mod,
    int ID,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
    int ParamCount,
  ) {
    _LLVMGetIntrinsicDeclaration ??= _dylib.lookupFunction<
        _c_LLVMGetIntrinsicDeclaration,
        _dart_LLVMGetIntrinsicDeclaration>('LLVMGetIntrinsicDeclaration');
    return _LLVMGetIntrinsicDeclaration(
      Mod,
      ID,
      ParamTypes,
      ParamCount,
    );
  }

  _dart_LLVMGetIntrinsicDeclaration _LLVMGetIntrinsicDeclaration;

  /// Retrieves the type of an intrinsic.  For overloaded intrinsics, parameter
  /// types must be provided to uniquely identify an overload.
  ///
  /// @see llvm::Intrinsic::getType()
  ffi.Pointer<LLVMOpaqueType> LLVMIntrinsicGetType(
    ffi.Pointer<LLVMOpaqueContext> Ctx,
    int ID,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
    int ParamCount,
  ) {
    _LLVMIntrinsicGetType ??= _dylib.lookupFunction<_c_LLVMIntrinsicGetType,
        _dart_LLVMIntrinsicGetType>('LLVMIntrinsicGetType');
    return _LLVMIntrinsicGetType(
      Ctx,
      ID,
      ParamTypes,
      ParamCount,
    );
  }

  _dart_LLVMIntrinsicGetType _LLVMIntrinsicGetType;

  /// Retrieves the name of an intrinsic.
  ///
  /// @see llvm::Intrinsic::getName()
  ffi.Pointer<ffi.Int8> LLVMIntrinsicGetName(
    int ID,
    ffi.Pointer<ffi.Uint64> NameLength,
  ) {
    _LLVMIntrinsicGetName ??= _dylib.lookupFunction<_c_LLVMIntrinsicGetName,
        _dart_LLVMIntrinsicGetName>('LLVMIntrinsicGetName');
    return _LLVMIntrinsicGetName(
      ID,
      NameLength,
    );
  }

  _dart_LLVMIntrinsicGetName _LLVMIntrinsicGetName;

  /// Copies the name of an overloaded intrinsic identified by a given list of
  /// parameter types.
  ///
  /// Unlike LLVMIntrinsicGetName, the caller is responsible for freeing the
  /// returned string.
  ///
  /// @see llvm::Intrinsic::getName()
  ffi.Pointer<ffi.Int8> LLVMIntrinsicCopyOverloadedName(
    int ID,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
    int ParamCount,
    ffi.Pointer<ffi.Uint64> NameLength,
  ) {
    _LLVMIntrinsicCopyOverloadedName ??= _dylib.lookupFunction<
            _c_LLVMIntrinsicCopyOverloadedName,
            _dart_LLVMIntrinsicCopyOverloadedName>(
        'LLVMIntrinsicCopyOverloadedName');
    return _LLVMIntrinsicCopyOverloadedName(
      ID,
      ParamTypes,
      ParamCount,
      NameLength,
    );
  }

  _dart_LLVMIntrinsicCopyOverloadedName _LLVMIntrinsicCopyOverloadedName;

  /// Obtain if the intrinsic identified by the given ID is overloaded.
  ///
  /// @see llvm::Intrinsic::isOverloaded()
  int LLVMIntrinsicIsOverloaded(
    int ID,
  ) {
    _LLVMIntrinsicIsOverloaded ??= _dylib.lookupFunction<
        _c_LLVMIntrinsicIsOverloaded,
        _dart_LLVMIntrinsicIsOverloaded>('LLVMIntrinsicIsOverloaded');
    return _LLVMIntrinsicIsOverloaded(
      ID,
    );
  }

  _dart_LLVMIntrinsicIsOverloaded _LLVMIntrinsicIsOverloaded;

  /// Obtain the calling function of a function.
  ///
  /// The returned value corresponds to the LLVMCallConv enumeration.
  ///
  /// @see llvm::Function::getCallingConv()
  int LLVMGetFunctionCallConv(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetFunctionCallConv ??= _dylib.lookupFunction<
        _c_LLVMGetFunctionCallConv,
        _dart_LLVMGetFunctionCallConv>('LLVMGetFunctionCallConv');
    return _LLVMGetFunctionCallConv(
      Fn,
    );
  }

  _dart_LLVMGetFunctionCallConv _LLVMGetFunctionCallConv;

  /// Set the calling convention of a function.
  ///
  /// @see llvm::Function::setCallingConv()
  ///
  /// @param Fn Function to operate on
  /// @param CC LLVMCallConv to set calling convention to
  void LLVMSetFunctionCallConv(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    int CC,
  ) {
    _LLVMSetFunctionCallConv ??= _dylib.lookupFunction<
        _c_LLVMSetFunctionCallConv,
        _dart_LLVMSetFunctionCallConv>('LLVMSetFunctionCallConv');
    return _LLVMSetFunctionCallConv(
      Fn,
      CC,
    );
  }

  _dart_LLVMSetFunctionCallConv _LLVMSetFunctionCallConv;

  /// Obtain the name of the garbage collector to use during code
  /// generation.
  ///
  /// @see llvm::Function::getGC()
  ffi.Pointer<ffi.Int8> LLVMGetGC(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetGC ??=
        _dylib.lookupFunction<_c_LLVMGetGC, _dart_LLVMGetGC>('LLVMGetGC');
    return _LLVMGetGC(
      Fn,
    );
  }

  _dart_LLVMGetGC _LLVMGetGC;

  /// Define the garbage collector to use during code generation.
  ///
  /// @see llvm::Function::setGC()
  void LLVMSetGC(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMSetGC ??=
        _dylib.lookupFunction<_c_LLVMSetGC, _dart_LLVMSetGC>('LLVMSetGC');
    return _LLVMSetGC(
      Fn,
      Name,
    );
  }

  _dart_LLVMSetGC _LLVMSetGC;

  /// Add an attribute to a function.
  ///
  /// @see llvm::Function::addAttribute()
  void LLVMAddAttributeAtIndex(
    ffi.Pointer<LLVMOpaqueValue> F,
    int Idx,
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ) {
    _LLVMAddAttributeAtIndex ??= _dylib.lookupFunction<
        _c_LLVMAddAttributeAtIndex,
        _dart_LLVMAddAttributeAtIndex>('LLVMAddAttributeAtIndex');
    return _LLVMAddAttributeAtIndex(
      F,
      Idx,
      A,
    );
  }

  _dart_LLVMAddAttributeAtIndex _LLVMAddAttributeAtIndex;

  int LLVMGetAttributeCountAtIndex(
    ffi.Pointer<LLVMOpaqueValue> F,
    int Idx,
  ) {
    _LLVMGetAttributeCountAtIndex ??= _dylib.lookupFunction<
        _c_LLVMGetAttributeCountAtIndex,
        _dart_LLVMGetAttributeCountAtIndex>('LLVMGetAttributeCountAtIndex');
    return _LLVMGetAttributeCountAtIndex(
      F,
      Idx,
    );
  }

  _dart_LLVMGetAttributeCountAtIndex _LLVMGetAttributeCountAtIndex;

  void LLVMGetAttributesAtIndex(
    ffi.Pointer<LLVMOpaqueValue> F,
    int Idx,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueAttributeRef>> Attrs,
  ) {
    _LLVMGetAttributesAtIndex ??= _dylib.lookupFunction<
        _c_LLVMGetAttributesAtIndex,
        _dart_LLVMGetAttributesAtIndex>('LLVMGetAttributesAtIndex');
    return _LLVMGetAttributesAtIndex(
      F,
      Idx,
      Attrs,
    );
  }

  _dart_LLVMGetAttributesAtIndex _LLVMGetAttributesAtIndex;

  ffi.Pointer<LLVMOpaqueAttributeRef> LLVMGetEnumAttributeAtIndex(
    ffi.Pointer<LLVMOpaqueValue> F,
    int Idx,
    int KindID,
  ) {
    _LLVMGetEnumAttributeAtIndex ??= _dylib.lookupFunction<
        _c_LLVMGetEnumAttributeAtIndex,
        _dart_LLVMGetEnumAttributeAtIndex>('LLVMGetEnumAttributeAtIndex');
    return _LLVMGetEnumAttributeAtIndex(
      F,
      Idx,
      KindID,
    );
  }

  _dart_LLVMGetEnumAttributeAtIndex _LLVMGetEnumAttributeAtIndex;

  ffi.Pointer<LLVMOpaqueAttributeRef> LLVMGetStringAttributeAtIndex(
    ffi.Pointer<LLVMOpaqueValue> F,
    int Idx,
    ffi.Pointer<ffi.Int8> K,
    int KLen,
  ) {
    _LLVMGetStringAttributeAtIndex ??= _dylib.lookupFunction<
        _c_LLVMGetStringAttributeAtIndex,
        _dart_LLVMGetStringAttributeAtIndex>('LLVMGetStringAttributeAtIndex');
    return _LLVMGetStringAttributeAtIndex(
      F,
      Idx,
      K,
      KLen,
    );
  }

  _dart_LLVMGetStringAttributeAtIndex _LLVMGetStringAttributeAtIndex;

  void LLVMRemoveEnumAttributeAtIndex(
    ffi.Pointer<LLVMOpaqueValue> F,
    int Idx,
    int KindID,
  ) {
    _LLVMRemoveEnumAttributeAtIndex ??= _dylib.lookupFunction<
        _c_LLVMRemoveEnumAttributeAtIndex,
        _dart_LLVMRemoveEnumAttributeAtIndex>('LLVMRemoveEnumAttributeAtIndex');
    return _LLVMRemoveEnumAttributeAtIndex(
      F,
      Idx,
      KindID,
    );
  }

  _dart_LLVMRemoveEnumAttributeAtIndex _LLVMRemoveEnumAttributeAtIndex;

  void LLVMRemoveStringAttributeAtIndex(
    ffi.Pointer<LLVMOpaqueValue> F,
    int Idx,
    ffi.Pointer<ffi.Int8> K,
    int KLen,
  ) {
    _LLVMRemoveStringAttributeAtIndex ??= _dylib.lookupFunction<
            _c_LLVMRemoveStringAttributeAtIndex,
            _dart_LLVMRemoveStringAttributeAtIndex>(
        'LLVMRemoveStringAttributeAtIndex');
    return _LLVMRemoveStringAttributeAtIndex(
      F,
      Idx,
      K,
      KLen,
    );
  }

  _dart_LLVMRemoveStringAttributeAtIndex _LLVMRemoveStringAttributeAtIndex;

  /// Add a target-dependent attribute to a function
  /// @see llvm::AttrBuilder::addAttribute()
  void LLVMAddTargetDependentFunctionAttr(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Int8> A,
    ffi.Pointer<ffi.Int8> V,
  ) {
    _LLVMAddTargetDependentFunctionAttr ??= _dylib.lookupFunction<
            _c_LLVMAddTargetDependentFunctionAttr,
            _dart_LLVMAddTargetDependentFunctionAttr>(
        'LLVMAddTargetDependentFunctionAttr');
    return _LLVMAddTargetDependentFunctionAttr(
      Fn,
      A,
      V,
    );
  }

  _dart_LLVMAddTargetDependentFunctionAttr _LLVMAddTargetDependentFunctionAttr;

  /// Obtain the number of parameters in a function.
  ///
  /// @see llvm::Function::arg_size()
  int LLVMCountParams(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMCountParams ??=
        _dylib.lookupFunction<_c_LLVMCountParams, _dart_LLVMCountParams>(
            'LLVMCountParams');
    return _LLVMCountParams(
      Fn,
    );
  }

  _dart_LLVMCountParams _LLVMCountParams;

  /// Obtain the parameters in a function.
  ///
  /// The takes a pointer to a pre-allocated array of LLVMValueRef that is
  /// at least LLVMCountParams() long. This array will be filled with
  /// LLVMValueRef instances which correspond to the parameters the
  /// function receives. Each LLVMValueRef corresponds to a llvm::Argument
  /// instance.
  ///
  /// @see llvm::Function::arg_begin()
  void LLVMGetParams(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Params,
  ) {
    _LLVMGetParams ??= _dylib
        .lookupFunction<_c_LLVMGetParams, _dart_LLVMGetParams>('LLVMGetParams');
    return _LLVMGetParams(
      Fn,
      Params,
    );
  }

  _dart_LLVMGetParams _LLVMGetParams;

  /// Obtain the parameter at the specified index.
  ///
  /// Parameters are indexed from 0.
  ///
  /// @see llvm::Function::arg_begin()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetParam(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    int Index,
  ) {
    _LLVMGetParam ??= _dylib
        .lookupFunction<_c_LLVMGetParam, _dart_LLVMGetParam>('LLVMGetParam');
    return _LLVMGetParam(
      Fn,
      Index,
    );
  }

  _dart_LLVMGetParam _LLVMGetParam;

  /// Obtain the function to which this argument belongs.
  ///
  /// Unlike other functions in this group, this one takes an LLVMValueRef
  /// that corresponds to a llvm::Attribute.
  ///
  /// The returned LLVMValueRef is the llvm::Function to which this
  /// argument belongs.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetParamParent(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetParamParent ??=
        _dylib.lookupFunction<_c_LLVMGetParamParent, _dart_LLVMGetParamParent>(
            'LLVMGetParamParent');
    return _LLVMGetParamParent(
      Inst,
    );
  }

  _dart_LLVMGetParamParent _LLVMGetParamParent;

  /// Obtain the first parameter to a function.
  ///
  /// @see llvm::Function::arg_begin()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetFirstParam(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetFirstParam ??=
        _dylib.lookupFunction<_c_LLVMGetFirstParam, _dart_LLVMGetFirstParam>(
            'LLVMGetFirstParam');
    return _LLVMGetFirstParam(
      Fn,
    );
  }

  _dart_LLVMGetFirstParam _LLVMGetFirstParam;

  /// Obtain the last parameter to a function.
  ///
  /// @see llvm::Function::arg_end()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetLastParam(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetLastParam ??=
        _dylib.lookupFunction<_c_LLVMGetLastParam, _dart_LLVMGetLastParam>(
            'LLVMGetLastParam');
    return _LLVMGetLastParam(
      Fn,
    );
  }

  _dart_LLVMGetLastParam _LLVMGetLastParam;

  /// Obtain the next parameter to a function.
  ///
  /// This takes an LLVMValueRef obtained from LLVMGetFirstParam() (which is
  /// actually a wrapped iterator) and obtains the next parameter from the
  /// underlying iterator.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNextParam(
    ffi.Pointer<LLVMOpaqueValue> Arg,
  ) {
    _LLVMGetNextParam ??=
        _dylib.lookupFunction<_c_LLVMGetNextParam, _dart_LLVMGetNextParam>(
            'LLVMGetNextParam');
    return _LLVMGetNextParam(
      Arg,
    );
  }

  _dart_LLVMGetNextParam _LLVMGetNextParam;

  /// Obtain the previous parameter to a function.
  ///
  /// This is the opposite of LLVMGetNextParam().
  ffi.Pointer<LLVMOpaqueValue> LLVMGetPreviousParam(
    ffi.Pointer<LLVMOpaqueValue> Arg,
  ) {
    _LLVMGetPreviousParam ??= _dylib.lookupFunction<_c_LLVMGetPreviousParam,
        _dart_LLVMGetPreviousParam>('LLVMGetPreviousParam');
    return _LLVMGetPreviousParam(
      Arg,
    );
  }

  _dart_LLVMGetPreviousParam _LLVMGetPreviousParam;

  /// Set the alignment for a function parameter.
  ///
  /// @see llvm::Argument::addAttr()
  /// @see llvm::AttrBuilder::addAlignmentAttr()
  void LLVMSetParamAlignment(
    ffi.Pointer<LLVMOpaqueValue> Arg,
    int Align,
  ) {
    _LLVMSetParamAlignment ??= _dylib.lookupFunction<_c_LLVMSetParamAlignment,
        _dart_LLVMSetParamAlignment>('LLVMSetParamAlignment');
    return _LLVMSetParamAlignment(
      Arg,
      Align,
    );
  }

  _dart_LLVMSetParamAlignment _LLVMSetParamAlignment;

  /// Add a global indirect function to a module under a specified name.
  ///
  /// @see llvm::GlobalIFunc::create()
  ffi.Pointer<LLVMOpaqueValue> LLVMAddGlobalIFunc(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    int NameLen,
    ffi.Pointer<LLVMOpaqueType> Ty,
    int AddrSpace,
    ffi.Pointer<LLVMOpaqueValue> Resolver,
  ) {
    _LLVMAddGlobalIFunc ??=
        _dylib.lookupFunction<_c_LLVMAddGlobalIFunc, _dart_LLVMAddGlobalIFunc>(
            'LLVMAddGlobalIFunc');
    return _LLVMAddGlobalIFunc(
      M,
      Name,
      NameLen,
      Ty,
      AddrSpace,
      Resolver,
    );
  }

  _dart_LLVMAddGlobalIFunc _LLVMAddGlobalIFunc;

  /// Obtain a GlobalIFunc value from a Module by its name.
  ///
  /// The returned value corresponds to a llvm::GlobalIFunc value.
  ///
  /// @see llvm::Module::getNamedIFunc()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNamedGlobalIFunc(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Name,
    int NameLen,
  ) {
    _LLVMGetNamedGlobalIFunc ??= _dylib.lookupFunction<
        _c_LLVMGetNamedGlobalIFunc,
        _dart_LLVMGetNamedGlobalIFunc>('LLVMGetNamedGlobalIFunc');
    return _LLVMGetNamedGlobalIFunc(
      M,
      Name,
      NameLen,
    );
  }

  _dart_LLVMGetNamedGlobalIFunc _LLVMGetNamedGlobalIFunc;

  /// Obtain an iterator to the first GlobalIFunc in a Module.
  ///
  /// @see llvm::Module::ifunc_begin()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetFirstGlobalIFunc(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetFirstGlobalIFunc ??= _dylib.lookupFunction<
        _c_LLVMGetFirstGlobalIFunc,
        _dart_LLVMGetFirstGlobalIFunc>('LLVMGetFirstGlobalIFunc');
    return _LLVMGetFirstGlobalIFunc(
      M,
    );
  }

  _dart_LLVMGetFirstGlobalIFunc _LLVMGetFirstGlobalIFunc;

  /// Obtain an iterator to the last GlobalIFunc in a Module.
  ///
  /// @see llvm::Module::ifunc_end()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetLastGlobalIFunc(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMGetLastGlobalIFunc ??= _dylib.lookupFunction<_c_LLVMGetLastGlobalIFunc,
        _dart_LLVMGetLastGlobalIFunc>('LLVMGetLastGlobalIFunc');
    return _LLVMGetLastGlobalIFunc(
      M,
    );
  }

  _dart_LLVMGetLastGlobalIFunc _LLVMGetLastGlobalIFunc;

  /// Advance a GlobalIFunc iterator to the next GlobalIFunc.
  ///
  /// Returns NULL if the iterator was already at the end and there are no more
  /// global aliases.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNextGlobalIFunc(
    ffi.Pointer<LLVMOpaqueValue> IFunc,
  ) {
    _LLVMGetNextGlobalIFunc ??= _dylib.lookupFunction<_c_LLVMGetNextGlobalIFunc,
        _dart_LLVMGetNextGlobalIFunc>('LLVMGetNextGlobalIFunc');
    return _LLVMGetNextGlobalIFunc(
      IFunc,
    );
  }

  _dart_LLVMGetNextGlobalIFunc _LLVMGetNextGlobalIFunc;

  /// Decrement a GlobalIFunc iterator to the previous GlobalIFunc.
  ///
  /// Returns NULL if the iterator was already at the beginning and there are
  /// no previous global aliases.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetPreviousGlobalIFunc(
    ffi.Pointer<LLVMOpaqueValue> IFunc,
  ) {
    _LLVMGetPreviousGlobalIFunc ??= _dylib.lookupFunction<
        _c_LLVMGetPreviousGlobalIFunc,
        _dart_LLVMGetPreviousGlobalIFunc>('LLVMGetPreviousGlobalIFunc');
    return _LLVMGetPreviousGlobalIFunc(
      IFunc,
    );
  }

  _dart_LLVMGetPreviousGlobalIFunc _LLVMGetPreviousGlobalIFunc;

  /// Retrieves the resolver function associated with this indirect function, or
  /// NULL if it doesn't not exist.
  ///
  /// @see llvm::GlobalIFunc::getResolver()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetGlobalIFuncResolver(
    ffi.Pointer<LLVMOpaqueValue> IFunc,
  ) {
    _LLVMGetGlobalIFuncResolver ??= _dylib.lookupFunction<
        _c_LLVMGetGlobalIFuncResolver,
        _dart_LLVMGetGlobalIFuncResolver>('LLVMGetGlobalIFuncResolver');
    return _LLVMGetGlobalIFuncResolver(
      IFunc,
    );
  }

  _dart_LLVMGetGlobalIFuncResolver _LLVMGetGlobalIFuncResolver;

  /// Sets the resolver function associated with this indirect function.
  ///
  /// @see llvm::GlobalIFunc::setResolver()
  void LLVMSetGlobalIFuncResolver(
    ffi.Pointer<LLVMOpaqueValue> IFunc,
    ffi.Pointer<LLVMOpaqueValue> Resolver,
  ) {
    _LLVMSetGlobalIFuncResolver ??= _dylib.lookupFunction<
        _c_LLVMSetGlobalIFuncResolver,
        _dart_LLVMSetGlobalIFuncResolver>('LLVMSetGlobalIFuncResolver');
    return _LLVMSetGlobalIFuncResolver(
      IFunc,
      Resolver,
    );
  }

  _dart_LLVMSetGlobalIFuncResolver _LLVMSetGlobalIFuncResolver;

  /// Remove a global indirect function from its parent module and delete it.
  ///
  /// @see llvm::GlobalIFunc::eraseFromParent()
  void LLVMEraseGlobalIFunc(
    ffi.Pointer<LLVMOpaqueValue> IFunc,
  ) {
    _LLVMEraseGlobalIFunc ??= _dylib.lookupFunction<_c_LLVMEraseGlobalIFunc,
        _dart_LLVMEraseGlobalIFunc>('LLVMEraseGlobalIFunc');
    return _LLVMEraseGlobalIFunc(
      IFunc,
    );
  }

  _dart_LLVMEraseGlobalIFunc _LLVMEraseGlobalIFunc;

  /// Remove a global indirect function from its parent module.
  ///
  /// This unlinks the global indirect function from its containing module but
  /// keeps it alive.
  ///
  /// @see llvm::GlobalIFunc::removeFromParent()
  void LLVMRemoveGlobalIFunc(
    ffi.Pointer<LLVMOpaqueValue> IFunc,
  ) {
    _LLVMRemoveGlobalIFunc ??= _dylib.lookupFunction<_c_LLVMRemoveGlobalIFunc,
        _dart_LLVMRemoveGlobalIFunc>('LLVMRemoveGlobalIFunc');
    return _LLVMRemoveGlobalIFunc(
      IFunc,
    );
  }

  _dart_LLVMRemoveGlobalIFunc _LLVMRemoveGlobalIFunc;

  /// Create an MDString value from a given string value.
  ///
  /// The MDString value does not take ownership of the given string, it remains
  /// the responsibility of the caller to free it.
  ///
  /// @see llvm::MDString::get()
  ffi.Pointer<LLVMOpaqueMetadata> LLVMMDStringInContext2(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Int8> Str,
    int SLen,
  ) {
    _LLVMMDStringInContext2 ??= _dylib.lookupFunction<_c_LLVMMDStringInContext2,
        _dart_LLVMMDStringInContext2>('LLVMMDStringInContext2');
    return _LLVMMDStringInContext2(
      C,
      Str,
      SLen,
    );
  }

  _dart_LLVMMDStringInContext2 _LLVMMDStringInContext2;

  /// Create an MDNode value with the given array of operands.
  ///
  /// @see llvm::MDNode::get()
  ffi.Pointer<LLVMOpaqueMetadata> LLVMMDNodeInContext2(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueMetadata>> MDs,
    int Count,
  ) {
    _LLVMMDNodeInContext2 ??= _dylib.lookupFunction<_c_LLVMMDNodeInContext2,
        _dart_LLVMMDNodeInContext2>('LLVMMDNodeInContext2');
    return _LLVMMDNodeInContext2(
      C,
      MDs,
      Count,
    );
  }

  _dart_LLVMMDNodeInContext2 _LLVMMDNodeInContext2;

  /// Obtain a Metadata as a Value.
  ffi.Pointer<LLVMOpaqueValue> LLVMMetadataAsValue(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<LLVMOpaqueMetadata> MD,
  ) {
    _LLVMMetadataAsValue ??= _dylib.lookupFunction<_c_LLVMMetadataAsValue,
        _dart_LLVMMetadataAsValue>('LLVMMetadataAsValue');
    return _LLVMMetadataAsValue(
      C,
      MD,
    );
  }

  _dart_LLVMMetadataAsValue _LLVMMetadataAsValue;

  /// Obtain a Value as a Metadata.
  ffi.Pointer<LLVMOpaqueMetadata> LLVMValueAsMetadata(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMValueAsMetadata ??= _dylib.lookupFunction<_c_LLVMValueAsMetadata,
        _dart_LLVMValueAsMetadata>('LLVMValueAsMetadata');
    return _LLVMValueAsMetadata(
      Val,
    );
  }

  _dart_LLVMValueAsMetadata _LLVMValueAsMetadata;

  /// Obtain the underlying string from a MDString value.
  ///
  /// @param V Instance to obtain string from.
  /// @param Length Memory address which will hold length of returned string.
  /// @return String data in MDString.
  ffi.Pointer<ffi.Int8> LLVMGetMDString(
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<ffi.Uint32> Length,
  ) {
    _LLVMGetMDString ??=
        _dylib.lookupFunction<_c_LLVMGetMDString, _dart_LLVMGetMDString>(
            'LLVMGetMDString');
    return _LLVMGetMDString(
      V,
      Length,
    );
  }

  _dart_LLVMGetMDString _LLVMGetMDString;

  /// Obtain the number of operands from an MDNode value.
  ///
  /// @param V MDNode to get number of operands from.
  /// @return Number of operands of the MDNode.
  int LLVMGetMDNodeNumOperands(
    ffi.Pointer<LLVMOpaqueValue> V,
  ) {
    _LLVMGetMDNodeNumOperands ??= _dylib.lookupFunction<
        _c_LLVMGetMDNodeNumOperands,
        _dart_LLVMGetMDNodeNumOperands>('LLVMGetMDNodeNumOperands');
    return _LLVMGetMDNodeNumOperands(
      V,
    );
  }

  _dart_LLVMGetMDNodeNumOperands _LLVMGetMDNodeNumOperands;

  /// Obtain the given MDNode's operands.
  ///
  /// The passed LLVMValueRef pointer should point to enough memory to hold all of
  /// the operands of the given MDNode (see LLVMGetMDNodeNumOperands) as
  /// LLVMValueRefs. This memory will be populated with the LLVMValueRefs of the
  /// MDNode's operands.
  ///
  /// @param V MDNode to get the operands from.
  /// @param Dest Destination array for operands.
  void LLVMGetMDNodeOperands(
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Dest,
  ) {
    _LLVMGetMDNodeOperands ??= _dylib.lookupFunction<_c_LLVMGetMDNodeOperands,
        _dart_LLVMGetMDNodeOperands>('LLVMGetMDNodeOperands');
    return _LLVMGetMDNodeOperands(
      V,
      Dest,
    );
  }

  _dart_LLVMGetMDNodeOperands _LLVMGetMDNodeOperands;

  /// Deprecated: Use LLVMMDStringInContext2 instead.
  ffi.Pointer<LLVMOpaqueValue> LLVMMDStringInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Int8> Str,
    int SLen,
  ) {
    _LLVMMDStringInContext ??= _dylib.lookupFunction<_c_LLVMMDStringInContext,
        _dart_LLVMMDStringInContext>('LLVMMDStringInContext');
    return _LLVMMDStringInContext(
      C,
      Str,
      SLen,
    );
  }

  _dart_LLVMMDStringInContext _LLVMMDStringInContext;

  /// Deprecated: Use LLVMMDStringInContext2 instead.
  ffi.Pointer<LLVMOpaqueValue> LLVMMDString(
    ffi.Pointer<ffi.Int8> Str,
    int SLen,
  ) {
    _LLVMMDString ??= _dylib
        .lookupFunction<_c_LLVMMDString, _dart_LLVMMDString>('LLVMMDString');
    return _LLVMMDString(
      Str,
      SLen,
    );
  }

  _dart_LLVMMDString _LLVMMDString;

  /// Deprecated: Use LLVMMDNodeInContext2 instead.
  ffi.Pointer<LLVMOpaqueValue> LLVMMDNodeInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Vals,
    int Count,
  ) {
    _LLVMMDNodeInContext ??= _dylib.lookupFunction<_c_LLVMMDNodeInContext,
        _dart_LLVMMDNodeInContext>('LLVMMDNodeInContext');
    return _LLVMMDNodeInContext(
      C,
      Vals,
      Count,
    );
  }

  _dart_LLVMMDNodeInContext _LLVMMDNodeInContext;

  /// Deprecated: Use LLVMMDNodeInContext2 instead.
  ffi.Pointer<LLVMOpaqueValue> LLVMMDNode(
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Vals,
    int Count,
  ) {
    _LLVMMDNode ??=
        _dylib.lookupFunction<_c_LLVMMDNode, _dart_LLVMMDNode>('LLVMMDNode');
    return _LLVMMDNode(
      Vals,
      Count,
    );
  }

  _dart_LLVMMDNode _LLVMMDNode;

  /// Convert a basic block instance to a value type.
  ffi.Pointer<LLVMOpaqueValue> LLVMBasicBlockAsValue(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMBasicBlockAsValue ??= _dylib.lookupFunction<_c_LLVMBasicBlockAsValue,
        _dart_LLVMBasicBlockAsValue>('LLVMBasicBlockAsValue');
    return _LLVMBasicBlockAsValue(
      BB,
    );
  }

  _dart_LLVMBasicBlockAsValue _LLVMBasicBlockAsValue;

  /// Determine whether an LLVMValueRef is itself a basic block.
  int LLVMValueIsBasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMValueIsBasicBlock ??= _dylib.lookupFunction<_c_LLVMValueIsBasicBlock,
        _dart_LLVMValueIsBasicBlock>('LLVMValueIsBasicBlock');
    return _LLVMValueIsBasicBlock(
      Val,
    );
  }

  _dart_LLVMValueIsBasicBlock _LLVMValueIsBasicBlock;

  /// Convert an LLVMValueRef to an LLVMBasicBlockRef instance.
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMValueAsBasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMValueAsBasicBlock ??= _dylib.lookupFunction<_c_LLVMValueAsBasicBlock,
        _dart_LLVMValueAsBasicBlock>('LLVMValueAsBasicBlock');
    return _LLVMValueAsBasicBlock(
      Val,
    );
  }

  _dart_LLVMValueAsBasicBlock _LLVMValueAsBasicBlock;

  /// Obtain the string name of a basic block.
  ffi.Pointer<ffi.Int8> LLVMGetBasicBlockName(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMGetBasicBlockName ??= _dylib.lookupFunction<_c_LLVMGetBasicBlockName,
        _dart_LLVMGetBasicBlockName>('LLVMGetBasicBlockName');
    return _LLVMGetBasicBlockName(
      BB,
    );
  }

  _dart_LLVMGetBasicBlockName _LLVMGetBasicBlockName;

  /// Obtain the function to which a basic block belongs.
  ///
  /// @see llvm::BasicBlock::getParent()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetBasicBlockParent(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMGetBasicBlockParent ??= _dylib.lookupFunction<
        _c_LLVMGetBasicBlockParent,
        _dart_LLVMGetBasicBlockParent>('LLVMGetBasicBlockParent');
    return _LLVMGetBasicBlockParent(
      BB,
    );
  }

  _dart_LLVMGetBasicBlockParent _LLVMGetBasicBlockParent;

  /// Obtain the terminator instruction for a basic block.
  ///
  /// If the basic block does not have a terminator (it is not well-formed
  /// if it doesn't), then NULL is returned.
  ///
  /// The returned LLVMValueRef corresponds to an llvm::Instruction.
  ///
  /// @see llvm::BasicBlock::getTerminator()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetBasicBlockTerminator(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMGetBasicBlockTerminator ??= _dylib.lookupFunction<
        _c_LLVMGetBasicBlockTerminator,
        _dart_LLVMGetBasicBlockTerminator>('LLVMGetBasicBlockTerminator');
    return _LLVMGetBasicBlockTerminator(
      BB,
    );
  }

  _dart_LLVMGetBasicBlockTerminator _LLVMGetBasicBlockTerminator;

  /// Obtain the number of basic blocks in a function.
  ///
  /// @param Fn Function value to operate on.
  int LLVMCountBasicBlocks(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMCountBasicBlocks ??= _dylib.lookupFunction<_c_LLVMCountBasicBlocks,
        _dart_LLVMCountBasicBlocks>('LLVMCountBasicBlocks');
    return _LLVMCountBasicBlocks(
      Fn,
    );
  }

  _dart_LLVMCountBasicBlocks _LLVMCountBasicBlocks;

  /// Obtain all of the basic blocks in a function.
  ///
  /// This operates on a function value. The BasicBlocks parameter is a
  /// pointer to a pre-allocated array of LLVMBasicBlockRef of at least
  /// LLVMCountBasicBlocks() in length. This array is populated with
  /// LLVMBasicBlockRef instances.
  void LLVMGetBasicBlocks(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> BasicBlocks,
  ) {
    _LLVMGetBasicBlocks ??=
        _dylib.lookupFunction<_c_LLVMGetBasicBlocks, _dart_LLVMGetBasicBlocks>(
            'LLVMGetBasicBlocks');
    return _LLVMGetBasicBlocks(
      Fn,
      BasicBlocks,
    );
  }

  _dart_LLVMGetBasicBlocks _LLVMGetBasicBlocks;

  /// Obtain the first basic block in a function.
  ///
  /// The returned basic block can be used as an iterator. You will likely
  /// eventually call into LLVMGetNextBasicBlock() with it.
  ///
  /// @see llvm::Function::begin()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetFirstBasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetFirstBasicBlock ??= _dylib.lookupFunction<_c_LLVMGetFirstBasicBlock,
        _dart_LLVMGetFirstBasicBlock>('LLVMGetFirstBasicBlock');
    return _LLVMGetFirstBasicBlock(
      Fn,
    );
  }

  _dart_LLVMGetFirstBasicBlock _LLVMGetFirstBasicBlock;

  /// Obtain the last basic block in a function.
  ///
  /// @see llvm::Function::end()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetLastBasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetLastBasicBlock ??= _dylib.lookupFunction<_c_LLVMGetLastBasicBlock,
        _dart_LLVMGetLastBasicBlock>('LLVMGetLastBasicBlock');
    return _LLVMGetLastBasicBlock(
      Fn,
    );
  }

  _dart_LLVMGetLastBasicBlock _LLVMGetLastBasicBlock;

  /// Advance a basic block iterator.
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetNextBasicBlock(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMGetNextBasicBlock ??= _dylib.lookupFunction<_c_LLVMGetNextBasicBlock,
        _dart_LLVMGetNextBasicBlock>('LLVMGetNextBasicBlock');
    return _LLVMGetNextBasicBlock(
      BB,
    );
  }

  _dart_LLVMGetNextBasicBlock _LLVMGetNextBasicBlock;

  /// Go backwards in a basic block iterator.
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetPreviousBasicBlock(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMGetPreviousBasicBlock ??= _dylib.lookupFunction<
        _c_LLVMGetPreviousBasicBlock,
        _dart_LLVMGetPreviousBasicBlock>('LLVMGetPreviousBasicBlock');
    return _LLVMGetPreviousBasicBlock(
      BB,
    );
  }

  _dart_LLVMGetPreviousBasicBlock _LLVMGetPreviousBasicBlock;

  /// Obtain the basic block that corresponds to the entry point of a
  /// function.
  ///
  /// @see llvm::Function::getEntryBlock()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetEntryBasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMGetEntryBasicBlock ??= _dylib.lookupFunction<_c_LLVMGetEntryBasicBlock,
        _dart_LLVMGetEntryBasicBlock>('LLVMGetEntryBasicBlock');
    return _LLVMGetEntryBasicBlock(
      Fn,
    );
  }

  _dart_LLVMGetEntryBasicBlock _LLVMGetEntryBasicBlock;

  /// Insert the given basic block after the insertion point of the given builder.
  ///
  /// The insertion point must be valid.
  ///
  /// @see llvm::Function::BasicBlockListType::insertAfter()
  void LLVMInsertExistingBasicBlockAfterInsertBlock(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMInsertExistingBasicBlockAfterInsertBlock ??= _dylib.lookupFunction<
            _c_LLVMInsertExistingBasicBlockAfterInsertBlock,
            _dart_LLVMInsertExistingBasicBlockAfterInsertBlock>(
        'LLVMInsertExistingBasicBlockAfterInsertBlock');
    return _LLVMInsertExistingBasicBlockAfterInsertBlock(
      Builder,
      BB,
    );
  }

  _dart_LLVMInsertExistingBasicBlockAfterInsertBlock
      _LLVMInsertExistingBasicBlockAfterInsertBlock;

  /// Append the given basic block to the basic block list of the given function.
  ///
  /// @see llvm::Function::BasicBlockListType::push_back()
  void LLVMAppendExistingBasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMAppendExistingBasicBlock ??= _dylib.lookupFunction<
        _c_LLVMAppendExistingBasicBlock,
        _dart_LLVMAppendExistingBasicBlock>('LLVMAppendExistingBasicBlock');
    return _LLVMAppendExistingBasicBlock(
      Fn,
      BB,
    );
  }

  _dart_LLVMAppendExistingBasicBlock _LLVMAppendExistingBasicBlock;

  /// Create a new basic block without inserting it into a function.
  ///
  /// @see llvm::BasicBlock::Create()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMCreateBasicBlockInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMCreateBasicBlockInContext ??= _dylib.lookupFunction<
        _c_LLVMCreateBasicBlockInContext,
        _dart_LLVMCreateBasicBlockInContext>('LLVMCreateBasicBlockInContext');
    return _LLVMCreateBasicBlockInContext(
      C,
      Name,
    );
  }

  _dart_LLVMCreateBasicBlockInContext _LLVMCreateBasicBlockInContext;

  /// Append a basic block to the end of a function.
  ///
  /// @see llvm::BasicBlock::Create()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMAppendBasicBlockInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMAppendBasicBlockInContext ??= _dylib.lookupFunction<
        _c_LLVMAppendBasicBlockInContext,
        _dart_LLVMAppendBasicBlockInContext>('LLVMAppendBasicBlockInContext');
    return _LLVMAppendBasicBlockInContext(
      C,
      Fn,
      Name,
    );
  }

  _dart_LLVMAppendBasicBlockInContext _LLVMAppendBasicBlockInContext;

  /// Append a basic block to the end of a function using the global
  /// context.
  ///
  /// @see llvm::BasicBlock::Create()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMAppendBasicBlock(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMAppendBasicBlock ??= _dylib.lookupFunction<_c_LLVMAppendBasicBlock,
        _dart_LLVMAppendBasicBlock>('LLVMAppendBasicBlock');
    return _LLVMAppendBasicBlock(
      Fn,
      Name,
    );
  }

  _dart_LLVMAppendBasicBlock _LLVMAppendBasicBlock;

  /// Insert a basic block in a function before another basic block.
  ///
  /// The function to add to is determined by the function of the
  /// passed basic block.
  ///
  /// @see llvm::BasicBlock::Create()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMInsertBasicBlockInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMInsertBasicBlockInContext ??= _dylib.lookupFunction<
        _c_LLVMInsertBasicBlockInContext,
        _dart_LLVMInsertBasicBlockInContext>('LLVMInsertBasicBlockInContext');
    return _LLVMInsertBasicBlockInContext(
      C,
      BB,
      Name,
    );
  }

  _dart_LLVMInsertBasicBlockInContext _LLVMInsertBasicBlockInContext;

  /// Insert a basic block in a function using the global context.
  ///
  /// @see llvm::BasicBlock::Create()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMInsertBasicBlock(
    ffi.Pointer<LLVMOpaqueBasicBlock> InsertBeforeBB,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMInsertBasicBlock ??= _dylib.lookupFunction<_c_LLVMInsertBasicBlock,
        _dart_LLVMInsertBasicBlock>('LLVMInsertBasicBlock');
    return _LLVMInsertBasicBlock(
      InsertBeforeBB,
      Name,
    );
  }

  _dart_LLVMInsertBasicBlock _LLVMInsertBasicBlock;

  /// Remove a basic block from a function and delete it.
  ///
  /// This deletes the basic block from its containing function and deletes
  /// the basic block itself.
  ///
  /// @see llvm::BasicBlock::eraseFromParent()
  void LLVMDeleteBasicBlock(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMDeleteBasicBlock ??= _dylib.lookupFunction<_c_LLVMDeleteBasicBlock,
        _dart_LLVMDeleteBasicBlock>('LLVMDeleteBasicBlock');
    return _LLVMDeleteBasicBlock(
      BB,
    );
  }

  _dart_LLVMDeleteBasicBlock _LLVMDeleteBasicBlock;

  /// Remove a basic block from a function.
  ///
  /// This deletes the basic block from its containing function but keep
  /// the basic block alive.
  ///
  /// @see llvm::BasicBlock::removeFromParent()
  void LLVMRemoveBasicBlockFromParent(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMRemoveBasicBlockFromParent ??= _dylib.lookupFunction<
        _c_LLVMRemoveBasicBlockFromParent,
        _dart_LLVMRemoveBasicBlockFromParent>('LLVMRemoveBasicBlockFromParent');
    return _LLVMRemoveBasicBlockFromParent(
      BB,
    );
  }

  _dart_LLVMRemoveBasicBlockFromParent _LLVMRemoveBasicBlockFromParent;

  /// Move a basic block to before another one.
  ///
  /// @see llvm::BasicBlock::moveBefore()
  void LLVMMoveBasicBlockBefore(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
    ffi.Pointer<LLVMOpaqueBasicBlock> MovePos,
  ) {
    _LLVMMoveBasicBlockBefore ??= _dylib.lookupFunction<
        _c_LLVMMoveBasicBlockBefore,
        _dart_LLVMMoveBasicBlockBefore>('LLVMMoveBasicBlockBefore');
    return _LLVMMoveBasicBlockBefore(
      BB,
      MovePos,
    );
  }

  _dart_LLVMMoveBasicBlockBefore _LLVMMoveBasicBlockBefore;

  /// Move a basic block to after another one.
  ///
  /// @see llvm::BasicBlock::moveAfter()
  void LLVMMoveBasicBlockAfter(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
    ffi.Pointer<LLVMOpaqueBasicBlock> MovePos,
  ) {
    _LLVMMoveBasicBlockAfter ??= _dylib.lookupFunction<
        _c_LLVMMoveBasicBlockAfter,
        _dart_LLVMMoveBasicBlockAfter>('LLVMMoveBasicBlockAfter');
    return _LLVMMoveBasicBlockAfter(
      BB,
      MovePos,
    );
  }

  _dart_LLVMMoveBasicBlockAfter _LLVMMoveBasicBlockAfter;

  /// Obtain the first instruction in a basic block.
  ///
  /// The returned LLVMValueRef corresponds to a llvm::Instruction
  /// instance.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetFirstInstruction(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMGetFirstInstruction ??= _dylib.lookupFunction<
        _c_LLVMGetFirstInstruction,
        _dart_LLVMGetFirstInstruction>('LLVMGetFirstInstruction');
    return _LLVMGetFirstInstruction(
      BB,
    );
  }

  _dart_LLVMGetFirstInstruction _LLVMGetFirstInstruction;

  /// Obtain the last instruction in a basic block.
  ///
  /// The returned LLVMValueRef corresponds to an LLVM:Instruction.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetLastInstruction(
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMGetLastInstruction ??= _dylib.lookupFunction<_c_LLVMGetLastInstruction,
        _dart_LLVMGetLastInstruction>('LLVMGetLastInstruction');
    return _LLVMGetLastInstruction(
      BB,
    );
  }

  _dart_LLVMGetLastInstruction _LLVMGetLastInstruction;

  /// Determine whether an instruction has any metadata attached.
  int LLVMHasMetadata(
    ffi.Pointer<LLVMOpaqueValue> Val,
  ) {
    _LLVMHasMetadata ??=
        _dylib.lookupFunction<_c_LLVMHasMetadata, _dart_LLVMHasMetadata>(
            'LLVMHasMetadata');
    return _LLVMHasMetadata(
      Val,
    );
  }

  _dart_LLVMHasMetadata _LLVMHasMetadata;

  /// Return metadata associated with an instruction value.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetMetadata(
    ffi.Pointer<LLVMOpaqueValue> Val,
    int KindID,
  ) {
    _LLVMGetMetadata ??=
        _dylib.lookupFunction<_c_LLVMGetMetadata, _dart_LLVMGetMetadata>(
            'LLVMGetMetadata');
    return _LLVMGetMetadata(
      Val,
      KindID,
    );
  }

  _dart_LLVMGetMetadata _LLVMGetMetadata;

  /// Set metadata associated with an instruction value.
  void LLVMSetMetadata(
    ffi.Pointer<LLVMOpaqueValue> Val,
    int KindID,
    ffi.Pointer<LLVMOpaqueValue> Node,
  ) {
    _LLVMSetMetadata ??=
        _dylib.lookupFunction<_c_LLVMSetMetadata, _dart_LLVMSetMetadata>(
            'LLVMSetMetadata');
    return _LLVMSetMetadata(
      Val,
      KindID,
      Node,
    );
  }

  _dart_LLVMSetMetadata _LLVMSetMetadata;

  /// Returns the metadata associated with an instruction value, but filters out
  /// all the debug locations.
  ///
  /// @see llvm::Instruction::getAllMetadataOtherThanDebugLoc()
  ffi.Pointer<LLVMOpaqueValueMetadataEntry>
      LLVMInstructionGetAllMetadataOtherThanDebugLoc(
    ffi.Pointer<LLVMOpaqueValue> Instr,
    ffi.Pointer<ffi.Uint64> NumEntries,
  ) {
    _LLVMInstructionGetAllMetadataOtherThanDebugLoc ??= _dylib.lookupFunction<
            _c_LLVMInstructionGetAllMetadataOtherThanDebugLoc,
            _dart_LLVMInstructionGetAllMetadataOtherThanDebugLoc>(
        'LLVMInstructionGetAllMetadataOtherThanDebugLoc');
    return _LLVMInstructionGetAllMetadataOtherThanDebugLoc(
      Instr,
      NumEntries,
    );
  }

  _dart_LLVMInstructionGetAllMetadataOtherThanDebugLoc
      _LLVMInstructionGetAllMetadataOtherThanDebugLoc;

  /// Obtain the basic block to which an instruction belongs.
  ///
  /// @see llvm::Instruction::getParent()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetInstructionParent(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetInstructionParent ??= _dylib.lookupFunction<
        _c_LLVMGetInstructionParent,
        _dart_LLVMGetInstructionParent>('LLVMGetInstructionParent');
    return _LLVMGetInstructionParent(
      Inst,
    );
  }

  _dart_LLVMGetInstructionParent _LLVMGetInstructionParent;

  /// Obtain the instruction that occurs after the one specified.
  ///
  /// The next instruction will be from the same basic block.
  ///
  /// If this is the last instruction in a basic block, NULL will be
  /// returned.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetNextInstruction(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetNextInstruction ??= _dylib.lookupFunction<_c_LLVMGetNextInstruction,
        _dart_LLVMGetNextInstruction>('LLVMGetNextInstruction');
    return _LLVMGetNextInstruction(
      Inst,
    );
  }

  _dart_LLVMGetNextInstruction _LLVMGetNextInstruction;

  /// Obtain the instruction that occurred before this one.
  ///
  /// If the instruction is the first instruction in a basic block, NULL
  /// will be returned.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetPreviousInstruction(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetPreviousInstruction ??= _dylib.lookupFunction<
        _c_LLVMGetPreviousInstruction,
        _dart_LLVMGetPreviousInstruction>('LLVMGetPreviousInstruction');
    return _LLVMGetPreviousInstruction(
      Inst,
    );
  }

  _dart_LLVMGetPreviousInstruction _LLVMGetPreviousInstruction;

  /// Remove and delete an instruction.
  ///
  /// The instruction specified is removed from its containing building
  /// block but is kept alive.
  ///
  /// @see llvm::Instruction::removeFromParent()
  void LLVMInstructionRemoveFromParent(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMInstructionRemoveFromParent ??= _dylib.lookupFunction<
            _c_LLVMInstructionRemoveFromParent,
            _dart_LLVMInstructionRemoveFromParent>(
        'LLVMInstructionRemoveFromParent');
    return _LLVMInstructionRemoveFromParent(
      Inst,
    );
  }

  _dart_LLVMInstructionRemoveFromParent _LLVMInstructionRemoveFromParent;

  /// Remove and delete an instruction.
  ///
  /// The instruction specified is removed from its containing building
  /// block and then deleted.
  ///
  /// @see llvm::Instruction::eraseFromParent()
  void LLVMInstructionEraseFromParent(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMInstructionEraseFromParent ??= _dylib.lookupFunction<
        _c_LLVMInstructionEraseFromParent,
        _dart_LLVMInstructionEraseFromParent>('LLVMInstructionEraseFromParent');
    return _LLVMInstructionEraseFromParent(
      Inst,
    );
  }

  _dart_LLVMInstructionEraseFromParent _LLVMInstructionEraseFromParent;

  /// Obtain the code opcode for an individual instruction.
  ///
  /// @see llvm::Instruction::getOpCode()
  int LLVMGetInstructionOpcode(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetInstructionOpcode ??= _dylib.lookupFunction<
        _c_LLVMGetInstructionOpcode,
        _dart_LLVMGetInstructionOpcode>('LLVMGetInstructionOpcode');
    return _LLVMGetInstructionOpcode(
      Inst,
    );
  }

  _dart_LLVMGetInstructionOpcode _LLVMGetInstructionOpcode;

  /// Obtain the predicate of an instruction.
  ///
  /// This is only valid for instructions that correspond to llvm::ICmpInst
  /// or llvm::ConstantExpr whose opcode is llvm::Instruction::ICmp.
  ///
  /// @see llvm::ICmpInst::getPredicate()
  int LLVMGetICmpPredicate(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetICmpPredicate ??= _dylib.lookupFunction<_c_LLVMGetICmpPredicate,
        _dart_LLVMGetICmpPredicate>('LLVMGetICmpPredicate');
    return _LLVMGetICmpPredicate(
      Inst,
    );
  }

  _dart_LLVMGetICmpPredicate _LLVMGetICmpPredicate;

  /// Obtain the float predicate of an instruction.
  ///
  /// This is only valid for instructions that correspond to llvm::FCmpInst
  /// or llvm::ConstantExpr whose opcode is llvm::Instruction::FCmp.
  ///
  /// @see llvm::FCmpInst::getPredicate()
  int LLVMGetFCmpPredicate(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetFCmpPredicate ??= _dylib.lookupFunction<_c_LLVMGetFCmpPredicate,
        _dart_LLVMGetFCmpPredicate>('LLVMGetFCmpPredicate');
    return _LLVMGetFCmpPredicate(
      Inst,
    );
  }

  _dart_LLVMGetFCmpPredicate _LLVMGetFCmpPredicate;

  /// Create a copy of 'this' instruction that is identical in all ways
  /// except the following:
  /// * The instruction has no parent
  /// * The instruction has no name
  ///
  /// @see llvm::Instruction::clone()
  ffi.Pointer<LLVMOpaqueValue> LLVMInstructionClone(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMInstructionClone ??= _dylib.lookupFunction<_c_LLVMInstructionClone,
        _dart_LLVMInstructionClone>('LLVMInstructionClone');
    return _LLVMInstructionClone(
      Inst,
    );
  }

  _dart_LLVMInstructionClone _LLVMInstructionClone;

  /// Determine whether an instruction is a terminator. This routine is named to
  /// be compatible with historical functions that did this by querying the
  /// underlying C++ type.
  ///
  /// @see llvm::Instruction::isTerminator()
  ffi.Pointer<LLVMOpaqueValue> LLVMIsATerminatorInst(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMIsATerminatorInst ??= _dylib.lookupFunction<_c_LLVMIsATerminatorInst,
        _dart_LLVMIsATerminatorInst>('LLVMIsATerminatorInst');
    return _LLVMIsATerminatorInst(
      Inst,
    );
  }

  _dart_LLVMIsATerminatorInst _LLVMIsATerminatorInst;

  /// Obtain the argument count for a call instruction.
  ///
  /// This expects an LLVMValueRef that corresponds to a llvm::CallInst,
  /// llvm::InvokeInst, or llvm:FuncletPadInst.
  ///
  /// @see llvm::CallInst::getNumArgOperands()
  /// @see llvm::InvokeInst::getNumArgOperands()
  /// @see llvm::FuncletPadInst::getNumArgOperands()
  int LLVMGetNumArgOperands(
    ffi.Pointer<LLVMOpaqueValue> Instr,
  ) {
    _LLVMGetNumArgOperands ??= _dylib.lookupFunction<_c_LLVMGetNumArgOperands,
        _dart_LLVMGetNumArgOperands>('LLVMGetNumArgOperands');
    return _LLVMGetNumArgOperands(
      Instr,
    );
  }

  _dart_LLVMGetNumArgOperands _LLVMGetNumArgOperands;

  /// Set the calling convention for a call instruction.
  ///
  /// This expects an LLVMValueRef that corresponds to a llvm::CallInst or
  /// llvm::InvokeInst.
  ///
  /// @see llvm::CallInst::setCallingConv()
  /// @see llvm::InvokeInst::setCallingConv()
  void LLVMSetInstructionCallConv(
    ffi.Pointer<LLVMOpaqueValue> Instr,
    int CC,
  ) {
    _LLVMSetInstructionCallConv ??= _dylib.lookupFunction<
        _c_LLVMSetInstructionCallConv,
        _dart_LLVMSetInstructionCallConv>('LLVMSetInstructionCallConv');
    return _LLVMSetInstructionCallConv(
      Instr,
      CC,
    );
  }

  _dart_LLVMSetInstructionCallConv _LLVMSetInstructionCallConv;

  /// Obtain the calling convention for a call instruction.
  ///
  /// This is the opposite of LLVMSetInstructionCallConv(). Reads its
  /// usage.
  ///
  /// @see LLVMSetInstructionCallConv()
  int LLVMGetInstructionCallConv(
    ffi.Pointer<LLVMOpaqueValue> Instr,
  ) {
    _LLVMGetInstructionCallConv ??= _dylib.lookupFunction<
        _c_LLVMGetInstructionCallConv,
        _dart_LLVMGetInstructionCallConv>('LLVMGetInstructionCallConv');
    return _LLVMGetInstructionCallConv(
      Instr,
    );
  }

  _dart_LLVMGetInstructionCallConv _LLVMGetInstructionCallConv;

  void LLVMSetInstrParamAlignment(
    ffi.Pointer<LLVMOpaqueValue> Instr,
    int index,
    int Align,
  ) {
    _LLVMSetInstrParamAlignment ??= _dylib.lookupFunction<
        _c_LLVMSetInstrParamAlignment,
        _dart_LLVMSetInstrParamAlignment>('LLVMSetInstrParamAlignment');
    return _LLVMSetInstrParamAlignment(
      Instr,
      index,
      Align,
    );
  }

  _dart_LLVMSetInstrParamAlignment _LLVMSetInstrParamAlignment;

  void LLVMAddCallSiteAttribute(
    ffi.Pointer<LLVMOpaqueValue> C,
    int Idx,
    ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ) {
    _LLVMAddCallSiteAttribute ??= _dylib.lookupFunction<
        _c_LLVMAddCallSiteAttribute,
        _dart_LLVMAddCallSiteAttribute>('LLVMAddCallSiteAttribute');
    return _LLVMAddCallSiteAttribute(
      C,
      Idx,
      A,
    );
  }

  _dart_LLVMAddCallSiteAttribute _LLVMAddCallSiteAttribute;

  int LLVMGetCallSiteAttributeCount(
    ffi.Pointer<LLVMOpaqueValue> C,
    int Idx,
  ) {
    _LLVMGetCallSiteAttributeCount ??= _dylib.lookupFunction<
        _c_LLVMGetCallSiteAttributeCount,
        _dart_LLVMGetCallSiteAttributeCount>('LLVMGetCallSiteAttributeCount');
    return _LLVMGetCallSiteAttributeCount(
      C,
      Idx,
    );
  }

  _dart_LLVMGetCallSiteAttributeCount _LLVMGetCallSiteAttributeCount;

  void LLVMGetCallSiteAttributes(
    ffi.Pointer<LLVMOpaqueValue> C,
    int Idx,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueAttributeRef>> Attrs,
  ) {
    _LLVMGetCallSiteAttributes ??= _dylib.lookupFunction<
        _c_LLVMGetCallSiteAttributes,
        _dart_LLVMGetCallSiteAttributes>('LLVMGetCallSiteAttributes');
    return _LLVMGetCallSiteAttributes(
      C,
      Idx,
      Attrs,
    );
  }

  _dart_LLVMGetCallSiteAttributes _LLVMGetCallSiteAttributes;

  ffi.Pointer<LLVMOpaqueAttributeRef> LLVMGetCallSiteEnumAttribute(
    ffi.Pointer<LLVMOpaqueValue> C,
    int Idx,
    int KindID,
  ) {
    _LLVMGetCallSiteEnumAttribute ??= _dylib.lookupFunction<
        _c_LLVMGetCallSiteEnumAttribute,
        _dart_LLVMGetCallSiteEnumAttribute>('LLVMGetCallSiteEnumAttribute');
    return _LLVMGetCallSiteEnumAttribute(
      C,
      Idx,
      KindID,
    );
  }

  _dart_LLVMGetCallSiteEnumAttribute _LLVMGetCallSiteEnumAttribute;

  ffi.Pointer<LLVMOpaqueAttributeRef> LLVMGetCallSiteStringAttribute(
    ffi.Pointer<LLVMOpaqueValue> C,
    int Idx,
    ffi.Pointer<ffi.Int8> K,
    int KLen,
  ) {
    _LLVMGetCallSiteStringAttribute ??= _dylib.lookupFunction<
        _c_LLVMGetCallSiteStringAttribute,
        _dart_LLVMGetCallSiteStringAttribute>('LLVMGetCallSiteStringAttribute');
    return _LLVMGetCallSiteStringAttribute(
      C,
      Idx,
      K,
      KLen,
    );
  }

  _dart_LLVMGetCallSiteStringAttribute _LLVMGetCallSiteStringAttribute;

  void LLVMRemoveCallSiteEnumAttribute(
    ffi.Pointer<LLVMOpaqueValue> C,
    int Idx,
    int KindID,
  ) {
    _LLVMRemoveCallSiteEnumAttribute ??= _dylib.lookupFunction<
            _c_LLVMRemoveCallSiteEnumAttribute,
            _dart_LLVMRemoveCallSiteEnumAttribute>(
        'LLVMRemoveCallSiteEnumAttribute');
    return _LLVMRemoveCallSiteEnumAttribute(
      C,
      Idx,
      KindID,
    );
  }

  _dart_LLVMRemoveCallSiteEnumAttribute _LLVMRemoveCallSiteEnumAttribute;

  void LLVMRemoveCallSiteStringAttribute(
    ffi.Pointer<LLVMOpaqueValue> C,
    int Idx,
    ffi.Pointer<ffi.Int8> K,
    int KLen,
  ) {
    _LLVMRemoveCallSiteStringAttribute ??= _dylib.lookupFunction<
            _c_LLVMRemoveCallSiteStringAttribute,
            _dart_LLVMRemoveCallSiteStringAttribute>(
        'LLVMRemoveCallSiteStringAttribute');
    return _LLVMRemoveCallSiteStringAttribute(
      C,
      Idx,
      K,
      KLen,
    );
  }

  _dart_LLVMRemoveCallSiteStringAttribute _LLVMRemoveCallSiteStringAttribute;

  /// Obtain the function type called by this instruction.
  ///
  /// @see llvm::CallBase::getFunctionType()
  ffi.Pointer<LLVMOpaqueType> LLVMGetCalledFunctionType(
    ffi.Pointer<LLVMOpaqueValue> C,
  ) {
    _LLVMGetCalledFunctionType ??= _dylib.lookupFunction<
        _c_LLVMGetCalledFunctionType,
        _dart_LLVMGetCalledFunctionType>('LLVMGetCalledFunctionType');
    return _LLVMGetCalledFunctionType(
      C,
    );
  }

  _dart_LLVMGetCalledFunctionType _LLVMGetCalledFunctionType;

  /// Obtain the pointer to the function invoked by this instruction.
  ///
  /// This expects an LLVMValueRef that corresponds to a llvm::CallInst or
  /// llvm::InvokeInst.
  ///
  /// @see llvm::CallInst::getCalledValue()
  /// @see llvm::InvokeInst::getCalledValue()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetCalledValue(
    ffi.Pointer<LLVMOpaqueValue> Instr,
  ) {
    _LLVMGetCalledValue ??=
        _dylib.lookupFunction<_c_LLVMGetCalledValue, _dart_LLVMGetCalledValue>(
            'LLVMGetCalledValue');
    return _LLVMGetCalledValue(
      Instr,
    );
  }

  _dart_LLVMGetCalledValue _LLVMGetCalledValue;

  /// Obtain whether a call instruction is a tail call.
  ///
  /// This only works on llvm::CallInst instructions.
  ///
  /// @see llvm::CallInst::isTailCall()
  int LLVMIsTailCall(
    ffi.Pointer<LLVMOpaqueValue> CallInst,
  ) {
    _LLVMIsTailCall ??=
        _dylib.lookupFunction<_c_LLVMIsTailCall, _dart_LLVMIsTailCall>(
            'LLVMIsTailCall');
    return _LLVMIsTailCall(
      CallInst,
    );
  }

  _dart_LLVMIsTailCall _LLVMIsTailCall;

  /// Set whether a call instruction is a tail call.
  ///
  /// This only works on llvm::CallInst instructions.
  ///
  /// @see llvm::CallInst::setTailCall()
  void LLVMSetTailCall(
    ffi.Pointer<LLVMOpaqueValue> CallInst,
    int IsTailCall,
  ) {
    _LLVMSetTailCall ??=
        _dylib.lookupFunction<_c_LLVMSetTailCall, _dart_LLVMSetTailCall>(
            'LLVMSetTailCall');
    return _LLVMSetTailCall(
      CallInst,
      IsTailCall,
    );
  }

  _dart_LLVMSetTailCall _LLVMSetTailCall;

  /// Return the normal destination basic block.
  ///
  /// This only works on llvm::InvokeInst instructions.
  ///
  /// @see llvm::InvokeInst::getNormalDest()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetNormalDest(
    ffi.Pointer<LLVMOpaqueValue> InvokeInst,
  ) {
    _LLVMGetNormalDest ??=
        _dylib.lookupFunction<_c_LLVMGetNormalDest, _dart_LLVMGetNormalDest>(
            'LLVMGetNormalDest');
    return _LLVMGetNormalDest(
      InvokeInst,
    );
  }

  _dart_LLVMGetNormalDest _LLVMGetNormalDest;

  /// Return the unwind destination basic block.
  ///
  /// Works on llvm::InvokeInst, llvm::CleanupReturnInst, and
  /// llvm::CatchSwitchInst instructions.
  ///
  /// @see llvm::InvokeInst::getUnwindDest()
  /// @see llvm::CleanupReturnInst::getUnwindDest()
  /// @see llvm::CatchSwitchInst::getUnwindDest()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetUnwindDest(
    ffi.Pointer<LLVMOpaqueValue> InvokeInst,
  ) {
    _LLVMGetUnwindDest ??=
        _dylib.lookupFunction<_c_LLVMGetUnwindDest, _dart_LLVMGetUnwindDest>(
            'LLVMGetUnwindDest');
    return _LLVMGetUnwindDest(
      InvokeInst,
    );
  }

  _dart_LLVMGetUnwindDest _LLVMGetUnwindDest;

  /// Set the normal destination basic block.
  ///
  /// This only works on llvm::InvokeInst instructions.
  ///
  /// @see llvm::InvokeInst::setNormalDest()
  void LLVMSetNormalDest(
    ffi.Pointer<LLVMOpaqueValue> InvokeInst,
    ffi.Pointer<LLVMOpaqueBasicBlock> B,
  ) {
    _LLVMSetNormalDest ??=
        _dylib.lookupFunction<_c_LLVMSetNormalDest, _dart_LLVMSetNormalDest>(
            'LLVMSetNormalDest');
    return _LLVMSetNormalDest(
      InvokeInst,
      B,
    );
  }

  _dart_LLVMSetNormalDest _LLVMSetNormalDest;

  /// Set the unwind destination basic block.
  ///
  /// Works on llvm::InvokeInst, llvm::CleanupReturnInst, and
  /// llvm::CatchSwitchInst instructions.
  ///
  /// @see llvm::InvokeInst::setUnwindDest()
  /// @see llvm::CleanupReturnInst::setUnwindDest()
  /// @see llvm::CatchSwitchInst::setUnwindDest()
  void LLVMSetUnwindDest(
    ffi.Pointer<LLVMOpaqueValue> InvokeInst,
    ffi.Pointer<LLVMOpaqueBasicBlock> B,
  ) {
    _LLVMSetUnwindDest ??=
        _dylib.lookupFunction<_c_LLVMSetUnwindDest, _dart_LLVMSetUnwindDest>(
            'LLVMSetUnwindDest');
    return _LLVMSetUnwindDest(
      InvokeInst,
      B,
    );
  }

  _dart_LLVMSetUnwindDest _LLVMSetUnwindDest;

  /// Return the number of successors that this terminator has.
  ///
  /// @see llvm::Instruction::getNumSuccessors
  int LLVMGetNumSuccessors(
    ffi.Pointer<LLVMOpaqueValue> Term,
  ) {
    _LLVMGetNumSuccessors ??= _dylib.lookupFunction<_c_LLVMGetNumSuccessors,
        _dart_LLVMGetNumSuccessors>('LLVMGetNumSuccessors');
    return _LLVMGetNumSuccessors(
      Term,
    );
  }

  _dart_LLVMGetNumSuccessors _LLVMGetNumSuccessors;

  /// Return the specified successor.
  ///
  /// @see llvm::Instruction::getSuccessor
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetSuccessor(
    ffi.Pointer<LLVMOpaqueValue> Term,
    int i,
  ) {
    _LLVMGetSuccessor ??=
        _dylib.lookupFunction<_c_LLVMGetSuccessor, _dart_LLVMGetSuccessor>(
            'LLVMGetSuccessor');
    return _LLVMGetSuccessor(
      Term,
      i,
    );
  }

  _dart_LLVMGetSuccessor _LLVMGetSuccessor;

  /// Update the specified successor to point at the provided block.
  ///
  /// @see llvm::Instruction::setSuccessor
  void LLVMSetSuccessor(
    ffi.Pointer<LLVMOpaqueValue> Term,
    int i,
    ffi.Pointer<LLVMOpaqueBasicBlock> block,
  ) {
    _LLVMSetSuccessor ??=
        _dylib.lookupFunction<_c_LLVMSetSuccessor, _dart_LLVMSetSuccessor>(
            'LLVMSetSuccessor');
    return _LLVMSetSuccessor(
      Term,
      i,
      block,
    );
  }

  _dart_LLVMSetSuccessor _LLVMSetSuccessor;

  /// Return if a branch is conditional.
  ///
  /// This only works on llvm::BranchInst instructions.
  ///
  /// @see llvm::BranchInst::isConditional
  int LLVMIsConditional(
    ffi.Pointer<LLVMOpaqueValue> Branch,
  ) {
    _LLVMIsConditional ??=
        _dylib.lookupFunction<_c_LLVMIsConditional, _dart_LLVMIsConditional>(
            'LLVMIsConditional');
    return _LLVMIsConditional(
      Branch,
    );
  }

  _dart_LLVMIsConditional _LLVMIsConditional;

  /// Return the condition of a branch instruction.
  ///
  /// This only works on llvm::BranchInst instructions.
  ///
  /// @see llvm::BranchInst::getCondition
  ffi.Pointer<LLVMOpaqueValue> LLVMGetCondition(
    ffi.Pointer<LLVMOpaqueValue> Branch,
  ) {
    _LLVMGetCondition ??=
        _dylib.lookupFunction<_c_LLVMGetCondition, _dart_LLVMGetCondition>(
            'LLVMGetCondition');
    return _LLVMGetCondition(
      Branch,
    );
  }

  _dart_LLVMGetCondition _LLVMGetCondition;

  /// Set the condition of a branch instruction.
  ///
  /// This only works on llvm::BranchInst instructions.
  ///
  /// @see llvm::BranchInst::setCondition
  void LLVMSetCondition(
    ffi.Pointer<LLVMOpaqueValue> Branch,
    ffi.Pointer<LLVMOpaqueValue> Cond,
  ) {
    _LLVMSetCondition ??=
        _dylib.lookupFunction<_c_LLVMSetCondition, _dart_LLVMSetCondition>(
            'LLVMSetCondition');
    return _LLVMSetCondition(
      Branch,
      Cond,
    );
  }

  _dart_LLVMSetCondition _LLVMSetCondition;

  /// Obtain the default destination basic block of a switch instruction.
  ///
  /// This only works on llvm::SwitchInst instructions.
  ///
  /// @see llvm::SwitchInst::getDefaultDest()
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetSwitchDefaultDest(
    ffi.Pointer<LLVMOpaqueValue> SwitchInstr,
  ) {
    _LLVMGetSwitchDefaultDest ??= _dylib.lookupFunction<
        _c_LLVMGetSwitchDefaultDest,
        _dart_LLVMGetSwitchDefaultDest>('LLVMGetSwitchDefaultDest');
    return _LLVMGetSwitchDefaultDest(
      SwitchInstr,
    );
  }

  _dart_LLVMGetSwitchDefaultDest _LLVMGetSwitchDefaultDest;

  /// Obtain the type that is being allocated by the alloca instruction.
  ffi.Pointer<LLVMOpaqueType> LLVMGetAllocatedType(
    ffi.Pointer<LLVMOpaqueValue> Alloca,
  ) {
    _LLVMGetAllocatedType ??= _dylib.lookupFunction<_c_LLVMGetAllocatedType,
        _dart_LLVMGetAllocatedType>('LLVMGetAllocatedType');
    return _LLVMGetAllocatedType(
      Alloca,
    );
  }

  _dart_LLVMGetAllocatedType _LLVMGetAllocatedType;

  /// Check whether the given GEP instruction is inbounds.
  int LLVMIsInBounds(
    ffi.Pointer<LLVMOpaqueValue> GEP,
  ) {
    _LLVMIsInBounds ??=
        _dylib.lookupFunction<_c_LLVMIsInBounds, _dart_LLVMIsInBounds>(
            'LLVMIsInBounds');
    return _LLVMIsInBounds(
      GEP,
    );
  }

  _dart_LLVMIsInBounds _LLVMIsInBounds;

  /// Set the given GEP instruction to be inbounds or not.
  void LLVMSetIsInBounds(
    ffi.Pointer<LLVMOpaqueValue> GEP,
    int InBounds,
  ) {
    _LLVMSetIsInBounds ??=
        _dylib.lookupFunction<_c_LLVMSetIsInBounds, _dart_LLVMSetIsInBounds>(
            'LLVMSetIsInBounds');
    return _LLVMSetIsInBounds(
      GEP,
      InBounds,
    );
  }

  _dart_LLVMSetIsInBounds _LLVMSetIsInBounds;

  /// Add an incoming value to the end of a PHI list.
  void LLVMAddIncoming(
    ffi.Pointer<LLVMOpaqueValue> PhiNode,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> IncomingValues,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> IncomingBlocks,
    int Count,
  ) {
    _LLVMAddIncoming ??=
        _dylib.lookupFunction<_c_LLVMAddIncoming, _dart_LLVMAddIncoming>(
            'LLVMAddIncoming');
    return _LLVMAddIncoming(
      PhiNode,
      IncomingValues,
      IncomingBlocks,
      Count,
    );
  }

  _dart_LLVMAddIncoming _LLVMAddIncoming;

  /// Obtain the number of incoming basic blocks to a PHI node.
  int LLVMCountIncoming(
    ffi.Pointer<LLVMOpaqueValue> PhiNode,
  ) {
    _LLVMCountIncoming ??=
        _dylib.lookupFunction<_c_LLVMCountIncoming, _dart_LLVMCountIncoming>(
            'LLVMCountIncoming');
    return _LLVMCountIncoming(
      PhiNode,
    );
  }

  _dart_LLVMCountIncoming _LLVMCountIncoming;

  /// Obtain an incoming value to a PHI node as an LLVMValueRef.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetIncomingValue(
    ffi.Pointer<LLVMOpaqueValue> PhiNode,
    int Index,
  ) {
    _LLVMGetIncomingValue ??= _dylib.lookupFunction<_c_LLVMGetIncomingValue,
        _dart_LLVMGetIncomingValue>('LLVMGetIncomingValue');
    return _LLVMGetIncomingValue(
      PhiNode,
      Index,
    );
  }

  _dart_LLVMGetIncomingValue _LLVMGetIncomingValue;

  /// Obtain an incoming value to a PHI node as an LLVMBasicBlockRef.
  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetIncomingBlock(
    ffi.Pointer<LLVMOpaqueValue> PhiNode,
    int Index,
  ) {
    _LLVMGetIncomingBlock ??= _dylib.lookupFunction<_c_LLVMGetIncomingBlock,
        _dart_LLVMGetIncomingBlock>('LLVMGetIncomingBlock');
    return _LLVMGetIncomingBlock(
      PhiNode,
      Index,
    );
  }

  _dart_LLVMGetIncomingBlock _LLVMGetIncomingBlock;

  /// Obtain the number of indices.
  /// NB: This also works on GEP.
  int LLVMGetNumIndices(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetNumIndices ??=
        _dylib.lookupFunction<_c_LLVMGetNumIndices, _dart_LLVMGetNumIndices>(
            'LLVMGetNumIndices');
    return _LLVMGetNumIndices(
      Inst,
    );
  }

  _dart_LLVMGetNumIndices _LLVMGetNumIndices;

  /// Obtain the indices as an array.
  ffi.Pointer<ffi.Uint32> LLVMGetIndices(
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMGetIndices ??=
        _dylib.lookupFunction<_c_LLVMGetIndices, _dart_LLVMGetIndices>(
            'LLVMGetIndices');
    return _LLVMGetIndices(
      Inst,
    );
  }

  _dart_LLVMGetIndices _LLVMGetIndices;

  /// @defgroup LLVMCCoreInstructionBuilder Instruction Builders
  ///
  /// An instruction builder represents a point within a basic block and is
  /// the exclusive means of building instructions using the C interface.
  ///
  /// @{
  ffi.Pointer<LLVMOpaqueBuilder> LLVMCreateBuilderInContext(
    ffi.Pointer<LLVMOpaqueContext> C,
  ) {
    _LLVMCreateBuilderInContext ??= _dylib.lookupFunction<
        _c_LLVMCreateBuilderInContext,
        _dart_LLVMCreateBuilderInContext>('LLVMCreateBuilderInContext');
    return _LLVMCreateBuilderInContext(
      C,
    );
  }

  _dart_LLVMCreateBuilderInContext _LLVMCreateBuilderInContext;

  ffi.Pointer<LLVMOpaqueBuilder> LLVMCreateBuilder() {
    _LLVMCreateBuilder ??=
        _dylib.lookupFunction<_c_LLVMCreateBuilder, _dart_LLVMCreateBuilder>(
            'LLVMCreateBuilder');
    return _LLVMCreateBuilder();
  }

  _dart_LLVMCreateBuilder _LLVMCreateBuilder;

  void LLVMPositionBuilder(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueBasicBlock> Block,
    ffi.Pointer<LLVMOpaqueValue> Instr,
  ) {
    _LLVMPositionBuilder ??= _dylib.lookupFunction<_c_LLVMPositionBuilder,
        _dart_LLVMPositionBuilder>('LLVMPositionBuilder');
    return _LLVMPositionBuilder(
      Builder,
      Block,
      Instr,
    );
  }

  _dart_LLVMPositionBuilder _LLVMPositionBuilder;

  void LLVMPositionBuilderBefore(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueValue> Instr,
  ) {
    _LLVMPositionBuilderBefore ??= _dylib.lookupFunction<
        _c_LLVMPositionBuilderBefore,
        _dart_LLVMPositionBuilderBefore>('LLVMPositionBuilderBefore');
    return _LLVMPositionBuilderBefore(
      Builder,
      Instr,
    );
  }

  _dart_LLVMPositionBuilderBefore _LLVMPositionBuilderBefore;

  void LLVMPositionBuilderAtEnd(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueBasicBlock> Block,
  ) {
    _LLVMPositionBuilderAtEnd ??= _dylib.lookupFunction<
        _c_LLVMPositionBuilderAtEnd,
        _dart_LLVMPositionBuilderAtEnd>('LLVMPositionBuilderAtEnd');
    return _LLVMPositionBuilderAtEnd(
      Builder,
      Block,
    );
  }

  _dart_LLVMPositionBuilderAtEnd _LLVMPositionBuilderAtEnd;

  ffi.Pointer<LLVMOpaqueBasicBlock> LLVMGetInsertBlock(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ) {
    _LLVMGetInsertBlock ??=
        _dylib.lookupFunction<_c_LLVMGetInsertBlock, _dart_LLVMGetInsertBlock>(
            'LLVMGetInsertBlock');
    return _LLVMGetInsertBlock(
      Builder,
    );
  }

  _dart_LLVMGetInsertBlock _LLVMGetInsertBlock;

  void LLVMClearInsertionPosition(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ) {
    _LLVMClearInsertionPosition ??= _dylib.lookupFunction<
        _c_LLVMClearInsertionPosition,
        _dart_LLVMClearInsertionPosition>('LLVMClearInsertionPosition');
    return _LLVMClearInsertionPosition(
      Builder,
    );
  }

  _dart_LLVMClearInsertionPosition _LLVMClearInsertionPosition;

  void LLVMInsertIntoBuilder(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueValue> Instr,
  ) {
    _LLVMInsertIntoBuilder ??= _dylib.lookupFunction<_c_LLVMInsertIntoBuilder,
        _dart_LLVMInsertIntoBuilder>('LLVMInsertIntoBuilder');
    return _LLVMInsertIntoBuilder(
      Builder,
      Instr,
    );
  }

  _dart_LLVMInsertIntoBuilder _LLVMInsertIntoBuilder;

  void LLVMInsertIntoBuilderWithName(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueValue> Instr,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMInsertIntoBuilderWithName ??= _dylib.lookupFunction<
        _c_LLVMInsertIntoBuilderWithName,
        _dart_LLVMInsertIntoBuilderWithName>('LLVMInsertIntoBuilderWithName');
    return _LLVMInsertIntoBuilderWithName(
      Builder,
      Instr,
      Name,
    );
  }

  _dart_LLVMInsertIntoBuilderWithName _LLVMInsertIntoBuilderWithName;

  void LLVMDisposeBuilder(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ) {
    _LLVMDisposeBuilder ??=
        _dylib.lookupFunction<_c_LLVMDisposeBuilder, _dart_LLVMDisposeBuilder>(
            'LLVMDisposeBuilder');
    return _LLVMDisposeBuilder(
      Builder,
    );
  }

  _dart_LLVMDisposeBuilder _LLVMDisposeBuilder;

  /// Get location information used by debugging information.
  ///
  /// @see llvm::IRBuilder::getCurrentDebugLocation()
  ffi.Pointer<LLVMOpaqueMetadata> LLVMGetCurrentDebugLocation2(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ) {
    _LLVMGetCurrentDebugLocation2 ??= _dylib.lookupFunction<
        _c_LLVMGetCurrentDebugLocation2,
        _dart_LLVMGetCurrentDebugLocation2>('LLVMGetCurrentDebugLocation2');
    return _LLVMGetCurrentDebugLocation2(
      Builder,
    );
  }

  _dart_LLVMGetCurrentDebugLocation2 _LLVMGetCurrentDebugLocation2;

  /// Set location information used by debugging information.
  ///
  /// To clear the location metadata of the given instruction, pass NULL to \p Loc.
  ///
  /// @see llvm::IRBuilder::SetCurrentDebugLocation()
  void LLVMSetCurrentDebugLocation2(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueMetadata> Loc,
  ) {
    _LLVMSetCurrentDebugLocation2 ??= _dylib.lookupFunction<
        _c_LLVMSetCurrentDebugLocation2,
        _dart_LLVMSetCurrentDebugLocation2>('LLVMSetCurrentDebugLocation2');
    return _LLVMSetCurrentDebugLocation2(
      Builder,
      Loc,
    );
  }

  _dart_LLVMSetCurrentDebugLocation2 _LLVMSetCurrentDebugLocation2;

  /// Attempts to set the debug location for the given instruction using the
  /// current debug location for the given builder.  If the builder has no current
  /// debug location, this function is a no-op.
  ///
  /// @see llvm::IRBuilder::SetInstDebugLocation()
  void LLVMSetInstDebugLocation(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueValue> Inst,
  ) {
    _LLVMSetInstDebugLocation ??= _dylib.lookupFunction<
        _c_LLVMSetInstDebugLocation,
        _dart_LLVMSetInstDebugLocation>('LLVMSetInstDebugLocation');
    return _LLVMSetInstDebugLocation(
      Builder,
      Inst,
    );
  }

  _dart_LLVMSetInstDebugLocation _LLVMSetInstDebugLocation;

  /// Get the dafult floating-point math metadata for a given builder.
  ///
  /// @see llvm::IRBuilder::getDefaultFPMathTag()
  ffi.Pointer<LLVMOpaqueMetadata> LLVMBuilderGetDefaultFPMathTag(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ) {
    _LLVMBuilderGetDefaultFPMathTag ??= _dylib.lookupFunction<
        _c_LLVMBuilderGetDefaultFPMathTag,
        _dart_LLVMBuilderGetDefaultFPMathTag>('LLVMBuilderGetDefaultFPMathTag');
    return _LLVMBuilderGetDefaultFPMathTag(
      Builder,
    );
  }

  _dart_LLVMBuilderGetDefaultFPMathTag _LLVMBuilderGetDefaultFPMathTag;

  /// Set the default floating-point math metadata for the given builder.
  ///
  /// To clear the metadata, pass NULL to \p FPMathTag.
  ///
  /// @see llvm::IRBuilder::setDefaultFPMathTag()
  void LLVMBuilderSetDefaultFPMathTag(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueMetadata> FPMathTag,
  ) {
    _LLVMBuilderSetDefaultFPMathTag ??= _dylib.lookupFunction<
        _c_LLVMBuilderSetDefaultFPMathTag,
        _dart_LLVMBuilderSetDefaultFPMathTag>('LLVMBuilderSetDefaultFPMathTag');
    return _LLVMBuilderSetDefaultFPMathTag(
      Builder,
      FPMathTag,
    );
  }

  _dart_LLVMBuilderSetDefaultFPMathTag _LLVMBuilderSetDefaultFPMathTag;

  /// Deprecated: Passing the NULL location will crash.
  /// Use LLVMGetCurrentDebugLocation2 instead.
  void LLVMSetCurrentDebugLocation(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
    ffi.Pointer<LLVMOpaqueValue> L,
  ) {
    _LLVMSetCurrentDebugLocation ??= _dylib.lookupFunction<
        _c_LLVMSetCurrentDebugLocation,
        _dart_LLVMSetCurrentDebugLocation>('LLVMSetCurrentDebugLocation');
    return _LLVMSetCurrentDebugLocation(
      Builder,
      L,
    );
  }

  _dart_LLVMSetCurrentDebugLocation _LLVMSetCurrentDebugLocation;

  /// Deprecated: Returning the NULL location will crash.
  /// Use LLVMGetCurrentDebugLocation2 instead.
  ffi.Pointer<LLVMOpaqueValue> LLVMGetCurrentDebugLocation(
    ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ) {
    _LLVMGetCurrentDebugLocation ??= _dylib.lookupFunction<
        _c_LLVMGetCurrentDebugLocation,
        _dart_LLVMGetCurrentDebugLocation>('LLVMGetCurrentDebugLocation');
    return _LLVMGetCurrentDebugLocation(
      Builder,
    );
  }

  _dart_LLVMGetCurrentDebugLocation _LLVMGetCurrentDebugLocation;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildRetVoid(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ) {
    _LLVMBuildRetVoid ??=
        _dylib.lookupFunction<_c_LLVMBuildRetVoid, _dart_LLVMBuildRetVoid>(
            'LLVMBuildRetVoid');
    return _LLVMBuildRetVoid(
      arg0,
    );
  }

  _dart_LLVMBuildRetVoid _LLVMBuildRetVoid;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildRet(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> V,
  ) {
    _LLVMBuildRet ??= _dylib
        .lookupFunction<_c_LLVMBuildRet, _dart_LLVMBuildRet>('LLVMBuildRet');
    return _LLVMBuildRet(
      arg0,
      V,
    );
  }

  _dart_LLVMBuildRet _LLVMBuildRet;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAggregateRet(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> RetVals,
    int N,
  ) {
    _LLVMBuildAggregateRet ??= _dylib.lookupFunction<_c_LLVMBuildAggregateRet,
        _dart_LLVMBuildAggregateRet>('LLVMBuildAggregateRet');
    return _LLVMBuildAggregateRet(
      arg0,
      RetVals,
      N,
    );
  }

  _dart_LLVMBuildAggregateRet _LLVMBuildAggregateRet;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildBr(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
  ) {
    _LLVMBuildBr ??=
        _dylib.lookupFunction<_c_LLVMBuildBr, _dart_LLVMBuildBr>('LLVMBuildBr');
    return _LLVMBuildBr(
      arg0,
      Dest,
    );
  }

  _dart_LLVMBuildBr _LLVMBuildBr;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCondBr(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> If,
    ffi.Pointer<LLVMOpaqueBasicBlock> Then,
    ffi.Pointer<LLVMOpaqueBasicBlock> Else,
  ) {
    _LLVMBuildCondBr ??=
        _dylib.lookupFunction<_c_LLVMBuildCondBr, _dart_LLVMBuildCondBr>(
            'LLVMBuildCondBr');
    return _LLVMBuildCondBr(
      arg0,
      If,
      Then,
      Else,
    );
  }

  _dart_LLVMBuildCondBr _LLVMBuildCondBr;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSwitch(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<LLVMOpaqueBasicBlock> Else,
    int NumCases,
  ) {
    _LLVMBuildSwitch ??=
        _dylib.lookupFunction<_c_LLVMBuildSwitch, _dart_LLVMBuildSwitch>(
            'LLVMBuildSwitch');
    return _LLVMBuildSwitch(
      arg0,
      V,
      Else,
      NumCases,
    );
  }

  _dart_LLVMBuildSwitch _LLVMBuildSwitch;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildIndirectBr(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Addr,
    int NumDests,
  ) {
    _LLVMBuildIndirectBr ??= _dylib.lookupFunction<_c_LLVMBuildIndirectBr,
        _dart_LLVMBuildIndirectBr>('LLVMBuildIndirectBr');
    return _LLVMBuildIndirectBr(
      B,
      Addr,
      NumDests,
    );
  }

  _dart_LLVMBuildIndirectBr _LLVMBuildIndirectBr;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildInvoke(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
    int NumArgs,
    ffi.Pointer<LLVMOpaqueBasicBlock> Then,
    ffi.Pointer<LLVMOpaqueBasicBlock> Catch,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildInvoke ??=
        _dylib.lookupFunction<_c_LLVMBuildInvoke, _dart_LLVMBuildInvoke>(
            'LLVMBuildInvoke');
    return _LLVMBuildInvoke(
      arg0,
      Fn,
      Args,
      NumArgs,
      Then,
      Catch,
      Name,
    );
  }

  _dart_LLVMBuildInvoke _LLVMBuildInvoke;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildInvoke2(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
    int NumArgs,
    ffi.Pointer<LLVMOpaqueBasicBlock> Then,
    ffi.Pointer<LLVMOpaqueBasicBlock> Catch,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildInvoke2 ??=
        _dylib.lookupFunction<_c_LLVMBuildInvoke2, _dart_LLVMBuildInvoke2>(
            'LLVMBuildInvoke2');
    return _LLVMBuildInvoke2(
      arg0,
      Ty,
      Fn,
      Args,
      NumArgs,
      Then,
      Catch,
      Name,
    );
  }

  _dart_LLVMBuildInvoke2 _LLVMBuildInvoke2;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildUnreachable(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ) {
    _LLVMBuildUnreachable ??= _dylib.lookupFunction<_c_LLVMBuildUnreachable,
        _dart_LLVMBuildUnreachable>('LLVMBuildUnreachable');
    return _LLVMBuildUnreachable(
      arg0,
    );
  }

  _dart_LLVMBuildUnreachable _LLVMBuildUnreachable;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildResume(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Exn,
  ) {
    _LLVMBuildResume ??=
        _dylib.lookupFunction<_c_LLVMBuildResume, _dart_LLVMBuildResume>(
            'LLVMBuildResume');
    return _LLVMBuildResume(
      B,
      Exn,
    );
  }

  _dart_LLVMBuildResume _LLVMBuildResume;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildLandingPad(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> PersFn,
    int NumClauses,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildLandingPad ??= _dylib.lookupFunction<_c_LLVMBuildLandingPad,
        _dart_LLVMBuildLandingPad>('LLVMBuildLandingPad');
    return _LLVMBuildLandingPad(
      B,
      Ty,
      PersFn,
      NumClauses,
      Name,
    );
  }

  _dart_LLVMBuildLandingPad _LLVMBuildLandingPad;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCleanupRet(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> CatchPad,
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMBuildCleanupRet ??= _dylib.lookupFunction<_c_LLVMBuildCleanupRet,
        _dart_LLVMBuildCleanupRet>('LLVMBuildCleanupRet');
    return _LLVMBuildCleanupRet(
      B,
      CatchPad,
      BB,
    );
  }

  _dart_LLVMBuildCleanupRet _LLVMBuildCleanupRet;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCatchRet(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> CatchPad,
    ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ) {
    _LLVMBuildCatchRet ??=
        _dylib.lookupFunction<_c_LLVMBuildCatchRet, _dart_LLVMBuildCatchRet>(
            'LLVMBuildCatchRet');
    return _LLVMBuildCatchRet(
      B,
      CatchPad,
      BB,
    );
  }

  _dart_LLVMBuildCatchRet _LLVMBuildCatchRet;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCatchPad(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> ParentPad,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
    int NumArgs,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildCatchPad ??=
        _dylib.lookupFunction<_c_LLVMBuildCatchPad, _dart_LLVMBuildCatchPad>(
            'LLVMBuildCatchPad');
    return _LLVMBuildCatchPad(
      B,
      ParentPad,
      Args,
      NumArgs,
      Name,
    );
  }

  _dart_LLVMBuildCatchPad _LLVMBuildCatchPad;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCleanupPad(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> ParentPad,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
    int NumArgs,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildCleanupPad ??= _dylib.lookupFunction<_c_LLVMBuildCleanupPad,
        _dart_LLVMBuildCleanupPad>('LLVMBuildCleanupPad');
    return _LLVMBuildCleanupPad(
      B,
      ParentPad,
      Args,
      NumArgs,
      Name,
    );
  }

  _dart_LLVMBuildCleanupPad _LLVMBuildCleanupPad;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCatchSwitch(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> ParentPad,
    ffi.Pointer<LLVMOpaqueBasicBlock> UnwindBB,
    int NumHandlers,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildCatchSwitch ??= _dylib.lookupFunction<_c_LLVMBuildCatchSwitch,
        _dart_LLVMBuildCatchSwitch>('LLVMBuildCatchSwitch');
    return _LLVMBuildCatchSwitch(
      B,
      ParentPad,
      UnwindBB,
      NumHandlers,
      Name,
    );
  }

  _dart_LLVMBuildCatchSwitch _LLVMBuildCatchSwitch;

  void LLVMAddCase(
    ffi.Pointer<LLVMOpaqueValue> Switch,
    ffi.Pointer<LLVMOpaqueValue> OnVal,
    ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
  ) {
    _LLVMAddCase ??=
        _dylib.lookupFunction<_c_LLVMAddCase, _dart_LLVMAddCase>('LLVMAddCase');
    return _LLVMAddCase(
      Switch,
      OnVal,
      Dest,
    );
  }

  _dart_LLVMAddCase _LLVMAddCase;

  void LLVMAddDestination(
    ffi.Pointer<LLVMOpaqueValue> IndirectBr,
    ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
  ) {
    _LLVMAddDestination ??=
        _dylib.lookupFunction<_c_LLVMAddDestination, _dart_LLVMAddDestination>(
            'LLVMAddDestination');
    return _LLVMAddDestination(
      IndirectBr,
      Dest,
    );
  }

  _dart_LLVMAddDestination _LLVMAddDestination;

  int LLVMGetNumClauses(
    ffi.Pointer<LLVMOpaqueValue> LandingPad,
  ) {
    _LLVMGetNumClauses ??=
        _dylib.lookupFunction<_c_LLVMGetNumClauses, _dart_LLVMGetNumClauses>(
            'LLVMGetNumClauses');
    return _LLVMGetNumClauses(
      LandingPad,
    );
  }

  _dart_LLVMGetNumClauses _LLVMGetNumClauses;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetClause(
    ffi.Pointer<LLVMOpaqueValue> LandingPad,
    int Idx,
  ) {
    _LLVMGetClause ??= _dylib
        .lookupFunction<_c_LLVMGetClause, _dart_LLVMGetClause>('LLVMGetClause');
    return _LLVMGetClause(
      LandingPad,
      Idx,
    );
  }

  _dart_LLVMGetClause _LLVMGetClause;

  void LLVMAddClause(
    ffi.Pointer<LLVMOpaqueValue> LandingPad,
    ffi.Pointer<LLVMOpaqueValue> ClauseVal,
  ) {
    _LLVMAddClause ??= _dylib
        .lookupFunction<_c_LLVMAddClause, _dart_LLVMAddClause>('LLVMAddClause');
    return _LLVMAddClause(
      LandingPad,
      ClauseVal,
    );
  }

  _dart_LLVMAddClause _LLVMAddClause;

  int LLVMIsCleanup(
    ffi.Pointer<LLVMOpaqueValue> LandingPad,
  ) {
    _LLVMIsCleanup ??= _dylib
        .lookupFunction<_c_LLVMIsCleanup, _dart_LLVMIsCleanup>('LLVMIsCleanup');
    return _LLVMIsCleanup(
      LandingPad,
    );
  }

  _dart_LLVMIsCleanup _LLVMIsCleanup;

  void LLVMSetCleanup(
    ffi.Pointer<LLVMOpaqueValue> LandingPad,
    int Val,
  ) {
    _LLVMSetCleanup ??=
        _dylib.lookupFunction<_c_LLVMSetCleanup, _dart_LLVMSetCleanup>(
            'LLVMSetCleanup');
    return _LLVMSetCleanup(
      LandingPad,
      Val,
    );
  }

  _dart_LLVMSetCleanup _LLVMSetCleanup;

  void LLVMAddHandler(
    ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
    ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
  ) {
    _LLVMAddHandler ??=
        _dylib.lookupFunction<_c_LLVMAddHandler, _dart_LLVMAddHandler>(
            'LLVMAddHandler');
    return _LLVMAddHandler(
      CatchSwitch,
      Dest,
    );
  }

  _dart_LLVMAddHandler _LLVMAddHandler;

  int LLVMGetNumHandlers(
    ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
  ) {
    _LLVMGetNumHandlers ??=
        _dylib.lookupFunction<_c_LLVMGetNumHandlers, _dart_LLVMGetNumHandlers>(
            'LLVMGetNumHandlers');
    return _LLVMGetNumHandlers(
      CatchSwitch,
    );
  }

  _dart_LLVMGetNumHandlers _LLVMGetNumHandlers;

  /// Obtain the basic blocks acting as handlers for a catchswitch instruction.
  ///
  /// The Handlers parameter should point to a pre-allocated array of
  /// LLVMBasicBlockRefs at least LLVMGetNumHandlers() large. On return, the
  /// first LLVMGetNumHandlers() entries in the array will be populated
  /// with LLVMBasicBlockRef instances.
  ///
  /// @param CatchSwitch The catchswitch instruction to operate on.
  /// @param Handlers Memory address of an array to be filled with basic blocks.
  void LLVMGetHandlers(
    ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> Handlers,
  ) {
    _LLVMGetHandlers ??=
        _dylib.lookupFunction<_c_LLVMGetHandlers, _dart_LLVMGetHandlers>(
            'LLVMGetHandlers');
    return _LLVMGetHandlers(
      CatchSwitch,
      Handlers,
    );
  }

  _dart_LLVMGetHandlers _LLVMGetHandlers;

  ffi.Pointer<LLVMOpaqueValue> LLVMGetArgOperand(
    ffi.Pointer<LLVMOpaqueValue> Funclet,
    int i,
  ) {
    _LLVMGetArgOperand ??=
        _dylib.lookupFunction<_c_LLVMGetArgOperand, _dart_LLVMGetArgOperand>(
            'LLVMGetArgOperand');
    return _LLVMGetArgOperand(
      Funclet,
      i,
    );
  }

  _dart_LLVMGetArgOperand _LLVMGetArgOperand;

  void LLVMSetArgOperand(
    ffi.Pointer<LLVMOpaqueValue> Funclet,
    int i,
    ffi.Pointer<LLVMOpaqueValue> value,
  ) {
    _LLVMSetArgOperand ??=
        _dylib.lookupFunction<_c_LLVMSetArgOperand, _dart_LLVMSetArgOperand>(
            'LLVMSetArgOperand');
    return _LLVMSetArgOperand(
      Funclet,
      i,
      value,
    );
  }

  _dart_LLVMSetArgOperand _LLVMSetArgOperand;

  /// Get the parent catchswitch instruction of a catchpad instruction.
  ///
  /// This only works on llvm::CatchPadInst instructions.
  ///
  /// @see llvm::CatchPadInst::getCatchSwitch()
  ffi.Pointer<LLVMOpaqueValue> LLVMGetParentCatchSwitch(
    ffi.Pointer<LLVMOpaqueValue> CatchPad,
  ) {
    _LLVMGetParentCatchSwitch ??= _dylib.lookupFunction<
        _c_LLVMGetParentCatchSwitch,
        _dart_LLVMGetParentCatchSwitch>('LLVMGetParentCatchSwitch');
    return _LLVMGetParentCatchSwitch(
      CatchPad,
    );
  }

  _dart_LLVMGetParentCatchSwitch _LLVMGetParentCatchSwitch;

  /// Set the parent catchswitch instruction of a catchpad instruction.
  ///
  /// This only works on llvm::CatchPadInst instructions.
  ///
  /// @see llvm::CatchPadInst::setCatchSwitch()
  void LLVMSetParentCatchSwitch(
    ffi.Pointer<LLVMOpaqueValue> CatchPad,
    ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
  ) {
    _LLVMSetParentCatchSwitch ??= _dylib.lookupFunction<
        _c_LLVMSetParentCatchSwitch,
        _dart_LLVMSetParentCatchSwitch>('LLVMSetParentCatchSwitch');
    return _LLVMSetParentCatchSwitch(
      CatchPad,
      CatchSwitch,
    );
  }

  _dart_LLVMSetParentCatchSwitch _LLVMSetParentCatchSwitch;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAdd(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildAdd ??= _dylib
        .lookupFunction<_c_LLVMBuildAdd, _dart_LLVMBuildAdd>('LLVMBuildAdd');
    return _LLVMBuildAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildAdd _LLVMBuildAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNSWAdd(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNSWAdd ??=
        _dylib.lookupFunction<_c_LLVMBuildNSWAdd, _dart_LLVMBuildNSWAdd>(
            'LLVMBuildNSWAdd');
    return _LLVMBuildNSWAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildNSWAdd _LLVMBuildNSWAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNUWAdd(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNUWAdd ??=
        _dylib.lookupFunction<_c_LLVMBuildNUWAdd, _dart_LLVMBuildNUWAdd>(
            'LLVMBuildNUWAdd');
    return _LLVMBuildNUWAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildNUWAdd _LLVMBuildNUWAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFAdd(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFAdd ??= _dylib
        .lookupFunction<_c_LLVMBuildFAdd, _dart_LLVMBuildFAdd>('LLVMBuildFAdd');
    return _LLVMBuildFAdd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildFAdd _LLVMBuildFAdd;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSub(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildSub ??= _dylib
        .lookupFunction<_c_LLVMBuildSub, _dart_LLVMBuildSub>('LLVMBuildSub');
    return _LLVMBuildSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildSub _LLVMBuildSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNSWSub(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNSWSub ??=
        _dylib.lookupFunction<_c_LLVMBuildNSWSub, _dart_LLVMBuildNSWSub>(
            'LLVMBuildNSWSub');
    return _LLVMBuildNSWSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildNSWSub _LLVMBuildNSWSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNUWSub(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNUWSub ??=
        _dylib.lookupFunction<_c_LLVMBuildNUWSub, _dart_LLVMBuildNUWSub>(
            'LLVMBuildNUWSub');
    return _LLVMBuildNUWSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildNUWSub _LLVMBuildNUWSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFSub(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFSub ??= _dylib
        .lookupFunction<_c_LLVMBuildFSub, _dart_LLVMBuildFSub>('LLVMBuildFSub');
    return _LLVMBuildFSub(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildFSub _LLVMBuildFSub;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildMul(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildMul ??= _dylib
        .lookupFunction<_c_LLVMBuildMul, _dart_LLVMBuildMul>('LLVMBuildMul');
    return _LLVMBuildMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildMul _LLVMBuildMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNSWMul(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNSWMul ??=
        _dylib.lookupFunction<_c_LLVMBuildNSWMul, _dart_LLVMBuildNSWMul>(
            'LLVMBuildNSWMul');
    return _LLVMBuildNSWMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildNSWMul _LLVMBuildNSWMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNUWMul(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNUWMul ??=
        _dylib.lookupFunction<_c_LLVMBuildNUWMul, _dart_LLVMBuildNUWMul>(
            'LLVMBuildNUWMul');
    return _LLVMBuildNUWMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildNUWMul _LLVMBuildNUWMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFMul(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFMul ??= _dylib
        .lookupFunction<_c_LLVMBuildFMul, _dart_LLVMBuildFMul>('LLVMBuildFMul');
    return _LLVMBuildFMul(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildFMul _LLVMBuildFMul;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildUDiv(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildUDiv ??= _dylib
        .lookupFunction<_c_LLVMBuildUDiv, _dart_LLVMBuildUDiv>('LLVMBuildUDiv');
    return _LLVMBuildUDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildUDiv _LLVMBuildUDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildExactUDiv(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildExactUDiv ??=
        _dylib.lookupFunction<_c_LLVMBuildExactUDiv, _dart_LLVMBuildExactUDiv>(
            'LLVMBuildExactUDiv');
    return _LLVMBuildExactUDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildExactUDiv _LLVMBuildExactUDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSDiv(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildSDiv ??= _dylib
        .lookupFunction<_c_LLVMBuildSDiv, _dart_LLVMBuildSDiv>('LLVMBuildSDiv');
    return _LLVMBuildSDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildSDiv _LLVMBuildSDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildExactSDiv(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildExactSDiv ??=
        _dylib.lookupFunction<_c_LLVMBuildExactSDiv, _dart_LLVMBuildExactSDiv>(
            'LLVMBuildExactSDiv');
    return _LLVMBuildExactSDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildExactSDiv _LLVMBuildExactSDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFDiv(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFDiv ??= _dylib
        .lookupFunction<_c_LLVMBuildFDiv, _dart_LLVMBuildFDiv>('LLVMBuildFDiv');
    return _LLVMBuildFDiv(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildFDiv _LLVMBuildFDiv;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildURem(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildURem ??= _dylib
        .lookupFunction<_c_LLVMBuildURem, _dart_LLVMBuildURem>('LLVMBuildURem');
    return _LLVMBuildURem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildURem _LLVMBuildURem;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSRem(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildSRem ??= _dylib
        .lookupFunction<_c_LLVMBuildSRem, _dart_LLVMBuildSRem>('LLVMBuildSRem');
    return _LLVMBuildSRem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildSRem _LLVMBuildSRem;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFRem(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFRem ??= _dylib
        .lookupFunction<_c_LLVMBuildFRem, _dart_LLVMBuildFRem>('LLVMBuildFRem');
    return _LLVMBuildFRem(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildFRem _LLVMBuildFRem;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildShl(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildShl ??= _dylib
        .lookupFunction<_c_LLVMBuildShl, _dart_LLVMBuildShl>('LLVMBuildShl');
    return _LLVMBuildShl(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildShl _LLVMBuildShl;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildLShr(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildLShr ??= _dylib
        .lookupFunction<_c_LLVMBuildLShr, _dart_LLVMBuildLShr>('LLVMBuildLShr');
    return _LLVMBuildLShr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildLShr _LLVMBuildLShr;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAShr(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildAShr ??= _dylib
        .lookupFunction<_c_LLVMBuildAShr, _dart_LLVMBuildAShr>('LLVMBuildAShr');
    return _LLVMBuildAShr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildAShr _LLVMBuildAShr;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAnd(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildAnd ??= _dylib
        .lookupFunction<_c_LLVMBuildAnd, _dart_LLVMBuildAnd>('LLVMBuildAnd');
    return _LLVMBuildAnd(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildAnd _LLVMBuildAnd;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildOr(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildOr ??=
        _dylib.lookupFunction<_c_LLVMBuildOr, _dart_LLVMBuildOr>('LLVMBuildOr');
    return _LLVMBuildOr(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildOr _LLVMBuildOr;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildXor(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildXor ??= _dylib
        .lookupFunction<_c_LLVMBuildXor, _dart_LLVMBuildXor>('LLVMBuildXor');
    return _LLVMBuildXor(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildXor _LLVMBuildXor;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildBinOp(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    int Op,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildBinOp ??=
        _dylib.lookupFunction<_c_LLVMBuildBinOp, _dart_LLVMBuildBinOp>(
            'LLVMBuildBinOp');
    return _LLVMBuildBinOp(
      B,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildBinOp _LLVMBuildBinOp;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNeg(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNeg ??= _dylib
        .lookupFunction<_c_LLVMBuildNeg, _dart_LLVMBuildNeg>('LLVMBuildNeg');
    return _LLVMBuildNeg(
      arg0,
      V,
      Name,
    );
  }

  _dart_LLVMBuildNeg _LLVMBuildNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNSWNeg(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNSWNeg ??=
        _dylib.lookupFunction<_c_LLVMBuildNSWNeg, _dart_LLVMBuildNSWNeg>(
            'LLVMBuildNSWNeg');
    return _LLVMBuildNSWNeg(
      B,
      V,
      Name,
    );
  }

  _dart_LLVMBuildNSWNeg _LLVMBuildNSWNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNUWNeg(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNUWNeg ??=
        _dylib.lookupFunction<_c_LLVMBuildNUWNeg, _dart_LLVMBuildNUWNeg>(
            'LLVMBuildNUWNeg');
    return _LLVMBuildNUWNeg(
      B,
      V,
      Name,
    );
  }

  _dart_LLVMBuildNUWNeg _LLVMBuildNUWNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFNeg(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFNeg ??= _dylib
        .lookupFunction<_c_LLVMBuildFNeg, _dart_LLVMBuildFNeg>('LLVMBuildFNeg');
    return _LLVMBuildFNeg(
      arg0,
      V,
      Name,
    );
  }

  _dart_LLVMBuildFNeg _LLVMBuildFNeg;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildNot(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> V,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildNot ??= _dylib
        .lookupFunction<_c_LLVMBuildNot, _dart_LLVMBuildNot>('LLVMBuildNot');
    return _LLVMBuildNot(
      arg0,
      V,
      Name,
    );
  }

  _dart_LLVMBuildNot _LLVMBuildNot;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildMalloc(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildMalloc ??=
        _dylib.lookupFunction<_c_LLVMBuildMalloc, _dart_LLVMBuildMalloc>(
            'LLVMBuildMalloc');
    return _LLVMBuildMalloc(
      arg0,
      Ty,
      Name,
    );
  }

  _dart_LLVMBuildMalloc _LLVMBuildMalloc;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildArrayMalloc(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildArrayMalloc ??= _dylib.lookupFunction<_c_LLVMBuildArrayMalloc,
        _dart_LLVMBuildArrayMalloc>('LLVMBuildArrayMalloc');
    return _LLVMBuildArrayMalloc(
      arg0,
      Ty,
      Val,
      Name,
    );
  }

  _dart_LLVMBuildArrayMalloc _LLVMBuildArrayMalloc;

  /// Creates and inserts a memset to the specified pointer and the
  /// specified value.
  ///
  /// @see llvm::IRRBuilder::CreateMemSet()
  ffi.Pointer<LLVMOpaqueValue> LLVMBuildMemSet(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Ptr,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueValue> Len,
    int Align,
  ) {
    _LLVMBuildMemSet ??=
        _dylib.lookupFunction<_c_LLVMBuildMemSet, _dart_LLVMBuildMemSet>(
            'LLVMBuildMemSet');
    return _LLVMBuildMemSet(
      B,
      Ptr,
      Val,
      Len,
      Align,
    );
  }

  _dart_LLVMBuildMemSet _LLVMBuildMemSet;

  /// Creates and inserts a memcpy between the specified pointers.
  ///
  /// @see llvm::IRRBuilder::CreateMemCpy()
  ffi.Pointer<LLVMOpaqueValue> LLVMBuildMemCpy(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Dst,
    int DstAlign,
    ffi.Pointer<LLVMOpaqueValue> Src,
    int SrcAlign,
    ffi.Pointer<LLVMOpaqueValue> Size,
  ) {
    _LLVMBuildMemCpy ??=
        _dylib.lookupFunction<_c_LLVMBuildMemCpy, _dart_LLVMBuildMemCpy>(
            'LLVMBuildMemCpy');
    return _LLVMBuildMemCpy(
      B,
      Dst,
      DstAlign,
      Src,
      SrcAlign,
      Size,
    );
  }

  _dart_LLVMBuildMemCpy _LLVMBuildMemCpy;

  /// Creates and inserts a memmove between the specified pointers.
  ///
  /// @see llvm::IRRBuilder::CreateMemMove()
  ffi.Pointer<LLVMOpaqueValue> LLVMBuildMemMove(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Dst,
    int DstAlign,
    ffi.Pointer<LLVMOpaqueValue> Src,
    int SrcAlign,
    ffi.Pointer<LLVMOpaqueValue> Size,
  ) {
    _LLVMBuildMemMove ??=
        _dylib.lookupFunction<_c_LLVMBuildMemMove, _dart_LLVMBuildMemMove>(
            'LLVMBuildMemMove');
    return _LLVMBuildMemMove(
      B,
      Dst,
      DstAlign,
      Src,
      SrcAlign,
      Size,
    );
  }

  _dart_LLVMBuildMemMove _LLVMBuildMemMove;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAlloca(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildAlloca ??=
        _dylib.lookupFunction<_c_LLVMBuildAlloca, _dart_LLVMBuildAlloca>(
            'LLVMBuildAlloca');
    return _LLVMBuildAlloca(
      arg0,
      Ty,
      Name,
    );
  }

  _dart_LLVMBuildAlloca _LLVMBuildAlloca;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildArrayAlloca(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildArrayAlloca ??= _dylib.lookupFunction<_c_LLVMBuildArrayAlloca,
        _dart_LLVMBuildArrayAlloca>('LLVMBuildArrayAlloca');
    return _LLVMBuildArrayAlloca(
      arg0,
      Ty,
      Val,
      Name,
    );
  }

  _dart_LLVMBuildArrayAlloca _LLVMBuildArrayAlloca;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFree(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> PointerVal,
  ) {
    _LLVMBuildFree ??= _dylib
        .lookupFunction<_c_LLVMBuildFree, _dart_LLVMBuildFree>('LLVMBuildFree');
    return _LLVMBuildFree(
      arg0,
      PointerVal,
    );
  }

  _dart_LLVMBuildFree _LLVMBuildFree;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildLoad(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> PointerVal,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildLoad ??= _dylib
        .lookupFunction<_c_LLVMBuildLoad, _dart_LLVMBuildLoad>('LLVMBuildLoad');
    return _LLVMBuildLoad(
      arg0,
      PointerVal,
      Name,
    );
  }

  _dart_LLVMBuildLoad _LLVMBuildLoad;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildLoad2(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> PointerVal,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildLoad2 ??=
        _dylib.lookupFunction<_c_LLVMBuildLoad2, _dart_LLVMBuildLoad2>(
            'LLVMBuildLoad2');
    return _LLVMBuildLoad2(
      arg0,
      Ty,
      PointerVal,
      Name,
    );
  }

  _dart_LLVMBuildLoad2 _LLVMBuildLoad2;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildStore(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueValue> Ptr,
  ) {
    _LLVMBuildStore ??=
        _dylib.lookupFunction<_c_LLVMBuildStore, _dart_LLVMBuildStore>(
            'LLVMBuildStore');
    return _LLVMBuildStore(
      arg0,
      Val,
      Ptr,
    );
  }

  _dart_LLVMBuildStore _LLVMBuildStore;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildGEP(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Pointer,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildGEP ??= _dylib
        .lookupFunction<_c_LLVMBuildGEP, _dart_LLVMBuildGEP>('LLVMBuildGEP');
    return _LLVMBuildGEP(
      B,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  _dart_LLVMBuildGEP _LLVMBuildGEP;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildInBoundsGEP(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Pointer,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildInBoundsGEP ??= _dylib.lookupFunction<_c_LLVMBuildInBoundsGEP,
        _dart_LLVMBuildInBoundsGEP>('LLVMBuildInBoundsGEP');
    return _LLVMBuildInBoundsGEP(
      B,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  _dart_LLVMBuildInBoundsGEP _LLVMBuildInBoundsGEP;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildStructGEP(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Pointer,
    int Idx,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildStructGEP ??=
        _dylib.lookupFunction<_c_LLVMBuildStructGEP, _dart_LLVMBuildStructGEP>(
            'LLVMBuildStructGEP');
    return _LLVMBuildStructGEP(
      B,
      Pointer,
      Idx,
      Name,
    );
  }

  _dart_LLVMBuildStructGEP _LLVMBuildStructGEP;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildGEP2(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> Pointer,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildGEP2 ??= _dylib
        .lookupFunction<_c_LLVMBuildGEP2, _dart_LLVMBuildGEP2>('LLVMBuildGEP2');
    return _LLVMBuildGEP2(
      B,
      Ty,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  _dart_LLVMBuildGEP2 _LLVMBuildGEP2;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildInBoundsGEP2(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> Pointer,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
    int NumIndices,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildInBoundsGEP2 ??= _dylib.lookupFunction<_c_LLVMBuildInBoundsGEP2,
        _dart_LLVMBuildInBoundsGEP2>('LLVMBuildInBoundsGEP2');
    return _LLVMBuildInBoundsGEP2(
      B,
      Ty,
      Pointer,
      Indices,
      NumIndices,
      Name,
    );
  }

  _dart_LLVMBuildInBoundsGEP2 _LLVMBuildInBoundsGEP2;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildStructGEP2(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<LLVMOpaqueValue> Pointer,
    int Idx,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildStructGEP2 ??= _dylib.lookupFunction<_c_LLVMBuildStructGEP2,
        _dart_LLVMBuildStructGEP2>('LLVMBuildStructGEP2');
    return _LLVMBuildStructGEP2(
      B,
      Ty,
      Pointer,
      Idx,
      Name,
    );
  }

  _dart_LLVMBuildStructGEP2 _LLVMBuildStructGEP2;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildGlobalString(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<ffi.Int8> Str,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildGlobalString ??= _dylib.lookupFunction<_c_LLVMBuildGlobalString,
        _dart_LLVMBuildGlobalString>('LLVMBuildGlobalString');
    return _LLVMBuildGlobalString(
      B,
      Str,
      Name,
    );
  }

  _dart_LLVMBuildGlobalString _LLVMBuildGlobalString;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildGlobalStringPtr(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<ffi.Int8> Str,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildGlobalStringPtr ??= _dylib.lookupFunction<
        _c_LLVMBuildGlobalStringPtr,
        _dart_LLVMBuildGlobalStringPtr>('LLVMBuildGlobalStringPtr');
    return _LLVMBuildGlobalStringPtr(
      B,
      Str,
      Name,
    );
  }

  _dart_LLVMBuildGlobalStringPtr _LLVMBuildGlobalStringPtr;

  int LLVMGetVolatile(
    ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
  ) {
    _LLVMGetVolatile ??=
        _dylib.lookupFunction<_c_LLVMGetVolatile, _dart_LLVMGetVolatile>(
            'LLVMGetVolatile');
    return _LLVMGetVolatile(
      MemoryAccessInst,
    );
  }

  _dart_LLVMGetVolatile _LLVMGetVolatile;

  void LLVMSetVolatile(
    ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
    int IsVolatile,
  ) {
    _LLVMSetVolatile ??=
        _dylib.lookupFunction<_c_LLVMSetVolatile, _dart_LLVMSetVolatile>(
            'LLVMSetVolatile');
    return _LLVMSetVolatile(
      MemoryAccessInst,
      IsVolatile,
    );
  }

  _dart_LLVMSetVolatile _LLVMSetVolatile;

  int LLVMGetWeak(
    ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  ) {
    _LLVMGetWeak ??=
        _dylib.lookupFunction<_c_LLVMGetWeak, _dart_LLVMGetWeak>('LLVMGetWeak');
    return _LLVMGetWeak(
      CmpXchgInst,
    );
  }

  _dart_LLVMGetWeak _LLVMGetWeak;

  void LLVMSetWeak(
    ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
    int IsWeak,
  ) {
    _LLVMSetWeak ??=
        _dylib.lookupFunction<_c_LLVMSetWeak, _dart_LLVMSetWeak>('LLVMSetWeak');
    return _LLVMSetWeak(
      CmpXchgInst,
      IsWeak,
    );
  }

  _dart_LLVMSetWeak _LLVMSetWeak;

  int LLVMGetOrdering(
    ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
  ) {
    _LLVMGetOrdering ??=
        _dylib.lookupFunction<_c_LLVMGetOrdering, _dart_LLVMGetOrdering>(
            'LLVMGetOrdering');
    return _LLVMGetOrdering(
      MemoryAccessInst,
    );
  }

  _dart_LLVMGetOrdering _LLVMGetOrdering;

  void LLVMSetOrdering(
    ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
    int Ordering,
  ) {
    _LLVMSetOrdering ??=
        _dylib.lookupFunction<_c_LLVMSetOrdering, _dart_LLVMSetOrdering>(
            'LLVMSetOrdering');
    return _LLVMSetOrdering(
      MemoryAccessInst,
      Ordering,
    );
  }

  _dart_LLVMSetOrdering _LLVMSetOrdering;

  int LLVMGetAtomicRMWBinOp(
    ffi.Pointer<LLVMOpaqueValue> AtomicRMWInst,
  ) {
    _LLVMGetAtomicRMWBinOp ??= _dylib.lookupFunction<_c_LLVMGetAtomicRMWBinOp,
        _dart_LLVMGetAtomicRMWBinOp>('LLVMGetAtomicRMWBinOp');
    return _LLVMGetAtomicRMWBinOp(
      AtomicRMWInst,
    );
  }

  _dart_LLVMGetAtomicRMWBinOp _LLVMGetAtomicRMWBinOp;

  void LLVMSetAtomicRMWBinOp(
    ffi.Pointer<LLVMOpaqueValue> AtomicRMWInst,
    int BinOp,
  ) {
    _LLVMSetAtomicRMWBinOp ??= _dylib.lookupFunction<_c_LLVMSetAtomicRMWBinOp,
        _dart_LLVMSetAtomicRMWBinOp>('LLVMSetAtomicRMWBinOp');
    return _LLVMSetAtomicRMWBinOp(
      AtomicRMWInst,
      BinOp,
    );
  }

  _dart_LLVMSetAtomicRMWBinOp _LLVMSetAtomicRMWBinOp;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildTrunc(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildTrunc ??=
        _dylib.lookupFunction<_c_LLVMBuildTrunc, _dart_LLVMBuildTrunc>(
            'LLVMBuildTrunc');
    return _LLVMBuildTrunc(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildTrunc _LLVMBuildTrunc;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildZExt(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildZExt ??= _dylib
        .lookupFunction<_c_LLVMBuildZExt, _dart_LLVMBuildZExt>('LLVMBuildZExt');
    return _LLVMBuildZExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildZExt _LLVMBuildZExt;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSExt(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildSExt ??= _dylib
        .lookupFunction<_c_LLVMBuildSExt, _dart_LLVMBuildSExt>('LLVMBuildSExt');
    return _LLVMBuildSExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildSExt _LLVMBuildSExt;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFPToUI(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFPToUI ??=
        _dylib.lookupFunction<_c_LLVMBuildFPToUI, _dart_LLVMBuildFPToUI>(
            'LLVMBuildFPToUI');
    return _LLVMBuildFPToUI(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildFPToUI _LLVMBuildFPToUI;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFPToSI(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFPToSI ??=
        _dylib.lookupFunction<_c_LLVMBuildFPToSI, _dart_LLVMBuildFPToSI>(
            'LLVMBuildFPToSI');
    return _LLVMBuildFPToSI(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildFPToSI _LLVMBuildFPToSI;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildUIToFP(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildUIToFP ??=
        _dylib.lookupFunction<_c_LLVMBuildUIToFP, _dart_LLVMBuildUIToFP>(
            'LLVMBuildUIToFP');
    return _LLVMBuildUIToFP(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildUIToFP _LLVMBuildUIToFP;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSIToFP(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildSIToFP ??=
        _dylib.lookupFunction<_c_LLVMBuildSIToFP, _dart_LLVMBuildSIToFP>(
            'LLVMBuildSIToFP');
    return _LLVMBuildSIToFP(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildSIToFP _LLVMBuildSIToFP;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFPTrunc(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFPTrunc ??=
        _dylib.lookupFunction<_c_LLVMBuildFPTrunc, _dart_LLVMBuildFPTrunc>(
            'LLVMBuildFPTrunc');
    return _LLVMBuildFPTrunc(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildFPTrunc _LLVMBuildFPTrunc;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFPExt(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFPExt ??=
        _dylib.lookupFunction<_c_LLVMBuildFPExt, _dart_LLVMBuildFPExt>(
            'LLVMBuildFPExt');
    return _LLVMBuildFPExt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildFPExt _LLVMBuildFPExt;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildPtrToInt(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildPtrToInt ??=
        _dylib.lookupFunction<_c_LLVMBuildPtrToInt, _dart_LLVMBuildPtrToInt>(
            'LLVMBuildPtrToInt');
    return _LLVMBuildPtrToInt(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildPtrToInt _LLVMBuildPtrToInt;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildIntToPtr(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildIntToPtr ??=
        _dylib.lookupFunction<_c_LLVMBuildIntToPtr, _dart_LLVMBuildIntToPtr>(
            'LLVMBuildIntToPtr');
    return _LLVMBuildIntToPtr(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildIntToPtr _LLVMBuildIntToPtr;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildBitCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildBitCast ??=
        _dylib.lookupFunction<_c_LLVMBuildBitCast, _dart_LLVMBuildBitCast>(
            'LLVMBuildBitCast');
    return _LLVMBuildBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildBitCast _LLVMBuildBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAddrSpaceCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildAddrSpaceCast ??= _dylib.lookupFunction<_c_LLVMBuildAddrSpaceCast,
        _dart_LLVMBuildAddrSpaceCast>('LLVMBuildAddrSpaceCast');
    return _LLVMBuildAddrSpaceCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildAddrSpaceCast _LLVMBuildAddrSpaceCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildZExtOrBitCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildZExtOrBitCast ??= _dylib.lookupFunction<_c_LLVMBuildZExtOrBitCast,
        _dart_LLVMBuildZExtOrBitCast>('LLVMBuildZExtOrBitCast');
    return _LLVMBuildZExtOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildZExtOrBitCast _LLVMBuildZExtOrBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSExtOrBitCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildSExtOrBitCast ??= _dylib.lookupFunction<_c_LLVMBuildSExtOrBitCast,
        _dart_LLVMBuildSExtOrBitCast>('LLVMBuildSExtOrBitCast');
    return _LLVMBuildSExtOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildSExtOrBitCast _LLVMBuildSExtOrBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildTruncOrBitCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildTruncOrBitCast ??= _dylib.lookupFunction<
        _c_LLVMBuildTruncOrBitCast,
        _dart_LLVMBuildTruncOrBitCast>('LLVMBuildTruncOrBitCast');
    return _LLVMBuildTruncOrBitCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildTruncOrBitCast _LLVMBuildTruncOrBitCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCast(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    int Op,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildCast ??= _dylib
        .lookupFunction<_c_LLVMBuildCast, _dart_LLVMBuildCast>('LLVMBuildCast');
    return _LLVMBuildCast(
      B,
      Op,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildCast _LLVMBuildCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildPointerCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildPointerCast ??= _dylib.lookupFunction<_c_LLVMBuildPointerCast,
        _dart_LLVMBuildPointerCast>('LLVMBuildPointerCast');
    return _LLVMBuildPointerCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildPointerCast _LLVMBuildPointerCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildIntCast2(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    int IsSigned,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildIntCast2 ??=
        _dylib.lookupFunction<_c_LLVMBuildIntCast2, _dart_LLVMBuildIntCast2>(
            'LLVMBuildIntCast2');
    return _LLVMBuildIntCast2(
      arg0,
      Val,
      DestTy,
      IsSigned,
      Name,
    );
  }

  _dart_LLVMBuildIntCast2 _LLVMBuildIntCast2;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFPCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFPCast ??=
        _dylib.lookupFunction<_c_LLVMBuildFPCast, _dart_LLVMBuildFPCast>(
            'LLVMBuildFPCast');
    return _LLVMBuildFPCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildFPCast _LLVMBuildFPCast;

  /// Deprecated: This cast is always signed. Use LLVMBuildIntCast2 instead.
  ffi.Pointer<LLVMOpaqueValue> LLVMBuildIntCast(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<LLVMOpaqueType> DestTy,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildIntCast ??=
        _dylib.lookupFunction<_c_LLVMBuildIntCast, _dart_LLVMBuildIntCast>(
            'LLVMBuildIntCast');
    return _LLVMBuildIntCast(
      arg0,
      Val,
      DestTy,
      Name,
    );
  }

  _dart_LLVMBuildIntCast _LLVMBuildIntCast;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildICmp(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    int Op,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildICmp ??= _dylib
        .lookupFunction<_c_LLVMBuildICmp, _dart_LLVMBuildICmp>('LLVMBuildICmp');
    return _LLVMBuildICmp(
      arg0,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildICmp _LLVMBuildICmp;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFCmp(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    int Op,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFCmp ??= _dylib
        .lookupFunction<_c_LLVMBuildFCmp, _dart_LLVMBuildFCmp>('LLVMBuildFCmp');
    return _LLVMBuildFCmp(
      arg0,
      Op,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildFCmp _LLVMBuildFCmp;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildPhi(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildPhi ??= _dylib
        .lookupFunction<_c_LLVMBuildPhi, _dart_LLVMBuildPhi>('LLVMBuildPhi');
    return _LLVMBuildPhi(
      arg0,
      Ty,
      Name,
    );
  }

  _dart_LLVMBuildPhi _LLVMBuildPhi;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCall(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
    int NumArgs,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildCall ??= _dylib
        .lookupFunction<_c_LLVMBuildCall, _dart_LLVMBuildCall>('LLVMBuildCall');
    return _LLVMBuildCall(
      arg0,
      Fn,
      Args,
      NumArgs,
      Name,
    );
  }

  _dart_LLVMBuildCall _LLVMBuildCall;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildCall2(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueType> arg1,
    ffi.Pointer<LLVMOpaqueValue> Fn,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
    int NumArgs,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildCall2 ??=
        _dylib.lookupFunction<_c_LLVMBuildCall2, _dart_LLVMBuildCall2>(
            'LLVMBuildCall2');
    return _LLVMBuildCall2(
      arg0,
      arg1,
      Fn,
      Args,
      NumArgs,
      Name,
    );
  }

  _dart_LLVMBuildCall2 _LLVMBuildCall2;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildSelect(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> If,
    ffi.Pointer<LLVMOpaqueValue> Then,
    ffi.Pointer<LLVMOpaqueValue> Else,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildSelect ??=
        _dylib.lookupFunction<_c_LLVMBuildSelect, _dart_LLVMBuildSelect>(
            'LLVMBuildSelect');
    return _LLVMBuildSelect(
      arg0,
      If,
      Then,
      Else,
      Name,
    );
  }

  _dart_LLVMBuildSelect _LLVMBuildSelect;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildVAArg(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> List,
    ffi.Pointer<LLVMOpaqueType> Ty,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildVAArg ??=
        _dylib.lookupFunction<_c_LLVMBuildVAArg, _dart_LLVMBuildVAArg>(
            'LLVMBuildVAArg');
    return _LLVMBuildVAArg(
      arg0,
      List,
      Ty,
      Name,
    );
  }

  _dart_LLVMBuildVAArg _LLVMBuildVAArg;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildExtractElement(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> VecVal,
    ffi.Pointer<LLVMOpaqueValue> Index,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildExtractElement ??= _dylib.lookupFunction<
        _c_LLVMBuildExtractElement,
        _dart_LLVMBuildExtractElement>('LLVMBuildExtractElement');
    return _LLVMBuildExtractElement(
      arg0,
      VecVal,
      Index,
      Name,
    );
  }

  _dart_LLVMBuildExtractElement _LLVMBuildExtractElement;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildInsertElement(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> VecVal,
    ffi.Pointer<LLVMOpaqueValue> EltVal,
    ffi.Pointer<LLVMOpaqueValue> Index,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildInsertElement ??= _dylib.lookupFunction<_c_LLVMBuildInsertElement,
        _dart_LLVMBuildInsertElement>('LLVMBuildInsertElement');
    return _LLVMBuildInsertElement(
      arg0,
      VecVal,
      EltVal,
      Index,
      Name,
    );
  }

  _dart_LLVMBuildInsertElement _LLVMBuildInsertElement;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildShuffleVector(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> V1,
    ffi.Pointer<LLVMOpaqueValue> V2,
    ffi.Pointer<LLVMOpaqueValue> Mask,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildShuffleVector ??= _dylib.lookupFunction<_c_LLVMBuildShuffleVector,
        _dart_LLVMBuildShuffleVector>('LLVMBuildShuffleVector');
    return _LLVMBuildShuffleVector(
      arg0,
      V1,
      V2,
      Mask,
      Name,
    );
  }

  _dart_LLVMBuildShuffleVector _LLVMBuildShuffleVector;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildExtractValue(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> AggVal,
    int Index,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildExtractValue ??= _dylib.lookupFunction<_c_LLVMBuildExtractValue,
        _dart_LLVMBuildExtractValue>('LLVMBuildExtractValue');
    return _LLVMBuildExtractValue(
      arg0,
      AggVal,
      Index,
      Name,
    );
  }

  _dart_LLVMBuildExtractValue _LLVMBuildExtractValue;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildInsertValue(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> AggVal,
    ffi.Pointer<LLVMOpaqueValue> EltVal,
    int Index,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildInsertValue ??= _dylib.lookupFunction<_c_LLVMBuildInsertValue,
        _dart_LLVMBuildInsertValue>('LLVMBuildInsertValue');
    return _LLVMBuildInsertValue(
      arg0,
      AggVal,
      EltVal,
      Index,
      Name,
    );
  }

  _dart_LLVMBuildInsertValue _LLVMBuildInsertValue;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFreeze(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFreeze ??=
        _dylib.lookupFunction<_c_LLVMBuildFreeze, _dart_LLVMBuildFreeze>(
            'LLVMBuildFreeze');
    return _LLVMBuildFreeze(
      arg0,
      Val,
      Name,
    );
  }

  _dart_LLVMBuildFreeze _LLVMBuildFreeze;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildIsNull(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildIsNull ??=
        _dylib.lookupFunction<_c_LLVMBuildIsNull, _dart_LLVMBuildIsNull>(
            'LLVMBuildIsNull');
    return _LLVMBuildIsNull(
      arg0,
      Val,
      Name,
    );
  }

  _dart_LLVMBuildIsNull _LLVMBuildIsNull;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildIsNotNull(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> Val,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildIsNotNull ??=
        _dylib.lookupFunction<_c_LLVMBuildIsNotNull, _dart_LLVMBuildIsNotNull>(
            'LLVMBuildIsNotNull');
    return _LLVMBuildIsNotNull(
      arg0,
      Val,
      Name,
    );
  }

  _dart_LLVMBuildIsNotNull _LLVMBuildIsNotNull;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildPtrDiff(
    ffi.Pointer<LLVMOpaqueBuilder> arg0,
    ffi.Pointer<LLVMOpaqueValue> LHS,
    ffi.Pointer<LLVMOpaqueValue> RHS,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildPtrDiff ??=
        _dylib.lookupFunction<_c_LLVMBuildPtrDiff, _dart_LLVMBuildPtrDiff>(
            'LLVMBuildPtrDiff');
    return _LLVMBuildPtrDiff(
      arg0,
      LHS,
      RHS,
      Name,
    );
  }

  _dart_LLVMBuildPtrDiff _LLVMBuildPtrDiff;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildFence(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    int ordering,
    int singleThread,
    ffi.Pointer<ffi.Int8> Name,
  ) {
    _LLVMBuildFence ??=
        _dylib.lookupFunction<_c_LLVMBuildFence, _dart_LLVMBuildFence>(
            'LLVMBuildFence');
    return _LLVMBuildFence(
      B,
      ordering,
      singleThread,
      Name,
    );
  }

  _dart_LLVMBuildFence _LLVMBuildFence;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAtomicRMW(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    int op,
    ffi.Pointer<LLVMOpaqueValue> PTR,
    ffi.Pointer<LLVMOpaqueValue> Val,
    int ordering,
    int singleThread,
  ) {
    _LLVMBuildAtomicRMW ??=
        _dylib.lookupFunction<_c_LLVMBuildAtomicRMW, _dart_LLVMBuildAtomicRMW>(
            'LLVMBuildAtomicRMW');
    return _LLVMBuildAtomicRMW(
      B,
      op,
      PTR,
      Val,
      ordering,
      singleThread,
    );
  }

  _dart_LLVMBuildAtomicRMW _LLVMBuildAtomicRMW;

  ffi.Pointer<LLVMOpaqueValue> LLVMBuildAtomicCmpXchg(
    ffi.Pointer<LLVMOpaqueBuilder> B,
    ffi.Pointer<LLVMOpaqueValue> Ptr,
    ffi.Pointer<LLVMOpaqueValue> Cmp,
    ffi.Pointer<LLVMOpaqueValue> New,
    int SuccessOrdering,
    int FailureOrdering,
    int SingleThread,
  ) {
    _LLVMBuildAtomicCmpXchg ??= _dylib.lookupFunction<_c_LLVMBuildAtomicCmpXchg,
        _dart_LLVMBuildAtomicCmpXchg>('LLVMBuildAtomicCmpXchg');
    return _LLVMBuildAtomicCmpXchg(
      B,
      Ptr,
      Cmp,
      New,
      SuccessOrdering,
      FailureOrdering,
      SingleThread,
    );
  }

  _dart_LLVMBuildAtomicCmpXchg _LLVMBuildAtomicCmpXchg;

  int LLVMIsAtomicSingleThread(
    ffi.Pointer<LLVMOpaqueValue> AtomicInst,
  ) {
    _LLVMIsAtomicSingleThread ??= _dylib.lookupFunction<
        _c_LLVMIsAtomicSingleThread,
        _dart_LLVMIsAtomicSingleThread>('LLVMIsAtomicSingleThread');
    return _LLVMIsAtomicSingleThread(
      AtomicInst,
    );
  }

  _dart_LLVMIsAtomicSingleThread _LLVMIsAtomicSingleThread;

  void LLVMSetAtomicSingleThread(
    ffi.Pointer<LLVMOpaqueValue> AtomicInst,
    int SingleThread,
  ) {
    _LLVMSetAtomicSingleThread ??= _dylib.lookupFunction<
        _c_LLVMSetAtomicSingleThread,
        _dart_LLVMSetAtomicSingleThread>('LLVMSetAtomicSingleThread');
    return _LLVMSetAtomicSingleThread(
      AtomicInst,
      SingleThread,
    );
  }

  _dart_LLVMSetAtomicSingleThread _LLVMSetAtomicSingleThread;

  int LLVMGetCmpXchgSuccessOrdering(
    ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  ) {
    _LLVMGetCmpXchgSuccessOrdering ??= _dylib.lookupFunction<
        _c_LLVMGetCmpXchgSuccessOrdering,
        _dart_LLVMGetCmpXchgSuccessOrdering>('LLVMGetCmpXchgSuccessOrdering');
    return _LLVMGetCmpXchgSuccessOrdering(
      CmpXchgInst,
    );
  }

  _dart_LLVMGetCmpXchgSuccessOrdering _LLVMGetCmpXchgSuccessOrdering;

  void LLVMSetCmpXchgSuccessOrdering(
    ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
    int Ordering,
  ) {
    _LLVMSetCmpXchgSuccessOrdering ??= _dylib.lookupFunction<
        _c_LLVMSetCmpXchgSuccessOrdering,
        _dart_LLVMSetCmpXchgSuccessOrdering>('LLVMSetCmpXchgSuccessOrdering');
    return _LLVMSetCmpXchgSuccessOrdering(
      CmpXchgInst,
      Ordering,
    );
  }

  _dart_LLVMSetCmpXchgSuccessOrdering _LLVMSetCmpXchgSuccessOrdering;

  int LLVMGetCmpXchgFailureOrdering(
    ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  ) {
    _LLVMGetCmpXchgFailureOrdering ??= _dylib.lookupFunction<
        _c_LLVMGetCmpXchgFailureOrdering,
        _dart_LLVMGetCmpXchgFailureOrdering>('LLVMGetCmpXchgFailureOrdering');
    return _LLVMGetCmpXchgFailureOrdering(
      CmpXchgInst,
    );
  }

  _dart_LLVMGetCmpXchgFailureOrdering _LLVMGetCmpXchgFailureOrdering;

  void LLVMSetCmpXchgFailureOrdering(
    ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
    int Ordering,
  ) {
    _LLVMSetCmpXchgFailureOrdering ??= _dylib.lookupFunction<
        _c_LLVMSetCmpXchgFailureOrdering,
        _dart_LLVMSetCmpXchgFailureOrdering>('LLVMSetCmpXchgFailureOrdering');
    return _LLVMSetCmpXchgFailureOrdering(
      CmpXchgInst,
      Ordering,
    );
  }

  _dart_LLVMSetCmpXchgFailureOrdering _LLVMSetCmpXchgFailureOrdering;

  /// Changes the type of M so it can be passed to FunctionPassManagers and the
  /// JIT.  They take ModuleProviders for historical reasons.
  ffi.Pointer<LLVMOpaqueModuleProvider>
      LLVMCreateModuleProviderForExistingModule(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMCreateModuleProviderForExistingModule ??= _dylib.lookupFunction<
            _c_LLVMCreateModuleProviderForExistingModule,
            _dart_LLVMCreateModuleProviderForExistingModule>(
        'LLVMCreateModuleProviderForExistingModule');
    return _LLVMCreateModuleProviderForExistingModule(
      M,
    );
  }

  _dart_LLVMCreateModuleProviderForExistingModule
      _LLVMCreateModuleProviderForExistingModule;

  /// Destroys the module M.
  void LLVMDisposeModuleProvider(
    ffi.Pointer<LLVMOpaqueModuleProvider> M,
  ) {
    _LLVMDisposeModuleProvider ??= _dylib.lookupFunction<
        _c_LLVMDisposeModuleProvider,
        _dart_LLVMDisposeModuleProvider>('LLVMDisposeModuleProvider');
    return _LLVMDisposeModuleProvider(
      M,
    );
  }

  _dart_LLVMDisposeModuleProvider _LLVMDisposeModuleProvider;

  /// @defgroup LLVMCCoreMemoryBuffers Memory Buffers
  ///
  /// @{
  int LLVMCreateMemoryBufferWithContentsOfFile(
    ffi.Pointer<ffi.Int8> Path,
    ffi.Pointer<ffi.Pointer<LLVMOpaqueMemoryBuffer>> OutMemBuf,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
  ) {
    _LLVMCreateMemoryBufferWithContentsOfFile ??= _dylib.lookupFunction<
            _c_LLVMCreateMemoryBufferWithContentsOfFile,
            _dart_LLVMCreateMemoryBufferWithContentsOfFile>(
        'LLVMCreateMemoryBufferWithContentsOfFile');
    return _LLVMCreateMemoryBufferWithContentsOfFile(
      Path,
      OutMemBuf,
      OutMessage,
    );
  }

  _dart_LLVMCreateMemoryBufferWithContentsOfFile
      _LLVMCreateMemoryBufferWithContentsOfFile;

  int LLVMCreateMemoryBufferWithSTDIN(
    ffi.Pointer<ffi.Pointer<LLVMOpaqueMemoryBuffer>> OutMemBuf,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
  ) {
    _LLVMCreateMemoryBufferWithSTDIN ??= _dylib.lookupFunction<
            _c_LLVMCreateMemoryBufferWithSTDIN,
            _dart_LLVMCreateMemoryBufferWithSTDIN>(
        'LLVMCreateMemoryBufferWithSTDIN');
    return _LLVMCreateMemoryBufferWithSTDIN(
      OutMemBuf,
      OutMessage,
    );
  }

  _dart_LLVMCreateMemoryBufferWithSTDIN _LLVMCreateMemoryBufferWithSTDIN;

  ffi.Pointer<LLVMOpaqueMemoryBuffer> LLVMCreateMemoryBufferWithMemoryRange(
    ffi.Pointer<ffi.Int8> InputData,
    int InputDataLength,
    ffi.Pointer<ffi.Int8> BufferName,
    int RequiresNullTerminator,
  ) {
    _LLVMCreateMemoryBufferWithMemoryRange ??= _dylib.lookupFunction<
            _c_LLVMCreateMemoryBufferWithMemoryRange,
            _dart_LLVMCreateMemoryBufferWithMemoryRange>(
        'LLVMCreateMemoryBufferWithMemoryRange');
    return _LLVMCreateMemoryBufferWithMemoryRange(
      InputData,
      InputDataLength,
      BufferName,
      RequiresNullTerminator,
    );
  }

  _dart_LLVMCreateMemoryBufferWithMemoryRange
      _LLVMCreateMemoryBufferWithMemoryRange;

  ffi.Pointer<LLVMOpaqueMemoryBuffer> LLVMCreateMemoryBufferWithMemoryRangeCopy(
    ffi.Pointer<ffi.Int8> InputData,
    int InputDataLength,
    ffi.Pointer<ffi.Int8> BufferName,
  ) {
    _LLVMCreateMemoryBufferWithMemoryRangeCopy ??= _dylib.lookupFunction<
            _c_LLVMCreateMemoryBufferWithMemoryRangeCopy,
            _dart_LLVMCreateMemoryBufferWithMemoryRangeCopy>(
        'LLVMCreateMemoryBufferWithMemoryRangeCopy');
    return _LLVMCreateMemoryBufferWithMemoryRangeCopy(
      InputData,
      InputDataLength,
      BufferName,
    );
  }

  _dart_LLVMCreateMemoryBufferWithMemoryRangeCopy
      _LLVMCreateMemoryBufferWithMemoryRangeCopy;

  ffi.Pointer<ffi.Int8> LLVMGetBufferStart(
    ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
  ) {
    _LLVMGetBufferStart ??=
        _dylib.lookupFunction<_c_LLVMGetBufferStart, _dart_LLVMGetBufferStart>(
            'LLVMGetBufferStart');
    return _LLVMGetBufferStart(
      MemBuf,
    );
  }

  _dart_LLVMGetBufferStart _LLVMGetBufferStart;

  int LLVMGetBufferSize(
    ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
  ) {
    _LLVMGetBufferSize ??=
        _dylib.lookupFunction<_c_LLVMGetBufferSize, _dart_LLVMGetBufferSize>(
            'LLVMGetBufferSize');
    return _LLVMGetBufferSize(
      MemBuf,
    );
  }

  _dart_LLVMGetBufferSize _LLVMGetBufferSize;

  void LLVMDisposeMemoryBuffer(
    ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
  ) {
    _LLVMDisposeMemoryBuffer ??= _dylib.lookupFunction<
        _c_LLVMDisposeMemoryBuffer,
        _dart_LLVMDisposeMemoryBuffer>('LLVMDisposeMemoryBuffer');
    return _LLVMDisposeMemoryBuffer(
      MemBuf,
    );
  }

  _dart_LLVMDisposeMemoryBuffer _LLVMDisposeMemoryBuffer;

  /// Return the global pass registry, for use with initialization functions.
  /// @see llvm::PassRegistry::getPassRegistry
  ffi.Pointer<LLVMOpaquePassRegistry> LLVMGetGlobalPassRegistry() {
    _LLVMGetGlobalPassRegistry ??= _dylib.lookupFunction<
        _c_LLVMGetGlobalPassRegistry,
        _dart_LLVMGetGlobalPassRegistry>('LLVMGetGlobalPassRegistry');
    return _LLVMGetGlobalPassRegistry();
  }

  _dart_LLVMGetGlobalPassRegistry _LLVMGetGlobalPassRegistry;

  /// Constructs a new whole-module pass pipeline. This type of pipeline is
  /// suitable for link-time optimization and whole-module transformations.
  /// @see llvm::PassManager::PassManager
  ffi.Pointer<LLVMOpaquePassManager> LLVMCreatePassManager() {
    _LLVMCreatePassManager ??= _dylib.lookupFunction<_c_LLVMCreatePassManager,
        _dart_LLVMCreatePassManager>('LLVMCreatePassManager');
    return _LLVMCreatePassManager();
  }

  _dart_LLVMCreatePassManager _LLVMCreatePassManager;

  /// Constructs a new function-by-function pass pipeline over the module
  /// provider. It does not take ownership of the module provider. This type of
  /// pipeline is suitable for code generation and JIT compilation tasks.
  /// @see llvm::FunctionPassManager::FunctionPassManager
  ffi.Pointer<LLVMOpaquePassManager> LLVMCreateFunctionPassManagerForModule(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMCreateFunctionPassManagerForModule ??= _dylib.lookupFunction<
            _c_LLVMCreateFunctionPassManagerForModule,
            _dart_LLVMCreateFunctionPassManagerForModule>(
        'LLVMCreateFunctionPassManagerForModule');
    return _LLVMCreateFunctionPassManagerForModule(
      M,
    );
  }

  _dart_LLVMCreateFunctionPassManagerForModule
      _LLVMCreateFunctionPassManagerForModule;

  /// Deprecated: Use LLVMCreateFunctionPassManagerForModule instead.
  ffi.Pointer<LLVMOpaquePassManager> LLVMCreateFunctionPassManager(
    ffi.Pointer<LLVMOpaqueModuleProvider> MP,
  ) {
    _LLVMCreateFunctionPassManager ??= _dylib.lookupFunction<
        _c_LLVMCreateFunctionPassManager,
        _dart_LLVMCreateFunctionPassManager>('LLVMCreateFunctionPassManager');
    return _LLVMCreateFunctionPassManager(
      MP,
    );
  }

  _dart_LLVMCreateFunctionPassManager _LLVMCreateFunctionPassManager;

  /// Initializes, executes on the provided module, and finalizes all of the
  /// passes scheduled in the pass manager. Returns 1 if any of the passes
  /// modified the module, 0 otherwise.
  /// @see llvm::PassManager::run(Module&)
  int LLVMRunPassManager(
    ffi.Pointer<LLVMOpaquePassManager> PM,
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMRunPassManager ??=
        _dylib.lookupFunction<_c_LLVMRunPassManager, _dart_LLVMRunPassManager>(
            'LLVMRunPassManager');
    return _LLVMRunPassManager(
      PM,
      M,
    );
  }

  _dart_LLVMRunPassManager _LLVMRunPassManager;

  /// Initializes all of the function passes scheduled in the function pass
  /// manager. Returns 1 if any of the passes modified the module, 0 otherwise.
  /// @see llvm::FunctionPassManager::doInitialization
  int LLVMInitializeFunctionPassManager(
    ffi.Pointer<LLVMOpaquePassManager> FPM,
  ) {
    _LLVMInitializeFunctionPassManager ??= _dylib.lookupFunction<
            _c_LLVMInitializeFunctionPassManager,
            _dart_LLVMInitializeFunctionPassManager>(
        'LLVMInitializeFunctionPassManager');
    return _LLVMInitializeFunctionPassManager(
      FPM,
    );
  }

  _dart_LLVMInitializeFunctionPassManager _LLVMInitializeFunctionPassManager;

  /// Executes all of the function passes scheduled in the function pass manager
  /// on the provided function. Returns 1 if any of the passes modified the
  /// function, false otherwise.
  /// @see llvm::FunctionPassManager::run(Function&)
  int LLVMRunFunctionPassManager(
    ffi.Pointer<LLVMOpaquePassManager> FPM,
    ffi.Pointer<LLVMOpaqueValue> F,
  ) {
    _LLVMRunFunctionPassManager ??= _dylib.lookupFunction<
        _c_LLVMRunFunctionPassManager,
        _dart_LLVMRunFunctionPassManager>('LLVMRunFunctionPassManager');
    return _LLVMRunFunctionPassManager(
      FPM,
      F,
    );
  }

  _dart_LLVMRunFunctionPassManager _LLVMRunFunctionPassManager;

  /// Finalizes all of the function passes scheduled in the function pass
  /// manager. Returns 1 if any of the passes modified the module, 0 otherwise.
  /// @see llvm::FunctionPassManager::doFinalization
  int LLVMFinalizeFunctionPassManager(
    ffi.Pointer<LLVMOpaquePassManager> FPM,
  ) {
    _LLVMFinalizeFunctionPassManager ??= _dylib.lookupFunction<
            _c_LLVMFinalizeFunctionPassManager,
            _dart_LLVMFinalizeFunctionPassManager>(
        'LLVMFinalizeFunctionPassManager');
    return _LLVMFinalizeFunctionPassManager(
      FPM,
    );
  }

  _dart_LLVMFinalizeFunctionPassManager _LLVMFinalizeFunctionPassManager;

  /// Frees the memory of a pass pipeline. For function pipelines, does not free
  /// the module provider.
  /// @see llvm::PassManagerBase::~PassManagerBase.
  void LLVMDisposePassManager(
    ffi.Pointer<LLVMOpaquePassManager> PM,
  ) {
    _LLVMDisposePassManager ??= _dylib.lookupFunction<_c_LLVMDisposePassManager,
        _dart_LLVMDisposePassManager>('LLVMDisposePassManager');
    return _LLVMDisposePassManager(
      PM,
    );
  }

  _dart_LLVMDisposePassManager _LLVMDisposePassManager;

  /// Deprecated: Multi-threading can only be enabled/disabled with the compile
  /// time define LLVM_ENABLE_THREADS.  This function always returns
  /// LLVMIsMultithreaded().
  int LLVMStartMultithreaded() {
    _LLVMStartMultithreaded ??= _dylib.lookupFunction<_c_LLVMStartMultithreaded,
        _dart_LLVMStartMultithreaded>('LLVMStartMultithreaded');
    return _LLVMStartMultithreaded();
  }

  _dart_LLVMStartMultithreaded _LLVMStartMultithreaded;

  /// Deprecated: Multi-threading can only be enabled/disabled with the compile
  /// time define LLVM_ENABLE_THREADS.
  void LLVMStopMultithreaded() {
    _LLVMStopMultithreaded ??= _dylib.lookupFunction<_c_LLVMStopMultithreaded,
        _dart_LLVMStopMultithreaded>('LLVMStopMultithreaded');
    return _LLVMStopMultithreaded();
  }

  _dart_LLVMStopMultithreaded _LLVMStopMultithreaded;

  /// Check whether LLVM is executing in thread-safe mode or not.
  /// @see llvm::llvm_is_multithreaded
  int LLVMIsMultithreaded() {
    _LLVMIsMultithreaded ??= _dylib.lookupFunction<_c_LLVMIsMultithreaded,
        _dart_LLVMIsMultithreaded>('LLVMIsMultithreaded');
    return _LLVMIsMultithreaded();
  }

  _dart_LLVMIsMultithreaded _LLVMIsMultithreaded;

  int LLVMVerifyModule(
    ffi.Pointer<LLVMOpaqueModule> M,
    int Action,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
  ) {
    _LLVMVerifyModule ??=
        _dylib.lookupFunction<_c_LLVMVerifyModule, _dart_LLVMVerifyModule>(
            'LLVMVerifyModule');
    return _LLVMVerifyModule(
      M,
      Action,
      OutMessage,
    );
  }

  _dart_LLVMVerifyModule _LLVMVerifyModule;

  int LLVMVerifyFunction(
    ffi.Pointer<LLVMOpaqueValue> Fn,
    int Action,
  ) {
    _LLVMVerifyFunction ??=
        _dylib.lookupFunction<_c_LLVMVerifyFunction, _dart_LLVMVerifyFunction>(
            'LLVMVerifyFunction');
    return _LLVMVerifyFunction(
      Fn,
      Action,
    );
  }

  _dart_LLVMVerifyFunction _LLVMVerifyFunction;

  void LLVMViewFunctionCFG(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMViewFunctionCFG ??= _dylib.lookupFunction<_c_LLVMViewFunctionCFG,
        _dart_LLVMViewFunctionCFG>('LLVMViewFunctionCFG');
    return _LLVMViewFunctionCFG(
      Fn,
    );
  }

  _dart_LLVMViewFunctionCFG _LLVMViewFunctionCFG;

  void LLVMViewFunctionCFGOnly(
    ffi.Pointer<LLVMOpaqueValue> Fn,
  ) {
    _LLVMViewFunctionCFGOnly ??= _dylib.lookupFunction<
        _c_LLVMViewFunctionCFGOnly,
        _dart_LLVMViewFunctionCFGOnly>('LLVMViewFunctionCFGOnly');
    return _LLVMViewFunctionCFGOnly(
      Fn,
    );
  }

  _dart_LLVMViewFunctionCFGOnly _LLVMViewFunctionCFGOnly;

  /// Writes a module to the specified path. Returns 0 on success.
  int LLVMWriteBitcodeToFile(
    ffi.Pointer<LLVMOpaqueModule> M,
    ffi.Pointer<ffi.Int8> Path,
  ) {
    _LLVMWriteBitcodeToFile ??= _dylib.lookupFunction<_c_LLVMWriteBitcodeToFile,
        _dart_LLVMWriteBitcodeToFile>('LLVMWriteBitcodeToFile');
    return _LLVMWriteBitcodeToFile(
      M,
      Path,
    );
  }

  _dart_LLVMWriteBitcodeToFile _LLVMWriteBitcodeToFile;

  /// Writes a module to an open file descriptor. Returns 0 on success.
  int LLVMWriteBitcodeToFD(
    ffi.Pointer<LLVMOpaqueModule> M,
    int FD,
    int ShouldClose,
    int Unbuffered,
  ) {
    _LLVMWriteBitcodeToFD ??= _dylib.lookupFunction<_c_LLVMWriteBitcodeToFD,
        _dart_LLVMWriteBitcodeToFD>('LLVMWriteBitcodeToFD');
    return _LLVMWriteBitcodeToFD(
      M,
      FD,
      ShouldClose,
      Unbuffered,
    );
  }

  _dart_LLVMWriteBitcodeToFD _LLVMWriteBitcodeToFD;

  /// Deprecated for LLVMWriteBitcodeToFD. Writes a module to an open file
  /// descriptor. Returns 0 on success. Closes the Handle.
  int LLVMWriteBitcodeToFileHandle(
    ffi.Pointer<LLVMOpaqueModule> M,
    int Handle,
  ) {
    _LLVMWriteBitcodeToFileHandle ??= _dylib.lookupFunction<
        _c_LLVMWriteBitcodeToFileHandle,
        _dart_LLVMWriteBitcodeToFileHandle>('LLVMWriteBitcodeToFileHandle');
    return _LLVMWriteBitcodeToFileHandle(
      M,
      Handle,
    );
  }

  _dart_LLVMWriteBitcodeToFileHandle _LLVMWriteBitcodeToFileHandle;

  /// Writes a module to a new memory buffer and returns it.
  ffi.Pointer<LLVMOpaqueMemoryBuffer> LLVMWriteBitcodeToMemoryBuffer(
    ffi.Pointer<LLVMOpaqueModule> M,
  ) {
    _LLVMWriteBitcodeToMemoryBuffer ??= _dylib.lookupFunction<
        _c_LLVMWriteBitcodeToMemoryBuffer,
        _dart_LLVMWriteBitcodeToMemoryBuffer>('LLVMWriteBitcodeToMemoryBuffer');
    return _LLVMWriteBitcodeToMemoryBuffer(
      M,
    );
  }

  _dart_LLVMWriteBitcodeToMemoryBuffer _LLVMWriteBitcodeToMemoryBuffer;
}

class LLVMOpaqueMemoryBuffer extends ffi.Struct {}

class LLVMOpaqueContext extends ffi.Struct {}

class LLVMOpaqueModule extends ffi.Struct {}

class LLVMOpaqueType extends ffi.Struct {}

class LLVMOpaqueValue extends ffi.Struct {}

class LLVMOpaqueBasicBlock extends ffi.Struct {}

class LLVMOpaqueMetadata extends ffi.Struct {}

class LLVMOpaqueNamedMDNode extends ffi.Struct {}

class LLVMOpaqueValueMetadataEntry extends ffi.Struct {}

class LLVMOpaqueBuilder extends ffi.Struct {}

class LLVMOpaqueDIBuilder extends ffi.Struct {}

class LLVMOpaqueModuleProvider extends ffi.Struct {}

class LLVMOpaquePassManager extends ffi.Struct {}

class LLVMOpaquePassRegistry extends ffi.Struct {}

class LLVMOpaqueUse extends ffi.Struct {}

class LLVMOpaqueAttributeRef extends ffi.Struct {}

class LLVMOpaqueDiagnosticInfo extends ffi.Struct {}

class LLVMComdat extends ffi.Struct {}

class LLVMOpaqueModuleFlagEntry extends ffi.Struct {}

class LLVMOpaqueJITEventListener extends ffi.Struct {}

class LLVMOpaqueBinary extends ffi.Struct {}

/// /// External users depend on the following values being stable. It is not safe
/// /// to reorder them.
abstract class LLVMOpcode {
  static const int LLVMRet = 1;
  static const int LLVMBr = 2;
  static const int LLVMSwitch = 3;
  static const int LLVMIndirectBr = 4;
  static const int LLVMInvoke = 5;
  static const int LLVMUnreachable = 7;
  static const int LLVMCallBr = 67;
  static const int LLVMFNeg = 66;
  static const int LLVMAdd = 8;
  static const int LLVMFAdd = 9;
  static const int LLVMSub = 10;
  static const int LLVMFSub = 11;
  static const int LLVMMul = 12;
  static const int LLVMFMul = 13;
  static const int LLVMUDiv = 14;
  static const int LLVMSDiv = 15;
  static const int LLVMFDiv = 16;
  static const int LLVMURem = 17;
  static const int LLVMSRem = 18;
  static const int LLVMFRem = 19;
  static const int LLVMShl = 20;
  static const int LLVMLShr = 21;
  static const int LLVMAShr = 22;
  static const int LLVMAnd = 23;
  static const int LLVMOr = 24;
  static const int LLVMXor = 25;
  static const int LLVMAlloca = 26;
  static const int LLVMLoad = 27;
  static const int LLVMStore = 28;
  static const int LLVMGetElementPtr = 29;
  static const int LLVMTrunc = 30;
  static const int LLVMZExt = 31;
  static const int LLVMSExt = 32;
  static const int LLVMFPToUI = 33;
  static const int LLVMFPToSI = 34;
  static const int LLVMUIToFP = 35;
  static const int LLVMSIToFP = 36;
  static const int LLVMFPTrunc = 37;
  static const int LLVMFPExt = 38;
  static const int LLVMPtrToInt = 39;
  static const int LLVMIntToPtr = 40;
  static const int LLVMBitCast = 41;
  static const int LLVMAddrSpaceCast = 60;
  static const int LLVMICmp = 42;
  static const int LLVMFCmp = 43;
  static const int LLVMPHI = 44;
  static const int LLVMCall = 45;
  static const int LLVMSelect = 46;
  static const int LLVMUserOp1 = 47;
  static const int LLVMUserOp2 = 48;
  static const int LLVMVAArg = 49;
  static const int LLVMExtractElement = 50;
  static const int LLVMInsertElement = 51;
  static const int LLVMShuffleVector = 52;
  static const int LLVMExtractValue = 53;
  static const int LLVMInsertValue = 54;
  static const int LLVMFreeze = 68;
  static const int LLVMFence = 55;
  static const int LLVMAtomicCmpXchg = 56;
  static const int LLVMAtomicRMW = 57;
  static const int LLVMResume = 58;
  static const int LLVMLandingPad = 59;
  static const int LLVMCleanupRet = 61;
  static const int LLVMCatchRet = 62;
  static const int LLVMCatchPad = 63;
  static const int LLVMCleanupPad = 64;
  static const int LLVMCatchSwitch = 65;
}

abstract class LLVMTypeKind {
  /// < type with no size
  static const int LLVMVoidTypeKind = 0;

  /// < 16 bit floating point type
  static const int LLVMHalfTypeKind = 1;

  /// < 32 bit floating point type
  static const int LLVMFloatTypeKind = 2;

  /// < 64 bit floating point type
  static const int LLVMDoubleTypeKind = 3;

  /// < 80 bit floating point type (X87)
  static const int LLVMX86_FP80TypeKind = 4;

  /// < 128 bit floating point type (112-bit mantissa)
  static const int LLVMFP128TypeKind = 5;

  /// < 128 bit floating point type (two 64-bits)
  static const int LLVMPPC_FP128TypeKind = 6;

  /// < Labels
  static const int LLVMLabelTypeKind = 7;

  /// < Arbitrary bit width integers
  static const int LLVMIntegerTypeKind = 8;

  /// < Functions
  static const int LLVMFunctionTypeKind = 9;

  /// < Structures
  static const int LLVMStructTypeKind = 10;

  /// < Arrays
  static const int LLVMArrayTypeKind = 11;

  /// < Pointers
  static const int LLVMPointerTypeKind = 12;

  /// < SIMD 'packed' format, or other vector type
  static const int LLVMVectorTypeKind = 13;

  /// < Metadata
  static const int LLVMMetadataTypeKind = 14;

  /// < X86 MMX
  static const int LLVMX86_MMXTypeKind = 15;

  /// < Tokens
  static const int LLVMTokenTypeKind = 16;
}

abstract class LLVMLinkage {
  /// < Externally visible function
  static const int LLVMExternalLinkage = 0;
  static const int LLVMAvailableExternallyLinkage = 1;

  /// < Keep one copy of function when linking (inline)
  static const int LLVMLinkOnceAnyLinkage = 2;

  /// < Same, but only replaced by something
  /// equivalent.
  static const int LLVMLinkOnceODRLinkage = 3;

  /// < Obsolete
  static const int LLVMLinkOnceODRAutoHideLinkage = 4;

  /// < Keep one copy of function when linking (weak)
  static const int LLVMWeakAnyLinkage = 5;

  /// < Same, but only replaced by something
  /// equivalent.
  static const int LLVMWeakODRLinkage = 6;

  /// < Special purpose, only applies to global arrays
  static const int LLVMAppendingLinkage = 7;

  /// < Rename collisions when linking (static
  /// functions)
  static const int LLVMInternalLinkage = 8;

  /// < Like Internal, but omit from symbol table
  static const int LLVMPrivateLinkage = 9;

  /// < Obsolete
  static const int LLVMDLLImportLinkage = 10;

  /// < Obsolete
  static const int LLVMDLLExportLinkage = 11;

  /// < ExternalWeak linkage description
  static const int LLVMExternalWeakLinkage = 12;

  /// < Obsolete
  static const int LLVMGhostLinkage = 13;

  /// < Tentative definitions
  static const int LLVMCommonLinkage = 14;

  /// < Like Private, but linker removes.
  static const int LLVMLinkerPrivateLinkage = 15;

  /// < Like LinkerPrivate, but is weak.
  static const int LLVMLinkerPrivateWeakLinkage = 16;
}

abstract class LLVMVisibility {
  /// < The GV is visible
  static const int LLVMDefaultVisibility = 0;

  /// < The GV is hidden
  static const int LLVMHiddenVisibility = 1;

  /// < The GV is protected
  static const int LLVMProtectedVisibility = 2;
}

abstract class LLVMUnnamedAddr {
  /// < Address of the GV is significant.
  static const int LLVMNoUnnamedAddr = 0;

  /// < Address of the GV is locally insignificant.
  static const int LLVMLocalUnnamedAddr = 1;

  /// < Address of the GV is globally insignificant.
  static const int LLVMGlobalUnnamedAddr = 2;
}

abstract class LLVMDLLStorageClass {
  static const int LLVMDefaultStorageClass = 0;

  /// < Function to be imported from DLL.
  static const int LLVMDLLImportStorageClass = 1;

  /// < Function to be accessible from DLL.
  static const int LLVMDLLExportStorageClass = 2;
}

abstract class LLVMCallConv {
  static const int LLVMCCallConv = 0;
  static const int LLVMFastCallConv = 8;
  static const int LLVMColdCallConv = 9;
  static const int LLVMGHCCallConv = 10;
  static const int LLVMHiPECallConv = 11;
  static const int LLVMWebKitJSCallConv = 12;
  static const int LLVMAnyRegCallConv = 13;
  static const int LLVMPreserveMostCallConv = 14;
  static const int LLVMPreserveAllCallConv = 15;
  static const int LLVMSwiftCallConv = 16;
  static const int LLVMCXXFASTTLSCallConv = 17;
  static const int LLVMX86StdcallCallConv = 64;
  static const int LLVMX86FastcallCallConv = 65;
  static const int LLVMARMAPCSCallConv = 66;
  static const int LLVMARMAAPCSCallConv = 67;
  static const int LLVMARMAAPCSVFPCallConv = 68;
  static const int LLVMMSP430INTRCallConv = 69;
  static const int LLVMX86ThisCallCallConv = 70;
  static const int LLVMPTXKernelCallConv = 71;
  static const int LLVMPTXDeviceCallConv = 72;
  static const int LLVMSPIRFUNCCallConv = 75;
  static const int LLVMSPIRKERNELCallConv = 76;
  static const int LLVMIntelOCLBICallConv = 77;
  static const int LLVMX8664SysVCallConv = 78;
  static const int LLVMWin64CallConv = 79;
  static const int LLVMX86VectorCallCallConv = 80;
  static const int LLVMHHVMCallConv = 81;
  static const int LLVMHHVMCCallConv = 82;
  static const int LLVMX86INTRCallConv = 83;
  static const int LLVMAVRINTRCallConv = 84;
  static const int LLVMAVRSIGNALCallConv = 85;
  static const int LLVMAVRBUILTINCallConv = 86;
  static const int LLVMAMDGPUVSCallConv = 87;
  static const int LLVMAMDGPUGSCallConv = 88;
  static const int LLVMAMDGPUPSCallConv = 89;
  static const int LLVMAMDGPUCSCallConv = 90;
  static const int LLVMAMDGPUKERNELCallConv = 91;
  static const int LLVMX86RegCallCallConv = 92;
  static const int LLVMAMDGPUHSCallConv = 93;
  static const int LLVMMSP430BUILTINCallConv = 94;
  static const int LLVMAMDGPULSCallConv = 95;
  static const int LLVMAMDGPUESCallConv = 96;
}

abstract class LLVMValueKind {
  static const int LLVMArgumentValueKind = 0;
  static const int LLVMBasicBlockValueKind = 1;
  static const int LLVMMemoryUseValueKind = 2;
  static const int LLVMMemoryDefValueKind = 3;
  static const int LLVMMemoryPhiValueKind = 4;
  static const int LLVMFunctionValueKind = 5;
  static const int LLVMGlobalAliasValueKind = 6;
  static const int LLVMGlobalIFuncValueKind = 7;
  static const int LLVMGlobalVariableValueKind = 8;
  static const int LLVMBlockAddressValueKind = 9;
  static const int LLVMConstantExprValueKind = 10;
  static const int LLVMConstantArrayValueKind = 11;
  static const int LLVMConstantStructValueKind = 12;
  static const int LLVMConstantVectorValueKind = 13;
  static const int LLVMUndefValueValueKind = 14;
  static const int LLVMConstantAggregateZeroValueKind = 15;
  static const int LLVMConstantDataArrayValueKind = 16;
  static const int LLVMConstantDataVectorValueKind = 17;
  static const int LLVMConstantIntValueKind = 18;
  static const int LLVMConstantFPValueKind = 19;
  static const int LLVMConstantPointerNullValueKind = 20;
  static const int LLVMConstantTokenNoneValueKind = 21;
  static const int LLVMMetadataAsValueValueKind = 22;
  static const int LLVMInlineAsmValueKind = 23;
  static const int LLVMInstructionValueKind = 24;
}

abstract class LLVMIntPredicate {
  /// < equal
  static const int LLVMIntEQ = 32;

  /// < not equal
  static const int LLVMIntNE = 33;

  /// < unsigned greater than
  static const int LLVMIntUGT = 34;

  /// < unsigned greater or equal
  static const int LLVMIntUGE = 35;

  /// < unsigned less than
  static const int LLVMIntULT = 36;

  /// < unsigned less or equal
  static const int LLVMIntULE = 37;

  /// < signed greater than
  static const int LLVMIntSGT = 38;

  /// < signed greater or equal
  static const int LLVMIntSGE = 39;

  /// < signed less than
  static const int LLVMIntSLT = 40;

  /// < signed less or equal
  static const int LLVMIntSLE = 41;
}

abstract class LLVMRealPredicate {
  /// < Always false (always folded)
  static const int LLVMRealPredicateFalse = 0;

  /// < True if ordered and equal
  static const int LLVMRealOEQ = 1;

  /// < True if ordered and greater than
  static const int LLVMRealOGT = 2;

  /// < True if ordered and greater than or equal
  static const int LLVMRealOGE = 3;

  /// < True if ordered and less than
  static const int LLVMRealOLT = 4;

  /// < True if ordered and less than or equal
  static const int LLVMRealOLE = 5;

  /// < True if ordered and operands are unequal
  static const int LLVMRealONE = 6;

  /// < True if ordered (no nans)
  static const int LLVMRealORD = 7;

  /// < True if unordered: isnan(X) | isnan(Y)
  static const int LLVMRealUNO = 8;

  /// < True if unordered or equal
  static const int LLVMRealUEQ = 9;

  /// < True if unordered or greater than
  static const int LLVMRealUGT = 10;

  /// < True if unordered, greater than, or equal
  static const int LLVMRealUGE = 11;

  /// < True if unordered or less than
  static const int LLVMRealULT = 12;

  /// < True if unordered, less than, or equal
  static const int LLVMRealULE = 13;

  /// < True if unordered or not equal
  static const int LLVMRealUNE = 14;

  /// < Always true (always folded)
  static const int LLVMRealPredicateTrue = 15;
}

abstract class LLVMLandingPadClauseTy {
  /// < A catch clause
  static const int LLVMLandingPadCatch = 0;

  /// < A filter clause
  static const int LLVMLandingPadFilter = 1;
}

abstract class LLVMThreadLocalMode {
  static const int LLVMNotThreadLocal = 0;
  static const int LLVMGeneralDynamicTLSModel = 1;
  static const int LLVMLocalDynamicTLSModel = 2;
  static const int LLVMInitialExecTLSModel = 3;
  static const int LLVMLocalExecTLSModel = 4;
}

abstract class LLVMAtomicOrdering {
  /// < A load or store which is not atomic
  static const int LLVMAtomicOrderingNotAtomic = 0;

  /// < Lowest level of atomicity, guarantees
  /// somewhat sane results, lock free.
  static const int LLVMAtomicOrderingUnordered = 1;

  /// < guarantees that if you take all the
  /// operations affecting a specific address,
  /// a consistent ordering exists
  static const int LLVMAtomicOrderingMonotonic = 2;

  /// < Acquire provides a barrier of the sort
  /// necessary to acquire a lock to access other
  /// memory with normal loads and stores.
  static const int LLVMAtomicOrderingAcquire = 4;

  /// < Release is similar to Acquire, but with
  /// a barrier of the sort necessary to release
  /// a lock.
  static const int LLVMAtomicOrderingRelease = 5;

  /// < provides both an Acquire and a
  /// Release barrier (for fences and
  /// operations which both read and write
  /// memory).
  static const int LLVMAtomicOrderingAcquireRelease = 6;

  /// < provides Acquire semantics
  /// for loads and Release
  /// semantics for stores.
  /// Additionally, it guarantees
  /// that a total ordering exists
  /// between all
  /// SequentiallyConsistent
  /// operations.
  static const int LLVMAtomicOrderingSequentiallyConsistent = 7;
}

abstract class LLVMAtomicRMWBinOp {
  /// < Set the new value and return the one old
  static const int LLVMAtomicRMWBinOpXchg = 0;

  /// < Add a value and return the old one
  static const int LLVMAtomicRMWBinOpAdd = 1;

  /// < Subtract a value and return the old one
  static const int LLVMAtomicRMWBinOpSub = 2;

  /// < And a value and return the old one
  static const int LLVMAtomicRMWBinOpAnd = 3;

  /// < Not-And a value and return the old one
  static const int LLVMAtomicRMWBinOpNand = 4;

  /// < OR a value and return the old one
  static const int LLVMAtomicRMWBinOpOr = 5;

  /// < Xor a value and return the old one
  static const int LLVMAtomicRMWBinOpXor = 6;

  /// < Sets the value if it's greater than the
  /// original using a signed comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpMax = 7;

  /// < Sets the value if it's Smaller than the
  /// original using a signed comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpMin = 8;

  /// < Sets the value if it's greater than the
  /// original using an unsigned comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpUMax = 9;

  /// < Sets the value if it's greater than the
  /// original using an unsigned comparison and return
  /// the old one
  static const int LLVMAtomicRMWBinOpUMin = 10;

  /// < Add a floating point value and return the
  /// old one
  static const int LLVMAtomicRMWBinOpFAdd = 11;

  /// < Subtract a floating point value and return the
  /// old one
  static const int LLVMAtomicRMWBinOpFSub = 12;
}

abstract class LLVMDiagnosticSeverity {
  static const int LLVMDSError = 0;
  static const int LLVMDSWarning = 1;
  static const int LLVMDSRemark = 2;
  static const int LLVMDSNote = 3;
}

abstract class LLVMInlineAsmDialect {
  static const int LLVMInlineAsmDialectATT = 0;
  static const int LLVMInlineAsmDialectIntel = 1;
}

abstract class LLVMModuleFlagBehavior {
  /// Emits an error if two values disagree, otherwise the resulting value is
  /// that of the operands.
  ///
  /// @see Module::ModFlagBehavior::Error
  static const int LLVMModuleFlagBehaviorError = 0;

  /// Emits a warning if two values disagree. The result value will be the
  /// operand for the flag from the first module being linked.
  ///
  /// @see Module::ModFlagBehavior::Warning
  static const int LLVMModuleFlagBehaviorWarning = 1;

  /// Adds a requirement that another module flag be present and have a
  /// specified value after linking is performed. The value must be a metadata
  /// pair, where the first element of the pair is the ID of the module flag
  /// to be restricted, and the second element of the pair is the value the
  /// module flag should be restricted to. This behavior can be used to
  /// restrict the allowable results (via triggering of an error) of linking
  /// IDs with the **Override** behavior.
  ///
  /// @see Module::ModFlagBehavior::Require
  static const int LLVMModuleFlagBehaviorRequire = 2;

  /// Uses the specified value, regardless of the behavior or value of the
  /// other module. If both modules specify **Override**, but the values
  /// differ, an error will be emitted.
  ///
  /// @see Module::ModFlagBehavior::Override
  static const int LLVMModuleFlagBehaviorOverride = 3;

  /// Appends the two values, which are required to be metadata nodes.
  ///
  /// @see Module::ModFlagBehavior::Append
  static const int LLVMModuleFlagBehaviorAppend = 4;

  /// Appends the two values, which are required to be metadata
  /// nodes. However, duplicate entries in the second list are dropped
  /// during the append operation.
  ///
  /// @see Module::ModFlagBehavior::AppendUnique
  static const int LLVMModuleFlagBehaviorAppendUnique = 5;
}

/// @defgroup LLVMCAnalysis Analysis
/// @ingroup LLVMC
///
/// @{
abstract class LLVMVerifierFailureAction {
  static const int LLVMAbortProcessAction = 0;
  static const int LLVMPrintMessageAction = 1;
  static const int LLVMReturnStatusAction = 2;
}

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int LLVMAttributeReturnIndex = 0;

const int LLVMAttributeFunctionIndex = -1;

const int FP_NAN_1 = 0;

const int FP_INFINITE_1 = 1;

const int FP_ZERO_1 = 2;

const int FP_SUBNORMAL_1 = 3;

const int FP_NORMAL_1 = 4;

const int FP_NAN_2 = 0;

const int FP_INFINITE_2 = 1;

const int FP_ZERO_2 = 2;

const int FP_SUBNORMAL_2 = 3;

const int FP_NORMAL_2 = 4;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int FP_NAN_3 = 0;

const int FP_INFINITE_3 = 1;

const int FP_ZERO_3 = 2;

const int FP_SUBNORMAL_3 = 3;

const int FP_NORMAL_3 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

typedef LLVMFatalErrorHandler = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_LLVMInstallFatalErrorHandler = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<LLVMFatalErrorHandler>> Handler,
);

typedef _dart_LLVMInstallFatalErrorHandler = void Function(
  ffi.Pointer<ffi.NativeFunction<LLVMFatalErrorHandler>> Handler,
);

typedef _c_LLVMResetFatalErrorHandler = ffi.Void Function();

typedef _dart_LLVMResetFatalErrorHandler = void Function();

typedef _c_LLVMEnablePrettyStackTrace = ffi.Void Function();

typedef _dart_LLVMEnablePrettyStackTrace = void Function();

typedef _c_LLVMInitializeCore = ffi.Void Function(
  ffi.Pointer<LLVMOpaquePassRegistry> R,
);

typedef _dart_LLVMInitializeCore = void Function(
  ffi.Pointer<LLVMOpaquePassRegistry> R,
);

typedef _c_LLVMShutdown = ffi.Void Function();

typedef _dart_LLVMShutdown = void Function();

typedef _c_LLVMCreateMessage = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> Message,
);

typedef _dart_LLVMCreateMessage = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> Message,
);

typedef _c_LLVMDisposeMessage = ffi.Void Function(
  ffi.Pointer<ffi.Int8> Message,
);

typedef _dart_LLVMDisposeMessage = void Function(
  ffi.Pointer<ffi.Int8> Message,
);

typedef _c_LLVMContextCreate = ffi.Pointer<LLVMOpaqueContext> Function();

typedef _dart_LLVMContextCreate = ffi.Pointer<LLVMOpaqueContext> Function();

typedef _c_LLVMGetGlobalContext = ffi.Pointer<LLVMOpaqueContext> Function();

typedef _dart_LLVMGetGlobalContext = ffi.Pointer<LLVMOpaqueContext> Function();

typedef LLVMDiagnosticHandler = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueDiagnosticInfo>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_LLVMContextSetDiagnosticHandler = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.NativeFunction<LLVMDiagnosticHandler>> Handler,
  ffi.Pointer<ffi.Void> DiagnosticContext,
);

typedef _dart_LLVMContextSetDiagnosticHandler = void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.NativeFunction<LLVMDiagnosticHandler>> Handler,
  ffi.Pointer<ffi.Void> DiagnosticContext,
);

typedef _c_LLVMContextGetDiagnosticHandler
    = ffi.Pointer<ffi.NativeFunction<LLVMDiagnosticHandler>> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMContextGetDiagnosticHandler
    = ffi.Pointer<ffi.NativeFunction<LLVMDiagnosticHandler>> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMContextGetDiagnosticContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMContextGetDiagnosticContext = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef LLVMYieldCallback = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueContext>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_LLVMContextSetYieldCallback = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.NativeFunction<LLVMYieldCallback>> Callback,
  ffi.Pointer<ffi.Void> OpaqueHandle,
);

typedef _dart_LLVMContextSetYieldCallback = void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.NativeFunction<LLVMYieldCallback>> Callback,
  ffi.Pointer<ffi.Void> OpaqueHandle,
);

typedef _c_LLVMContextShouldDiscardValueNames = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMContextShouldDiscardValueNames = int Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMContextSetDiscardValueNames = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Int32 Discard,
);

typedef _dart_LLVMContextSetDiscardValueNames = void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  int Discard,
);

typedef _c_LLVMContextDispose = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMContextDispose = void Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMGetDiagInfoDescription = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueDiagnosticInfo> DI,
);

typedef _dart_LLVMGetDiagInfoDescription = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueDiagnosticInfo> DI,
);

typedef _c_LLVMGetDiagInfoSeverity = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueDiagnosticInfo> DI,
);

typedef _dart_LLVMGetDiagInfoSeverity = int Function(
  ffi.Pointer<LLVMOpaqueDiagnosticInfo> DI,
);

typedef _c_LLVMGetMDKindIDInContext = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint32 SLen,
);

typedef _dart_LLVMGetMDKindIDInContext = int Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Name,
  int SLen,
);

typedef _c_LLVMGetMDKindID = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint32 SLen,
);

typedef _dart_LLVMGetMDKindID = int Function(
  ffi.Pointer<ffi.Int8> Name,
  int SLen,
);

typedef _c_LLVMGetEnumAttributeKindForName = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 SLen,
);

typedef _dart_LLVMGetEnumAttributeKindForName = int Function(
  ffi.Pointer<ffi.Int8> Name,
  int SLen,
);

typedef _c_LLVMGetLastEnumAttributeKind = ffi.Uint32 Function();

typedef _dart_LLVMGetLastEnumAttributeKind = int Function();

typedef _c_LLVMCreateEnumAttribute = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Uint32 KindID,
  ffi.Uint64 Val,
);

typedef _dart_LLVMCreateEnumAttribute = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  int KindID,
  int Val,
);

typedef _c_LLVMGetEnumAttributeKind = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _dart_LLVMGetEnumAttributeKind = int Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _c_LLVMGetEnumAttributeValue = ffi.Uint64 Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _dart_LLVMGetEnumAttributeValue = int Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _c_LLVMCreateStringAttribute = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> K,
  ffi.Uint32 KLength,
  ffi.Pointer<ffi.Int8> V,
  ffi.Uint32 VLength,
);

typedef _dart_LLVMCreateStringAttribute = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> K,
  int KLength,
  ffi.Pointer<ffi.Int8> V,
  int VLength,
);

typedef _c_LLVMGetStringAttributeKind = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _dart_LLVMGetStringAttributeKind = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _c_LLVMGetStringAttributeValue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _dart_LLVMGetStringAttributeValue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _c_LLVMIsEnumAttribute = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _dart_LLVMIsEnumAttribute = int Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _c_LLVMIsStringAttribute = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _dart_LLVMIsStringAttribute = int Function(
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _c_LLVMModuleCreateWithName = ffi.Pointer<LLVMOpaqueModule> Function(
  ffi.Pointer<ffi.Int8> ModuleID,
);

typedef _dart_LLVMModuleCreateWithName = ffi.Pointer<LLVMOpaqueModule> Function(
  ffi.Pointer<ffi.Int8> ModuleID,
);

typedef _c_LLVMModuleCreateWithNameInContext = ffi.Pointer<LLVMOpaqueModule>
    Function(
  ffi.Pointer<ffi.Int8> ModuleID,
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMModuleCreateWithNameInContext = ffi.Pointer<LLVMOpaqueModule>
    Function(
  ffi.Pointer<ffi.Int8> ModuleID,
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMCloneModule = ffi.Pointer<LLVMOpaqueModule> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMCloneModule = ffi.Pointer<LLVMOpaqueModule> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMDisposeModule = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMDisposeModule = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetModuleIdentifier = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _dart_LLVMGetModuleIdentifier = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _c_LLVMSetModuleIdentifier = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Ident,
  ffi.Uint64 Len,
);

typedef _dart_LLVMSetModuleIdentifier = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Ident,
  int Len,
);

typedef _c_LLVMGetSourceFileName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _dart_LLVMGetSourceFileName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _c_LLVMSetSourceFileName = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 Len,
);

typedef _dart_LLVMSetSourceFileName = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  int Len,
);

typedef _c_LLVMGetDataLayoutStr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetDataLayoutStr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetDataLayout = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetDataLayout = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMSetDataLayout = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> DataLayoutStr,
);

typedef _dart_LLVMSetDataLayout = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> DataLayoutStr,
);

typedef _c_LLVMGetTarget = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetTarget = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMSetTarget = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Triple,
);

typedef _dart_LLVMSetTarget = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Triple,
);

typedef _c_LLVMCopyModuleFlagsMetadata = ffi.Pointer<LLVMOpaqueModuleFlagEntry>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _dart_LLVMCopyModuleFlagsMetadata
    = ffi.Pointer<LLVMOpaqueModuleFlagEntry> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _c_LLVMDisposeModuleFlagsMetadata = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
);

typedef _dart_LLVMDisposeModuleFlagsMetadata = void Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
);

typedef _c_LLVMModuleFlagEntriesGetFlagBehavior = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
  ffi.Uint32 Index,
);

typedef _dart_LLVMModuleFlagEntriesGetFlagBehavior = int Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
  int Index,
);

typedef _c_LLVMModuleFlagEntriesGetKey = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
  ffi.Uint32 Index,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _dart_LLVMModuleFlagEntriesGetKey = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
  int Index,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _c_LLVMModuleFlagEntriesGetMetadata = ffi.Pointer<LLVMOpaqueMetadata>
    Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
  ffi.Uint32 Index,
);

typedef _dart_LLVMModuleFlagEntriesGetMetadata = ffi.Pointer<LLVMOpaqueMetadata>
    Function(
  ffi.Pointer<LLVMOpaqueModuleFlagEntry> Entries,
  int Index,
);

typedef _c_LLVMGetModuleFlag = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Key,
  ffi.Uint64 KeyLen,
);

typedef _dart_LLVMGetModuleFlag = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Key,
  int KeyLen,
);

typedef _c_LLVMAddModuleFlag = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Int32 Behavior,
  ffi.Pointer<ffi.Int8> Key,
  ffi.Uint64 KeyLen,
  ffi.Pointer<LLVMOpaqueMetadata> Val,
);

typedef _dart_LLVMAddModuleFlag = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  int Behavior,
  ffi.Pointer<ffi.Int8> Key,
  int KeyLen,
  ffi.Pointer<LLVMOpaqueMetadata> Val,
);

typedef _c_LLVMDumpModule = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMDumpModule = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMPrintModuleToFile = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Filename,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ErrorMessage,
);

typedef _dart_LLVMPrintModuleToFile = int Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Filename,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ErrorMessage,
);

typedef _c_LLVMPrintModuleToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMPrintModuleToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetModuleInlineAsm = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _dart_LLVMGetModuleInlineAsm = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Uint64> Len,
);

typedef _c_LLVMSetModuleInlineAsm2 = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Asm,
  ffi.Uint64 Len,
);

typedef _dart_LLVMSetModuleInlineAsm2 = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Asm,
  int Len,
);

typedef _c_LLVMAppendModuleInlineAsm = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Asm,
  ffi.Uint64 Len,
);

typedef _dart_LLVMAppendModuleInlineAsm = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Asm,
  int Len,
);

typedef _c_LLVMGetInlineAsm = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> AsmString,
  ffi.Uint64 AsmStringSize,
  ffi.Pointer<ffi.Int8> Constraints,
  ffi.Uint64 ConstraintsSize,
  ffi.Int32 HasSideEffects,
  ffi.Int32 IsAlignStack,
  ffi.Int32 Dialect,
);

typedef _dart_LLVMGetInlineAsm = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> AsmString,
  int AsmStringSize,
  ffi.Pointer<ffi.Int8> Constraints,
  int ConstraintsSize,
  int HasSideEffects,
  int IsAlignStack,
  int Dialect,
);

typedef _c_LLVMGetModuleContext = ffi.Pointer<LLVMOpaqueContext> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetModuleContext = ffi.Pointer<LLVMOpaqueContext> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetTypeByName = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMGetTypeByName = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetFirstNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetFirstNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetLastNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetLastNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetNextNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMDNode,
);

typedef _dart_LLVMGetNextNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMDNode,
);

typedef _c_LLVMGetPreviousNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMDNode,
);

typedef _dart_LLVMGetPreviousNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMDNode,
);

typedef _c_LLVMGetNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 NameLen,
);

typedef _dart_LLVMGetNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  int NameLen,
);

typedef _c_LLVMGetOrInsertNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 NameLen,
);

typedef _dart_LLVMGetOrInsertNamedMetadata = ffi.Pointer<LLVMOpaqueNamedMDNode>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  int NameLen,
);

typedef _c_LLVMGetNamedMetadataName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMD,
  ffi.Pointer<ffi.Uint64> NameLen,
);

typedef _dart_LLVMGetNamedMetadataName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueNamedMDNode> NamedMD,
  ffi.Pointer<ffi.Uint64> NameLen,
);

typedef _c_LLVMGetNamedMetadataNumOperands = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMGetNamedMetadataNumOperands = int Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetNamedMetadataOperands = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Dest,
);

typedef _dart_LLVMGetNamedMetadataOperands = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Dest,
);

typedef _c_LLVMAddNamedMetadataOperand = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMAddNamedMetadataOperand = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetDebugLocDirectory = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _dart_LLVMGetDebugLocDirectory = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _c_LLVMGetDebugLocFilename = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _dart_LLVMGetDebugLocFilename = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _c_LLVMGetDebugLocLine = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMGetDebugLocLine = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetDebugLocColumn = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMGetDebugLocColumn = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMAddFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _dart_LLVMAddFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _c_LLVMGetNamedFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMGetNamedFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetFirstFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetFirstFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetLastFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetLastFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetNextFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetNextFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetPreviousFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetPreviousFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMSetModuleInlineAsm = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Asm,
);

typedef _dart_LLVMSetModuleInlineAsm = void Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Asm,
);

typedef _c_LLVMGetTypeKind = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMGetTypeKind = int Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMTypeIsSized = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMTypeIsSized = int Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMGetTypeContext = ffi.Pointer<LLVMOpaqueContext> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMGetTypeContext = ffi.Pointer<LLVMOpaqueContext> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMDumpType = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueType> Val,
);

typedef _dart_LLVMDumpType = void Function(
  ffi.Pointer<LLVMOpaqueType> Val,
);

typedef _c_LLVMPrintTypeToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueType> Val,
);

typedef _dart_LLVMPrintTypeToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueType> Val,
);

typedef _c_LLVMInt1TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMInt1TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMInt8TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMInt8TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMInt16TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMInt16TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMInt32TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMInt32TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMInt64TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMInt64TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMInt128TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMInt128TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMIntTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Uint32 NumBits,
);

typedef _dart_LLVMIntTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  int NumBits,
);

typedef _c_LLVMInt1Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMInt1Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMInt8Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMInt8Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMInt16Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMInt16Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMInt32Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMInt32Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMInt64Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMInt64Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMInt128Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMInt128Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMIntType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Uint32 NumBits,
);

typedef _dart_LLVMIntType = ffi.Pointer<LLVMOpaqueType> Function(
  int NumBits,
);

typedef _c_LLVMGetIntTypeWidth = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueType> IntegerTy,
);

typedef _dart_LLVMGetIntTypeWidth = int Function(
  ffi.Pointer<LLVMOpaqueType> IntegerTy,
);

typedef _c_LLVMHalfTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMHalfTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMFloatTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMFloatTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMDoubleTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMDoubleTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMX86FP80TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMX86FP80TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMFP128TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMFP128TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMPPCFP128TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMPPCFP128TypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMHalfType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMHalfType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMFloatType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMFloatType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMDoubleType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMDoubleType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMX86FP80Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMX86FP80Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMFP128Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMFP128Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMPPCFP128Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMPPCFP128Type = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMFunctionType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ReturnType,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  ffi.Uint32 ParamCount,
  ffi.Int32 IsVarArg,
);

typedef _dart_LLVMFunctionType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ReturnType,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  int ParamCount,
  int IsVarArg,
);

typedef _c_LLVMIsFunctionVarArg = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _dart_LLVMIsFunctionVarArg = int Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _c_LLVMGetReturnType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _dart_LLVMGetReturnType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _c_LLVMCountParamTypes = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _dart_LLVMCountParamTypes = int Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
);

typedef _c_LLVMGetParamTypes = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Dest,
);

typedef _dart_LLVMGetParamTypes = void Function(
  ffi.Pointer<LLVMOpaqueType> FunctionTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Dest,
);

typedef _c_LLVMStructTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
  ffi.Uint32 ElementCount,
  ffi.Int32 Packed,
);

typedef _dart_LLVMStructTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
  int ElementCount,
  int Packed,
);

typedef _c_LLVMStructType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
  ffi.Uint32 ElementCount,
  ffi.Int32 Packed,
);

typedef _dart_LLVMStructType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
  int ElementCount,
  int Packed,
);

typedef _c_LLVMStructCreateNamed = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMStructCreateNamed = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetStructName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMGetStructName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMStructSetBody = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
  ffi.Uint32 ElementCount,
  ffi.Int32 Packed,
);

typedef _dart_LLVMStructSetBody = void Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ElementTypes,
  int ElementCount,
  int Packed,
);

typedef _c_LLVMCountStructElementTypes = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _dart_LLVMCountStructElementTypes = int Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _c_LLVMGetStructElementTypes = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Dest,
);

typedef _dart_LLVMGetStructElementTypes = void Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Dest,
);

typedef _c_LLVMStructGetTypeAtIndex = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  ffi.Uint32 i,
);

typedef _dart_LLVMStructGetTypeAtIndex = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  int i,
);

typedef _c_LLVMIsPackedStruct = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _dart_LLVMIsPackedStruct = int Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _c_LLVMIsOpaqueStruct = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _dart_LLVMIsOpaqueStruct = int Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _c_LLVMIsLiteralStruct = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _dart_LLVMIsLiteralStruct = int Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
);

typedef _c_LLVMGetElementType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMGetElementType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMGetSubtypes = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueType> Tp,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Arr,
);

typedef _dart_LLVMGetSubtypes = void Function(
  ffi.Pointer<LLVMOpaqueType> Tp,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> Arr,
);

typedef _c_LLVMGetNumContainedTypes = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueType> Tp,
);

typedef _dart_LLVMGetNumContainedTypes = int Function(
  ffi.Pointer<LLVMOpaqueType> Tp,
);

typedef _c_LLVMArrayType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ElementType,
  ffi.Uint32 ElementCount,
);

typedef _dart_LLVMArrayType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ElementType,
  int ElementCount,
);

typedef _c_LLVMGetArrayLength = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueType> ArrayTy,
);

typedef _dart_LLVMGetArrayLength = int Function(
  ffi.Pointer<LLVMOpaqueType> ArrayTy,
);

typedef _c_LLVMPointerType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ElementType,
  ffi.Uint32 AddressSpace,
);

typedef _dart_LLVMPointerType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ElementType,
  int AddressSpace,
);

typedef _c_LLVMGetPointerAddressSpace = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueType> PointerTy,
);

typedef _dart_LLVMGetPointerAddressSpace = int Function(
  ffi.Pointer<LLVMOpaqueType> PointerTy,
);

typedef _c_LLVMVectorType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ElementType,
  ffi.Uint32 ElementCount,
);

typedef _dart_LLVMVectorType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueType> ElementType,
  int ElementCount,
);

typedef _c_LLVMGetVectorSize = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueType> VectorTy,
);

typedef _dart_LLVMGetVectorSize = int Function(
  ffi.Pointer<LLVMOpaqueType> VectorTy,
);

typedef _c_LLVMVoidTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMVoidTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMLabelTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMLabelTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMX86MMXTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMX86MMXTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMTokenTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMTokenTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMMetadataTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMMetadataTypeInContext = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMVoidType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMVoidType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMLabelType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMLabelType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMX86MMXType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _dart_LLVMX86MMXType = ffi.Pointer<LLVMOpaqueType> Function();

typedef _c_LLVMTypeOf = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMTypeOf = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetValueKind = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMGetValueKind = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetValueName2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Uint64> Length,
);

typedef _dart_LLVMGetValueName2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Uint64> Length,
);

typedef _c_LLVMSetValueName2 = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 NameLen,
);

typedef _dart_LLVMSetValueName2 = void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
  int NameLen,
);

typedef _c_LLVMDumpValue = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMDumpValue = void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMPrintValueToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMPrintValueToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMReplaceAllUsesWith = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> OldVal,
  ffi.Pointer<LLVMOpaqueValue> NewVal,
);

typedef _dart_LLVMReplaceAllUsesWith = void Function(
  ffi.Pointer<LLVMOpaqueValue> OldVal,
  ffi.Pointer<LLVMOpaqueValue> NewVal,
);

typedef _c_LLVMIsConstant = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsConstant = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsUndef = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsUndef = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAArgument = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAArgument = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsABasicBlock = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsABasicBlock = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAInlineAsm = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAInlineAsm = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAUser = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAUser = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstant = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstant = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsABlockAddress = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsABlockAddress = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantAggregateZero = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantAggregateZero = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantArray = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantArray = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantDataSequential = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantDataSequential = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantDataArray = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantDataArray = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantDataVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantDataVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantExpr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantExpr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantPointerNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantPointerNull = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantStruct = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantStruct = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantTokenNone = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantTokenNone = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAConstantVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAConstantVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAGlobalValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAGlobalValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAGlobalObject = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAGlobalObject = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFunction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAGlobalVariable = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAGlobalVariable = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAUndefValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAUndefValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAUnaryOperator = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAUnaryOperator = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsABinaryOperator = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsABinaryOperator = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACallInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACallInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAIntrinsicInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAIntrinsicInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsADbgInfoIntrinsic = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsADbgInfoIntrinsic = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsADbgVariableIntrinsic = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsADbgVariableIntrinsic = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsADbgDeclareInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsADbgDeclareInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsADbgLabelInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsADbgLabelInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAMemIntrinsic = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAMemIntrinsic = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAMemCpyInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAMemCpyInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAMemMoveInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAMemMoveInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAMemSetInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAMemSetInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACmpInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACmpInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFCmpInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFCmpInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAICmpInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAICmpInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAExtractElementInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAExtractElementInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAGetElementPtrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAGetElementPtrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAInsertElementInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAInsertElementInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAInsertValueInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAInsertValueInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsALandingPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsALandingPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAPHINode = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAPHINode = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsASelectInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsASelectInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAShuffleVectorInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAShuffleVectorInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAStoreInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAStoreInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsABranchInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsABranchInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAIndirectBrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAIndirectBrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAInvokeInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAInvokeInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAReturnInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAReturnInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsASwitchInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsASwitchInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAUnreachableInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAUnreachableInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAResumeInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAResumeInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACleanupReturnInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACleanupReturnInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACatchReturnInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACatchReturnInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACatchSwitchInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACatchSwitchInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACallBrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACallBrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFuncletPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFuncletPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACatchPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACatchPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACleanupPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACleanupPadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAUnaryInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAUnaryInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAAllocaInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAAllocaInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsACastInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsACastInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAAddrSpaceCastInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAAddrSpaceCastInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsABitCastInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsABitCastInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFPExtInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFPExtInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFPToSIInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFPToSIInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFPToUIInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFPToUIInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFPTruncInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFPTruncInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAIntToPtrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAIntToPtrInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAPtrToIntInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAPtrToIntInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsASExtInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsASExtInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsASIToFPInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsASIToFPInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsATruncInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsATruncInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAUIToFPInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAUIToFPInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAZExtInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAZExtInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAExtractValueInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAExtractValueInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsALoadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsALoadInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAVAArgInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAVAArgInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFreezeInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFreezeInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAAtomicCmpXchgInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAAtomicCmpXchgInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAAtomicRMWInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAAtomicRMWInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAFenceInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAFenceInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAMDNode = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAMDNode = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMIsAMDString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsAMDString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetValueName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMGetValueName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMSetValueName = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMSetValueName = void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetFirstUse = ffi.Pointer<LLVMOpaqueUse> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMGetFirstUse = ffi.Pointer<LLVMOpaqueUse> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetNextUse = ffi.Pointer<LLVMOpaqueUse> Function(
  ffi.Pointer<LLVMOpaqueUse> U,
);

typedef _dart_LLVMGetNextUse = ffi.Pointer<LLVMOpaqueUse> Function(
  ffi.Pointer<LLVMOpaqueUse> U,
);

typedef _c_LLVMGetUser = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueUse> U,
);

typedef _dart_LLVMGetUser = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueUse> U,
);

typedef _c_LLVMGetUsedValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueUse> U,
);

typedef _dart_LLVMGetUsedValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueUse> U,
);

typedef _c_LLVMGetOperand = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Uint32 Index,
);

typedef _dart_LLVMGetOperand = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  int Index,
);

typedef _c_LLVMGetOperandUse = ffi.Pointer<LLVMOpaqueUse> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Uint32 Index,
);

typedef _dart_LLVMGetOperandUse = ffi.Pointer<LLVMOpaqueUse> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  int Index,
);

typedef _c_LLVMSetOperand = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> User,
  ffi.Uint32 Index,
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMSetOperand = void Function(
  ffi.Pointer<LLVMOpaqueValue> User,
  int Index,
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetNumOperands = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMGetNumOperands = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMConstNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMConstNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMConstAllOnes = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMConstAllOnes = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMGetUndef = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMGetUndef = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMIsNull = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMIsNull = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMConstPointerNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMConstPointerNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMConstInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  ffi.Uint64 N,
  ffi.Int32 SignExtend,
);

typedef _dart_LLVMConstInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  int N,
  int SignExtend,
);

typedef _c_LLVMConstIntOfArbitraryPrecision = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  ffi.Uint32 NumWords,
  ffi.Pointer<ffi.Uint64> Words,
);

typedef _dart_LLVMConstIntOfArbitraryPrecision = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  int NumWords,
  ffi.Pointer<ffi.Uint64> Words,
);

typedef _c_LLVMConstIntOfString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  ffi.Pointer<ffi.Int8> Text,
  ffi.Uint8 Radix,
);

typedef _dart_LLVMConstIntOfString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  ffi.Pointer<ffi.Int8> Text,
  int Radix,
);

typedef _c_LLVMConstIntOfStringAndSize = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  ffi.Pointer<ffi.Int8> Text,
  ffi.Uint32 SLen,
  ffi.Uint8 Radix,
);

typedef _dart_LLVMConstIntOfStringAndSize = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueType> IntTy,
  ffi.Pointer<ffi.Int8> Text,
  int SLen,
  int Radix,
);

typedef _c_LLVMConstReal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> RealTy,
  ffi.Double N,
);

typedef _dart_LLVMConstReal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> RealTy,
  double N,
);

typedef _c_LLVMConstRealOfString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> RealTy,
  ffi.Pointer<ffi.Int8> Text,
);

typedef _dart_LLVMConstRealOfString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> RealTy,
  ffi.Pointer<ffi.Int8> Text,
);

typedef _c_LLVMConstRealOfStringAndSize = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> RealTy,
  ffi.Pointer<ffi.Int8> Text,
  ffi.Uint32 SLen,
);

typedef _dart_LLVMConstRealOfStringAndSize = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueType> RealTy,
  ffi.Pointer<ffi.Int8> Text,
  int SLen,
);

typedef _c_LLVMConstIntGetZExtValue = ffi.Uint64 Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMConstIntGetZExtValue = int Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMConstIntGetSExtValue = ffi.Int64 Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMConstIntGetSExtValue = int Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMConstRealGetDouble = ffi.Double Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Int32> losesInfo,
);

typedef _dart_LLVMConstRealGetDouble = double Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Int32> losesInfo,
);

typedef _c_LLVMConstStringInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Str,
  ffi.Uint32 Length,
  ffi.Int32 DontNullTerminate,
);

typedef _dart_LLVMConstStringInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Str,
  int Length,
  int DontNullTerminate,
);

typedef _c_LLVMConstString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Int8> Str,
  ffi.Uint32 Length,
  ffi.Int32 DontNullTerminate,
);

typedef _dart_LLVMConstString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Int8> Str,
  int Length,
  int DontNullTerminate,
);

typedef _c_LLVMIsConstantString = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> c,
);

typedef _dart_LLVMIsConstantString = int Function(
  ffi.Pointer<LLVMOpaqueValue> c,
);

typedef _c_LLVMGetAsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> c,
  ffi.Pointer<ffi.Uint64> Length,
);

typedef _dart_LLVMGetAsString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> c,
  ffi.Pointer<ffi.Uint64> Length,
);

typedef _c_LLVMConstStructInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  ffi.Uint32 Count,
  ffi.Int32 Packed,
);

typedef _dart_LLVMConstStructInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  int Count,
  int Packed,
);

typedef _c_LLVMConstStruct = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  ffi.Uint32 Count,
  ffi.Int32 Packed,
);

typedef _dart_LLVMConstStruct = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  int Count,
  int Packed,
);

typedef _c_LLVMConstArray = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> ElementTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  ffi.Uint32 Length,
);

typedef _dart_LLVMConstArray = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> ElementTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  int Length,
);

typedef _c_LLVMConstNamedStruct = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  ffi.Uint32 Count,
);

typedef _dart_LLVMConstNamedStruct = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> StructTy,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantVals,
  int Count,
);

typedef _c_LLVMGetElementAsConstant = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 idx,
);

typedef _dart_LLVMGetElementAsConstant = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int idx,
);

typedef _c_LLVMConstVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ScalarConstantVals,
  ffi.Uint32 Size,
);

typedef _dart_LLVMConstVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ScalarConstantVals,
  int Size,
);

typedef _c_LLVMGetConstOpcode = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMGetConstOpcode = int Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMAlignOf = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMAlignOf = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMSizeOf = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _dart_LLVMSizeOf = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
);

typedef _c_LLVMConstNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMConstNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMConstNSWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMConstNSWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMConstNUWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMConstNUWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMConstFNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMConstFNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMConstNot = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMConstNot = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMConstAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstNSWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstNSWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstNUWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstNUWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstFAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstFAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstNSWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstNSWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstNUWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstNUWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstFSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstFSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstNSWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstNSWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstNUWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstNUWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstFMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstFMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstExactUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstExactUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstExactSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstExactSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstFDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstFDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstURem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstURem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstSRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstSRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstFRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstFRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstAnd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstAnd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstOr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstOr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstXor = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstXor = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstICmp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Int32 Predicate,
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstICmp = ffi.Pointer<LLVMOpaqueValue> Function(
  int Predicate,
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstFCmp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Int32 Predicate,
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstFCmp = ffi.Pointer<LLVMOpaqueValue> Function(
  int Predicate,
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstShl = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstShl = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstLShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstLShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstAShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _dart_LLVMConstAShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LHSConstant,
  ffi.Pointer<LLVMOpaqueValue> RHSConstant,
);

typedef _c_LLVMConstGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  ffi.Uint32 NumIndices,
);

typedef _dart_LLVMConstGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  int NumIndices,
);

typedef _c_LLVMConstGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  ffi.Uint32 NumIndices,
);

typedef _dart_LLVMConstGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  int NumIndices,
);

typedef _c_LLVMConstInBoundsGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  ffi.Uint32 NumIndices,
);

typedef _dart_LLVMConstInBoundsGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  int NumIndices,
);

typedef _c_LLVMConstInBoundsGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  ffi.Uint32 NumIndices,
);

typedef _dart_LLVMConstInBoundsGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> ConstantIndices,
  int NumIndices,
);

typedef _c_LLVMConstTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstSExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstSExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstZExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstZExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstFPTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstFPTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstFPExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstFPExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstUIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstUIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstSIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstSIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstFPToUI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstFPToUI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstFPToSI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstFPToSI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstPtrToInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstPtrToInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstIntToPtr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstIntToPtr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstAddrSpaceCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstAddrSpaceCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstZExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstZExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstSExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstSExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstTruncOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstTruncOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstPointerCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstPointerCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstIntCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
  ffi.Int32 isSigned,
);

typedef _dart_LLVMConstIntCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
  int isSigned,
);

typedef _c_LLVMConstFPCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _dart_LLVMConstFPCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
  ffi.Pointer<LLVMOpaqueType> ToType,
);

typedef _c_LLVMConstSelect = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantCondition,
  ffi.Pointer<LLVMOpaqueValue> ConstantIfTrue,
  ffi.Pointer<LLVMOpaqueValue> ConstantIfFalse,
);

typedef _dart_LLVMConstSelect = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> ConstantCondition,
  ffi.Pointer<LLVMOpaqueValue> ConstantIfTrue,
  ffi.Pointer<LLVMOpaqueValue> ConstantIfFalse,
);

typedef _c_LLVMConstExtractElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> VectorConstant,
  ffi.Pointer<LLVMOpaqueValue> IndexConstant,
);

typedef _dart_LLVMConstExtractElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> VectorConstant,
  ffi.Pointer<LLVMOpaqueValue> IndexConstant,
);

typedef _c_LLVMConstInsertElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> VectorConstant,
  ffi.Pointer<LLVMOpaqueValue> ElementValueConstant,
  ffi.Pointer<LLVMOpaqueValue> IndexConstant,
);

typedef _dart_LLVMConstInsertElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> VectorConstant,
  ffi.Pointer<LLVMOpaqueValue> ElementValueConstant,
  ffi.Pointer<LLVMOpaqueValue> IndexConstant,
);

typedef _c_LLVMConstShuffleVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> VectorAConstant,
  ffi.Pointer<LLVMOpaqueValue> VectorBConstant,
  ffi.Pointer<LLVMOpaqueValue> MaskConstant,
);

typedef _dart_LLVMConstShuffleVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> VectorAConstant,
  ffi.Pointer<LLVMOpaqueValue> VectorBConstant,
  ffi.Pointer<LLVMOpaqueValue> MaskConstant,
);

typedef _c_LLVMConstExtractValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> AggConstant,
  ffi.Pointer<ffi.Uint32> IdxList,
  ffi.Uint32 NumIdx,
);

typedef _dart_LLVMConstExtractValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> AggConstant,
  ffi.Pointer<ffi.Uint32> IdxList,
  int NumIdx,
);

typedef _c_LLVMConstInsertValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> AggConstant,
  ffi.Pointer<LLVMOpaqueValue> ElementValueConstant,
  ffi.Pointer<ffi.Uint32> IdxList,
  ffi.Uint32 NumIdx,
);

typedef _dart_LLVMConstInsertValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> AggConstant,
  ffi.Pointer<LLVMOpaqueValue> ElementValueConstant,
  ffi.Pointer<ffi.Uint32> IdxList,
  int NumIdx,
);

typedef _c_LLVMBlockAddress = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMBlockAddress = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMConstInlineAsm = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> AsmString,
  ffi.Pointer<ffi.Int8> Constraints,
  ffi.Int32 HasSideEffects,
  ffi.Int32 IsAlignStack,
);

typedef _dart_LLVMConstInlineAsm = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> AsmString,
  ffi.Pointer<ffi.Int8> Constraints,
  int HasSideEffects,
  int IsAlignStack,
);

typedef _c_LLVMGetGlobalParent = ffi.Pointer<LLVMOpaqueModule> Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGetGlobalParent = ffi.Pointer<LLVMOpaqueModule> Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMIsDeclaration = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMIsDeclaration = int Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMGetLinkage = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGetLinkage = int Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMSetLinkage = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Int32 Linkage,
);

typedef _dart_LLVMSetLinkage = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  int Linkage,
);

typedef _c_LLVMGetSection = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGetSection = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMSetSection = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Pointer<ffi.Int8> Section,
);

typedef _dart_LLVMSetSection = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Pointer<ffi.Int8> Section,
);

typedef _c_LLVMGetVisibility = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGetVisibility = int Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMSetVisibility = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Int32 Viz,
);

typedef _dart_LLVMSetVisibility = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  int Viz,
);

typedef _c_LLVMGetDLLStorageClass = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGetDLLStorageClass = int Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMSetDLLStorageClass = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Int32 Class,
);

typedef _dart_LLVMSetDLLStorageClass = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  int Class,
);

typedef _c_LLVMGetUnnamedAddress = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGetUnnamedAddress = int Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMSetUnnamedAddress = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Int32 UnnamedAddr,
);

typedef _dart_LLVMSetUnnamedAddress = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  int UnnamedAddr,
);

typedef _c_LLVMGlobalGetValueType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGlobalGetValueType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMHasUnnamedAddr = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMHasUnnamedAddr = int Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMSetUnnamedAddr = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Int32 HasUnnamedAddr,
);

typedef _dart_LLVMSetUnnamedAddr = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  int HasUnnamedAddr,
);

typedef _c_LLVMGetAlignment = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> V,
);

typedef _dart_LLVMGetAlignment = int Function(
  ffi.Pointer<LLVMOpaqueValue> V,
);

typedef _c_LLVMSetAlignment = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Uint32 Bytes,
);

typedef _dart_LLVMSetAlignment = void Function(
  ffi.Pointer<LLVMOpaqueValue> V,
  int Bytes,
);

typedef _c_LLVMGlobalSetMetadata = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Uint32 Kind,
  ffi.Pointer<LLVMOpaqueMetadata> MD,
);

typedef _dart_LLVMGlobalSetMetadata = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  int Kind,
  ffi.Pointer<LLVMOpaqueMetadata> MD,
);

typedef _c_LLVMGlobalEraseMetadata = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  ffi.Uint32 Kind,
);

typedef _dart_LLVMGlobalEraseMetadata = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
  int Kind,
);

typedef _c_LLVMGlobalClearMetadata = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _dart_LLVMGlobalClearMetadata = void Function(
  ffi.Pointer<LLVMOpaqueValue> Global,
);

typedef _c_LLVMGlobalCopyAllMetadata = ffi.Pointer<LLVMOpaqueValueMetadataEntry>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Value,
  ffi.Pointer<ffi.Uint64> NumEntries,
);

typedef _dart_LLVMGlobalCopyAllMetadata
    = ffi.Pointer<LLVMOpaqueValueMetadataEntry> Function(
  ffi.Pointer<LLVMOpaqueValue> Value,
  ffi.Pointer<ffi.Uint64> NumEntries,
);

typedef _c_LLVMDisposeValueMetadataEntries = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
);

typedef _dart_LLVMDisposeValueMetadataEntries = void Function(
  ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
);

typedef _c_LLVMValueMetadataEntriesGetKind = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
  ffi.Uint32 Index,
);

typedef _dart_LLVMValueMetadataEntriesGetKind = int Function(
  ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
  int Index,
);

typedef _c_LLVMValueMetadataEntriesGetMetadata = ffi.Pointer<LLVMOpaqueMetadata>
    Function(
  ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
  ffi.Uint32 Index,
);

typedef _dart_LLVMValueMetadataEntriesGetMetadata
    = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueValueMetadataEntry> Entries,
  int Index,
);

typedef _c_LLVMAddGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMAddGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMAddGlobalInAddressSpace = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint32 AddressSpace,
);

typedef _dart_LLVMAddGlobalInAddressSpace = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
  int AddressSpace,
);

typedef _c_LLVMGetNamedGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMGetNamedGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetFirstGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetFirstGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetLastGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetLastGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetNextGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMGetNextGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMGetPreviousGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMGetPreviousGlobal = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMDeleteGlobal = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMDeleteGlobal = void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMGetInitializer = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMGetInitializer = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMSetInitializer = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _dart_LLVMSetInitializer = void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ffi.Pointer<LLVMOpaqueValue> ConstantVal,
);

typedef _c_LLVMIsThreadLocal = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMIsThreadLocal = int Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMSetThreadLocal = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ffi.Int32 IsThreadLocal,
);

typedef _dart_LLVMSetThreadLocal = void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  int IsThreadLocal,
);

typedef _c_LLVMIsGlobalConstant = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMIsGlobalConstant = int Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMSetGlobalConstant = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ffi.Int32 IsConstant,
);

typedef _dart_LLVMSetGlobalConstant = void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  int IsConstant,
);

typedef _c_LLVMGetThreadLocalMode = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMGetThreadLocalMode = int Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMSetThreadLocalMode = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ffi.Int32 Mode,
);

typedef _dart_LLVMSetThreadLocalMode = void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  int Mode,
);

typedef _c_LLVMIsExternallyInitialized = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _dart_LLVMIsExternallyInitialized = int Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
);

typedef _c_LLVMSetExternallyInitialized = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  ffi.Int32 IsExtInit,
);

typedef _dart_LLVMSetExternallyInitialized = void Function(
  ffi.Pointer<LLVMOpaqueValue> GlobalVar,
  int IsExtInit,
);

typedef _c_LLVMAddAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Aliasee,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMAddAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Aliasee,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetNamedGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 NameLen,
);

typedef _dart_LLVMGetNamedGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  int NameLen,
);

typedef _c_LLVMGetFirstGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetFirstGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetLastGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetLastGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetNextGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GA,
);

typedef _dart_LLVMGetNextGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GA,
);

typedef _c_LLVMGetPreviousGlobalAlias = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> GA,
);

typedef _dart_LLVMGetPreviousGlobalAlias = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> GA,
);

typedef _c_LLVMAliasGetAliasee = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Alias,
);

typedef _dart_LLVMAliasGetAliasee = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Alias,
);

typedef _c_LLVMAliasSetAliasee = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Alias,
  ffi.Pointer<LLVMOpaqueValue> Aliasee,
);

typedef _dart_LLVMAliasSetAliasee = void Function(
  ffi.Pointer<LLVMOpaqueValue> Alias,
  ffi.Pointer<LLVMOpaqueValue> Aliasee,
);

typedef _c_LLVMDeleteFunction = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMDeleteFunction = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMHasPersonalityFn = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMHasPersonalityFn = int Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetPersonalityFn = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetPersonalityFn = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMSetPersonalityFn = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<LLVMOpaqueValue> PersonalityFn,
);

typedef _dart_LLVMSetPersonalityFn = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<LLVMOpaqueValue> PersonalityFn,
);

typedef _c_LLVMLookupIntrinsicID = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 NameLen,
);

typedef _dart_LLVMLookupIntrinsicID = int Function(
  ffi.Pointer<ffi.Int8> Name,
  int NameLen,
);

typedef _c_LLVMGetIntrinsicID = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetIntrinsicID = int Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetIntrinsicDeclaration = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> Mod,
  ffi.Uint32 ID,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  ffi.Uint64 ParamCount,
);

typedef _dart_LLVMGetIntrinsicDeclaration = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueModule> Mod,
  int ID,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  int ParamCount,
);

typedef _c_LLVMIntrinsicGetType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> Ctx,
  ffi.Uint32 ID,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  ffi.Uint64 ParamCount,
);

typedef _dart_LLVMIntrinsicGetType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueContext> Ctx,
  int ID,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  int ParamCount,
);

typedef _c_LLVMIntrinsicGetName = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 ID,
  ffi.Pointer<ffi.Uint64> NameLength,
);

typedef _dart_LLVMIntrinsicGetName = ffi.Pointer<ffi.Int8> Function(
  int ID,
  ffi.Pointer<ffi.Uint64> NameLength,
);

typedef _c_LLVMIntrinsicCopyOverloadedName = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 ID,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  ffi.Uint64 ParamCount,
  ffi.Pointer<ffi.Uint64> NameLength,
);

typedef _dart_LLVMIntrinsicCopyOverloadedName = ffi.Pointer<ffi.Int8> Function(
  int ID,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueType>> ParamTypes,
  int ParamCount,
  ffi.Pointer<ffi.Uint64> NameLength,
);

typedef _c_LLVMIntrinsicIsOverloaded = ffi.Int32 Function(
  ffi.Uint32 ID,
);

typedef _dart_LLVMIntrinsicIsOverloaded = int Function(
  int ID,
);

typedef _c_LLVMGetFunctionCallConv = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetFunctionCallConv = int Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMSetFunctionCallConv = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Uint32 CC,
);

typedef _dart_LLVMSetFunctionCallConv = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  int CC,
);

typedef _c_LLVMGetGC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetGC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMSetGC = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMSetGC = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMAddAttributeAtIndex = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Uint32 Idx,
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _dart_LLVMAddAttributeAtIndex = void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  int Idx,
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _c_LLVMGetAttributeCountAtIndex = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Uint32 Idx,
);

typedef _dart_LLVMGetAttributeCountAtIndex = int Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  int Idx,
);

typedef _c_LLVMGetAttributesAtIndex = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueAttributeRef>> Attrs,
);

typedef _dart_LLVMGetAttributesAtIndex = void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  int Idx,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueAttributeRef>> Attrs,
);

typedef _c_LLVMGetEnumAttributeAtIndex = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Uint32 Idx,
  ffi.Uint32 KindID,
);

typedef _dart_LLVMGetEnumAttributeAtIndex = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  int Idx,
  int KindID,
);

typedef _c_LLVMGetStringAttributeAtIndex = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Int8> K,
  ffi.Uint32 KLen,
);

typedef _dart_LLVMGetStringAttributeAtIndex
    = ffi.Pointer<LLVMOpaqueAttributeRef> Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  int Idx,
  ffi.Pointer<ffi.Int8> K,
  int KLen,
);

typedef _c_LLVMRemoveEnumAttributeAtIndex = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Uint32 Idx,
  ffi.Uint32 KindID,
);

typedef _dart_LLVMRemoveEnumAttributeAtIndex = void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  int Idx,
  int KindID,
);

typedef _c_LLVMRemoveStringAttributeAtIndex = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Int8> K,
  ffi.Uint32 KLen,
);

typedef _dart_LLVMRemoveStringAttributeAtIndex = void Function(
  ffi.Pointer<LLVMOpaqueValue> F,
  int Idx,
  ffi.Pointer<ffi.Int8> K,
  int KLen,
);

typedef _c_LLVMAddTargetDependentFunctionAttr = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> A,
  ffi.Pointer<ffi.Int8> V,
);

typedef _dart_LLVMAddTargetDependentFunctionAttr = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> A,
  ffi.Pointer<ffi.Int8> V,
);

typedef _c_LLVMCountParams = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMCountParams = int Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetParams = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Params,
);

typedef _dart_LLVMGetParams = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Params,
);

typedef _c_LLVMGetParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Uint32 Index,
);

typedef _dart_LLVMGetParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  int Index,
);

typedef _c_LLVMGetParamParent = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetParamParent = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetFirstParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetFirstParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetLastParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetLastParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetNextParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Arg,
);

typedef _dart_LLVMGetNextParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Arg,
);

typedef _c_LLVMGetPreviousParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Arg,
);

typedef _dart_LLVMGetPreviousParam = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Arg,
);

typedef _c_LLVMSetParamAlignment = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Arg,
  ffi.Uint32 Align,
);

typedef _dart_LLVMSetParamAlignment = void Function(
  ffi.Pointer<LLVMOpaqueValue> Arg,
  int Align,
);

typedef _c_LLVMAddGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 NameLen,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Uint32 AddrSpace,
  ffi.Pointer<LLVMOpaqueValue> Resolver,
);

typedef _dart_LLVMAddGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  int NameLen,
  ffi.Pointer<LLVMOpaqueType> Ty,
  int AddrSpace,
  ffi.Pointer<LLVMOpaqueValue> Resolver,
);

typedef _c_LLVMGetNamedGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  ffi.Uint64 NameLen,
);

typedef _dart_LLVMGetNamedGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Name,
  int NameLen,
);

typedef _c_LLVMGetFirstGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetFirstGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetLastGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMGetLastGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMGetNextGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _dart_LLVMGetNextGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _c_LLVMGetPreviousGlobalIFunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _dart_LLVMGetPreviousGlobalIFunc = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _c_LLVMGetGlobalIFuncResolver = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _dart_LLVMGetGlobalIFuncResolver = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _c_LLVMSetGlobalIFuncResolver = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
  ffi.Pointer<LLVMOpaqueValue> Resolver,
);

typedef _dart_LLVMSetGlobalIFuncResolver = void Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
  ffi.Pointer<LLVMOpaqueValue> Resolver,
);

typedef _c_LLVMEraseGlobalIFunc = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _dart_LLVMEraseGlobalIFunc = void Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _c_LLVMRemoveGlobalIFunc = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _dart_LLVMRemoveGlobalIFunc = void Function(
  ffi.Pointer<LLVMOpaqueValue> IFunc,
);

typedef _c_LLVMMDStringInContext2 = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Str,
  ffi.Uint64 SLen,
);

typedef _dart_LLVMMDStringInContext2 = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Str,
  int SLen,
);

typedef _c_LLVMMDNodeInContext2 = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueMetadata>> MDs,
  ffi.Uint64 Count,
);

typedef _dart_LLVMMDNodeInContext2 = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueMetadata>> MDs,
  int Count,
);

typedef _c_LLVMMetadataAsValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<LLVMOpaqueMetadata> MD,
);

typedef _dart_LLVMMetadataAsValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<LLVMOpaqueMetadata> MD,
);

typedef _c_LLVMValueAsMetadata = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMValueAsMetadata = ffi.Pointer<LLVMOpaqueMetadata> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetMDString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _dart_LLVMGetMDString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Uint32> Length,
);

typedef _c_LLVMGetMDNodeNumOperands = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> V,
);

typedef _dart_LLVMGetMDNodeNumOperands = int Function(
  ffi.Pointer<LLVMOpaqueValue> V,
);

typedef _c_LLVMGetMDNodeOperands = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Dest,
);

typedef _dart_LLVMGetMDNodeOperands = void Function(
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Dest,
);

typedef _c_LLVMMDStringInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Str,
  ffi.Uint32 SLen,
);

typedef _dart_LLVMMDStringInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Str,
  int SLen,
);

typedef _c_LLVMMDString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Int8> Str,
  ffi.Uint32 SLen,
);

typedef _dart_LLVMMDString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Int8> Str,
  int SLen,
);

typedef _c_LLVMMDNodeInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Vals,
  ffi.Uint32 Count,
);

typedef _dart_LLVMMDNodeInContext = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Vals,
  int Count,
);

typedef _c_LLVMMDNode = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Vals,
  ffi.Uint32 Count,
);

typedef _dart_LLVMMDNode = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Vals,
  int Count,
);

typedef _c_LLVMBasicBlockAsValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMBasicBlockAsValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMValueIsBasicBlock = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMValueIsBasicBlock = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMValueAsBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMValueAsBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetBasicBlockName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMGetBasicBlockName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMGetBasicBlockParent = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMGetBasicBlockParent = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMGetBasicBlockTerminator = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMGetBasicBlockTerminator = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMCountBasicBlocks = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMCountBasicBlocks = int Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetBasicBlocks = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> BasicBlocks,
);

typedef _dart_LLVMGetBasicBlocks = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> BasicBlocks,
);

typedef _c_LLVMGetFirstBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetFirstBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetLastBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetLastBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMGetNextBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMGetNextBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMGetPreviousBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMGetPreviousBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMGetEntryBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMGetEntryBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMInsertExistingBasicBlockAfterInsertBlock = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMInsertExistingBasicBlockAfterInsertBlock = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMAppendExistingBasicBlock = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMAppendExistingBasicBlock = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMCreateBasicBlockInContext = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMCreateBasicBlockInContext = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMAppendBasicBlockInContext = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMAppendBasicBlockInContext = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMAppendBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMAppendBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMInsertBasicBlockInContext = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMInsertBasicBlockInContext = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMInsertBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> InsertBeforeBB,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMInsertBasicBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> InsertBeforeBB,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMDeleteBasicBlock = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMDeleteBasicBlock = void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMRemoveBasicBlockFromParent = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMRemoveBasicBlockFromParent = void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMMoveBasicBlockBefore = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ffi.Pointer<LLVMOpaqueBasicBlock> MovePos,
);

typedef _dart_LLVMMoveBasicBlockBefore = void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ffi.Pointer<LLVMOpaqueBasicBlock> MovePos,
);

typedef _c_LLVMMoveBasicBlockAfter = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ffi.Pointer<LLVMOpaqueBasicBlock> MovePos,
);

typedef _dart_LLVMMoveBasicBlockAfter = void Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
  ffi.Pointer<LLVMOpaqueBasicBlock> MovePos,
);

typedef _c_LLVMGetFirstInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMGetFirstInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMGetLastInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMGetLastInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMHasMetadata = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _dart_LLVMHasMetadata = int Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
);

typedef _c_LLVMGetMetadata = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Uint32 KindID,
);

typedef _dart_LLVMGetMetadata = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  int KindID,
);

typedef _c_LLVMSetMetadata = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Uint32 KindID,
  ffi.Pointer<LLVMOpaqueValue> Node,
);

typedef _dart_LLVMSetMetadata = void Function(
  ffi.Pointer<LLVMOpaqueValue> Val,
  int KindID,
  ffi.Pointer<LLVMOpaqueValue> Node,
);

typedef _c_LLVMInstructionGetAllMetadataOtherThanDebugLoc
    = ffi.Pointer<LLVMOpaqueValueMetadataEntry> Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
  ffi.Pointer<ffi.Uint64> NumEntries,
);

typedef _dart_LLVMInstructionGetAllMetadataOtherThanDebugLoc
    = ffi.Pointer<LLVMOpaqueValueMetadataEntry> Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
  ffi.Pointer<ffi.Uint64> NumEntries,
);

typedef _c_LLVMGetInstructionParent = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetInstructionParent = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetNextInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetNextInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetPreviousInstruction = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetPreviousInstruction = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMInstructionRemoveFromParent = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMInstructionRemoveFromParent = void Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMInstructionEraseFromParent = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMInstructionEraseFromParent = void Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetInstructionOpcode = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetInstructionOpcode = int Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetICmpPredicate = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetICmpPredicate = int Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetFCmpPredicate = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetFCmpPredicate = int Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMInstructionClone = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMInstructionClone = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMIsATerminatorInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMIsATerminatorInst = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetNumArgOperands = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _dart_LLVMGetNumArgOperands = int Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _c_LLVMSetInstructionCallConv = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
  ffi.Uint32 CC,
);

typedef _dart_LLVMSetInstructionCallConv = void Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
  int CC,
);

typedef _c_LLVMGetInstructionCallConv = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _dart_LLVMGetInstructionCallConv = int Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _c_LLVMSetInstrParamAlignment = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
  ffi.Uint32 index,
  ffi.Uint32 Align,
);

typedef _dart_LLVMSetInstrParamAlignment = void Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
  int index,
  int Align,
);

typedef _c_LLVMAddCallSiteAttribute = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 Idx,
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _dart_LLVMAddCallSiteAttribute = void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int Idx,
  ffi.Pointer<LLVMOpaqueAttributeRef> A,
);

typedef _c_LLVMGetCallSiteAttributeCount = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 Idx,
);

typedef _dart_LLVMGetCallSiteAttributeCount = int Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int Idx,
);

typedef _c_LLVMGetCallSiteAttributes = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueAttributeRef>> Attrs,
);

typedef _dart_LLVMGetCallSiteAttributes = void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int Idx,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueAttributeRef>> Attrs,
);

typedef _c_LLVMGetCallSiteEnumAttribute = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 Idx,
  ffi.Uint32 KindID,
);

typedef _dart_LLVMGetCallSiteEnumAttribute = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int Idx,
  int KindID,
);

typedef _c_LLVMGetCallSiteStringAttribute = ffi.Pointer<LLVMOpaqueAttributeRef>
    Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Int8> K,
  ffi.Uint32 KLen,
);

typedef _dart_LLVMGetCallSiteStringAttribute
    = ffi.Pointer<LLVMOpaqueAttributeRef> Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int Idx,
  ffi.Pointer<ffi.Int8> K,
  int KLen,
);

typedef _c_LLVMRemoveCallSiteEnumAttribute = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 Idx,
  ffi.Uint32 KindID,
);

typedef _dart_LLVMRemoveCallSiteEnumAttribute = void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int Idx,
  int KindID,
);

typedef _c_LLVMRemoveCallSiteStringAttribute = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Int8> K,
  ffi.Uint32 KLen,
);

typedef _dart_LLVMRemoveCallSiteStringAttribute = void Function(
  ffi.Pointer<LLVMOpaqueValue> C,
  int Idx,
  ffi.Pointer<ffi.Int8> K,
  int KLen,
);

typedef _c_LLVMGetCalledFunctionType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> C,
);

typedef _dart_LLVMGetCalledFunctionType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> C,
);

typedef _c_LLVMGetCalledValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _dart_LLVMGetCalledValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _c_LLVMIsTailCall = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> CallInst,
);

typedef _dart_LLVMIsTailCall = int Function(
  ffi.Pointer<LLVMOpaqueValue> CallInst,
);

typedef _c_LLVMSetTailCall = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> CallInst,
  ffi.Int32 IsTailCall,
);

typedef _dart_LLVMSetTailCall = void Function(
  ffi.Pointer<LLVMOpaqueValue> CallInst,
  int IsTailCall,
);

typedef _c_LLVMGetNormalDest = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
);

typedef _dart_LLVMGetNormalDest = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
);

typedef _c_LLVMGetUnwindDest = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
);

typedef _dart_LLVMGetUnwindDest = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
);

typedef _c_LLVMSetNormalDest = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
  ffi.Pointer<LLVMOpaqueBasicBlock> B,
);

typedef _dart_LLVMSetNormalDest = void Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
  ffi.Pointer<LLVMOpaqueBasicBlock> B,
);

typedef _c_LLVMSetUnwindDest = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
  ffi.Pointer<LLVMOpaqueBasicBlock> B,
);

typedef _dart_LLVMSetUnwindDest = void Function(
  ffi.Pointer<LLVMOpaqueValue> InvokeInst,
  ffi.Pointer<LLVMOpaqueBasicBlock> B,
);

typedef _c_LLVMGetNumSuccessors = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Term,
);

typedef _dart_LLVMGetNumSuccessors = int Function(
  ffi.Pointer<LLVMOpaqueValue> Term,
);

typedef _c_LLVMGetSuccessor = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Term,
  ffi.Uint32 i,
);

typedef _dart_LLVMGetSuccessor = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> Term,
  int i,
);

typedef _c_LLVMSetSuccessor = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Term,
  ffi.Uint32 i,
  ffi.Pointer<LLVMOpaqueBasicBlock> block,
);

typedef _dart_LLVMSetSuccessor = void Function(
  ffi.Pointer<LLVMOpaqueValue> Term,
  int i,
  ffi.Pointer<LLVMOpaqueBasicBlock> block,
);

typedef _c_LLVMIsConditional = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Branch,
);

typedef _dart_LLVMIsConditional = int Function(
  ffi.Pointer<LLVMOpaqueValue> Branch,
);

typedef _c_LLVMGetCondition = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Branch,
);

typedef _dart_LLVMGetCondition = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Branch,
);

typedef _c_LLVMSetCondition = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Branch,
  ffi.Pointer<LLVMOpaqueValue> Cond,
);

typedef _dart_LLVMSetCondition = void Function(
  ffi.Pointer<LLVMOpaqueValue> Branch,
  ffi.Pointer<LLVMOpaqueValue> Cond,
);

typedef _c_LLVMGetSwitchDefaultDest = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> SwitchInstr,
);

typedef _dart_LLVMGetSwitchDefaultDest = ffi.Pointer<LLVMOpaqueBasicBlock>
    Function(
  ffi.Pointer<LLVMOpaqueValue> SwitchInstr,
);

typedef _c_LLVMGetAllocatedType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> Alloca,
);

typedef _dart_LLVMGetAllocatedType = ffi.Pointer<LLVMOpaqueType> Function(
  ffi.Pointer<LLVMOpaqueValue> Alloca,
);

typedef _c_LLVMIsInBounds = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> GEP,
);

typedef _dart_LLVMIsInBounds = int Function(
  ffi.Pointer<LLVMOpaqueValue> GEP,
);

typedef _c_LLVMSetIsInBounds = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> GEP,
  ffi.Int32 InBounds,
);

typedef _dart_LLVMSetIsInBounds = void Function(
  ffi.Pointer<LLVMOpaqueValue> GEP,
  int InBounds,
);

typedef _c_LLVMAddIncoming = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> IncomingValues,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> IncomingBlocks,
  ffi.Uint32 Count,
);

typedef _dart_LLVMAddIncoming = void Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> IncomingValues,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> IncomingBlocks,
  int Count,
);

typedef _c_LLVMCountIncoming = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
);

typedef _dart_LLVMCountIncoming = int Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
);

typedef _c_LLVMGetIncomingValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
  ffi.Uint32 Index,
);

typedef _dart_LLVMGetIncomingValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
  int Index,
);

typedef _c_LLVMGetIncomingBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
  ffi.Uint32 Index,
);

typedef _dart_LLVMGetIncomingBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueValue> PhiNode,
  int Index,
);

typedef _c_LLVMGetNumIndices = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetNumIndices = int Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMGetIndices = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMGetIndices = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMCreateBuilderInContext = ffi.Pointer<LLVMOpaqueBuilder> Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _dart_LLVMCreateBuilderInContext = ffi.Pointer<LLVMOpaqueBuilder>
    Function(
  ffi.Pointer<LLVMOpaqueContext> C,
);

typedef _c_LLVMCreateBuilder = ffi.Pointer<LLVMOpaqueBuilder> Function();

typedef _dart_LLVMCreateBuilder = ffi.Pointer<LLVMOpaqueBuilder> Function();

typedef _c_LLVMPositionBuilder = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueBasicBlock> Block,
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _dart_LLVMPositionBuilder = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueBasicBlock> Block,
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _c_LLVMPositionBuilderBefore = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _dart_LLVMPositionBuilderBefore = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _c_LLVMPositionBuilderAtEnd = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueBasicBlock> Block,
);

typedef _dart_LLVMPositionBuilderAtEnd = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueBasicBlock> Block,
);

typedef _c_LLVMGetInsertBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _dart_LLVMGetInsertBlock = ffi.Pointer<LLVMOpaqueBasicBlock> Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _c_LLVMClearInsertionPosition = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _dart_LLVMClearInsertionPosition = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _c_LLVMInsertIntoBuilder = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _dart_LLVMInsertIntoBuilder = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Instr,
);

typedef _c_LLVMInsertIntoBuilderWithName = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Instr,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMInsertIntoBuilderWithName = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Instr,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMDisposeBuilder = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _dart_LLVMDisposeBuilder = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _c_LLVMGetCurrentDebugLocation2 = ffi.Pointer<LLVMOpaqueMetadata>
    Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _dart_LLVMGetCurrentDebugLocation2 = ffi.Pointer<LLVMOpaqueMetadata>
    Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _c_LLVMSetCurrentDebugLocation2 = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueMetadata> Loc,
);

typedef _dart_LLVMSetCurrentDebugLocation2 = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueMetadata> Loc,
);

typedef _c_LLVMSetInstDebugLocation = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _dart_LLVMSetInstDebugLocation = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> Inst,
);

typedef _c_LLVMBuilderGetDefaultFPMathTag = ffi.Pointer<LLVMOpaqueMetadata>
    Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _dart_LLVMBuilderGetDefaultFPMathTag = ffi.Pointer<LLVMOpaqueMetadata>
    Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _c_LLVMBuilderSetDefaultFPMathTag = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueMetadata> FPMathTag,
);

typedef _dart_LLVMBuilderSetDefaultFPMathTag = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueMetadata> FPMathTag,
);

typedef _c_LLVMSetCurrentDebugLocation = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> L,
);

typedef _dart_LLVMSetCurrentDebugLocation = void Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
  ffi.Pointer<LLVMOpaqueValue> L,
);

typedef _c_LLVMGetCurrentDebugLocation = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _dart_LLVMGetCurrentDebugLocation = ffi.Pointer<LLVMOpaqueValue>
    Function(
  ffi.Pointer<LLVMOpaqueBuilder> Builder,
);

typedef _c_LLVMBuildRetVoid = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
);

typedef _dart_LLVMBuildRetVoid = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
);

typedef _c_LLVMBuildRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
);

typedef _dart_LLVMBuildRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
);

typedef _c_LLVMBuildAggregateRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> RetVals,
  ffi.Uint32 N,
);

typedef _dart_LLVMBuildAggregateRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> RetVals,
  int N,
);

typedef _c_LLVMBuildBr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _dart_LLVMBuildBr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _c_LLVMBuildCondBr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> If,
  ffi.Pointer<LLVMOpaqueBasicBlock> Then,
  ffi.Pointer<LLVMOpaqueBasicBlock> Else,
);

typedef _dart_LLVMBuildCondBr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> If,
  ffi.Pointer<LLVMOpaqueBasicBlock> Then,
  ffi.Pointer<LLVMOpaqueBasicBlock> Else,
);

typedef _c_LLVMBuildSwitch = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<LLVMOpaqueBasicBlock> Else,
  ffi.Uint32 NumCases,
);

typedef _dart_LLVMBuildSwitch = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<LLVMOpaqueBasicBlock> Else,
  int NumCases,
);

typedef _c_LLVMBuildIndirectBr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Addr,
  ffi.Uint32 NumDests,
);

typedef _dart_LLVMBuildIndirectBr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Addr,
  int NumDests,
);

typedef _c_LLVMBuildInvoke = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  ffi.Uint32 NumArgs,
  ffi.Pointer<LLVMOpaqueBasicBlock> Then,
  ffi.Pointer<LLVMOpaqueBasicBlock> Catch,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildInvoke = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  int NumArgs,
  ffi.Pointer<LLVMOpaqueBasicBlock> Then,
  ffi.Pointer<LLVMOpaqueBasicBlock> Catch,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildInvoke2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  ffi.Uint32 NumArgs,
  ffi.Pointer<LLVMOpaqueBasicBlock> Then,
  ffi.Pointer<LLVMOpaqueBasicBlock> Catch,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildInvoke2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  int NumArgs,
  ffi.Pointer<LLVMOpaqueBasicBlock> Then,
  ffi.Pointer<LLVMOpaqueBasicBlock> Catch,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildUnreachable = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
);

typedef _dart_LLVMBuildUnreachable = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
);

typedef _c_LLVMBuildResume = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Exn,
);

typedef _dart_LLVMBuildResume = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Exn,
);

typedef _c_LLVMBuildLandingPad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> PersFn,
  ffi.Uint32 NumClauses,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildLandingPad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> PersFn,
  int NumClauses,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildCleanupRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMBuildCleanupRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMBuildCatchRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _dart_LLVMBuildCatchRet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
  ffi.Pointer<LLVMOpaqueBasicBlock> BB,
);

typedef _c_LLVMBuildCatchPad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> ParentPad,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  ffi.Uint32 NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildCatchPad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> ParentPad,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  int NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildCleanupPad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> ParentPad,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  ffi.Uint32 NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildCleanupPad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> ParentPad,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  int NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildCatchSwitch = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> ParentPad,
  ffi.Pointer<LLVMOpaqueBasicBlock> UnwindBB,
  ffi.Uint32 NumHandlers,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildCatchSwitch = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> ParentPad,
  ffi.Pointer<LLVMOpaqueBasicBlock> UnwindBB,
  int NumHandlers,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMAddCase = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Switch,
  ffi.Pointer<LLVMOpaqueValue> OnVal,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _dart_LLVMAddCase = void Function(
  ffi.Pointer<LLVMOpaqueValue> Switch,
  ffi.Pointer<LLVMOpaqueValue> OnVal,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _c_LLVMAddDestination = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> IndirectBr,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _dart_LLVMAddDestination = void Function(
  ffi.Pointer<LLVMOpaqueValue> IndirectBr,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _c_LLVMGetNumClauses = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
);

typedef _dart_LLVMGetNumClauses = int Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
);

typedef _c_LLVMGetClause = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
  ffi.Uint32 Idx,
);

typedef _dart_LLVMGetClause = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
  int Idx,
);

typedef _c_LLVMAddClause = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
  ffi.Pointer<LLVMOpaqueValue> ClauseVal,
);

typedef _dart_LLVMAddClause = void Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
  ffi.Pointer<LLVMOpaqueValue> ClauseVal,
);

typedef _c_LLVMIsCleanup = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
);

typedef _dart_LLVMIsCleanup = int Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
);

typedef _c_LLVMSetCleanup = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
  ffi.Int32 Val,
);

typedef _dart_LLVMSetCleanup = void Function(
  ffi.Pointer<LLVMOpaqueValue> LandingPad,
  int Val,
);

typedef _c_LLVMAddHandler = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _dart_LLVMAddHandler = void Function(
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
  ffi.Pointer<LLVMOpaqueBasicBlock> Dest,
);

typedef _c_LLVMGetNumHandlers = ffi.Uint32 Function(
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
);

typedef _dart_LLVMGetNumHandlers = int Function(
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
);

typedef _c_LLVMGetHandlers = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> Handlers,
);

typedef _dart_LLVMGetHandlers = void Function(
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueBasicBlock>> Handlers,
);

typedef _c_LLVMGetArgOperand = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Funclet,
  ffi.Uint32 i,
);

typedef _dart_LLVMGetArgOperand = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> Funclet,
  int i,
);

typedef _c_LLVMSetArgOperand = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Funclet,
  ffi.Uint32 i,
  ffi.Pointer<LLVMOpaqueValue> value,
);

typedef _dart_LLVMSetArgOperand = void Function(
  ffi.Pointer<LLVMOpaqueValue> Funclet,
  int i,
  ffi.Pointer<LLVMOpaqueValue> value,
);

typedef _c_LLVMGetParentCatchSwitch = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
);

typedef _dart_LLVMGetParentCatchSwitch = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
);

typedef _c_LLVMSetParentCatchSwitch = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
);

typedef _dart_LLVMSetParentCatchSwitch = void Function(
  ffi.Pointer<LLVMOpaqueValue> CatchPad,
  ffi.Pointer<LLVMOpaqueValue> CatchSwitch,
);

typedef _c_LLVMBuildAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNSWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNSWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNUWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNUWAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFAdd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNSWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNSWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNUWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNUWSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFSub = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNSWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNSWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNUWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNUWMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFMul = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildExactUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildExactUDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildExactSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildExactSDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFDiv = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildURem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildURem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildSRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildSRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFRem = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildShl = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildShl = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildLShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildLShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildAShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildAShr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildAnd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildAnd = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildOr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildOr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildXor = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildXor = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildBinOp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Int32 Op,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildBinOp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  int Op,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNSWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNSWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNUWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNUWNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFNeg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildNot = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildNot = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildMalloc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildMalloc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildArrayMalloc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildArrayMalloc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildMemSet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Ptr,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueValue> Len,
  ffi.Uint32 Align,
);

typedef _dart_LLVMBuildMemSet = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Ptr,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueValue> Len,
  int Align,
);

typedef _c_LLVMBuildMemCpy = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Dst,
  ffi.Uint32 DstAlign,
  ffi.Pointer<LLVMOpaqueValue> Src,
  ffi.Uint32 SrcAlign,
  ffi.Pointer<LLVMOpaqueValue> Size,
);

typedef _dart_LLVMBuildMemCpy = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Dst,
  int DstAlign,
  ffi.Pointer<LLVMOpaqueValue> Src,
  int SrcAlign,
  ffi.Pointer<LLVMOpaqueValue> Size,
);

typedef _c_LLVMBuildMemMove = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Dst,
  ffi.Uint32 DstAlign,
  ffi.Pointer<LLVMOpaqueValue> Src,
  ffi.Uint32 SrcAlign,
  ffi.Pointer<LLVMOpaqueValue> Size,
);

typedef _dart_LLVMBuildMemMove = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Dst,
  int DstAlign,
  ffi.Pointer<LLVMOpaqueValue> Src,
  int SrcAlign,
  ffi.Pointer<LLVMOpaqueValue> Size,
);

typedef _c_LLVMBuildAlloca = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildAlloca = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildArrayAlloca = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildArrayAlloca = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFree = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> PointerVal,
);

typedef _dart_LLVMBuildFree = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> PointerVal,
);

typedef _c_LLVMBuildLoad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> PointerVal,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildLoad = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> PointerVal,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildLoad2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> PointerVal,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildLoad2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> PointerVal,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildStore = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueValue> Ptr,
);

typedef _dart_LLVMBuildStore = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueValue> Ptr,
);

typedef _c_LLVMBuildGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  ffi.Uint32 NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  int NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildInBoundsGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  ffi.Uint32 NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildInBoundsGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  int NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildStructGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildStructGEP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  int Idx,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  ffi.Uint32 NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  int NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildInBoundsGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  ffi.Uint32 NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildInBoundsGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Indices,
  int NumIndices,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildStructGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  ffi.Uint32 Idx,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildStructGEP2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<LLVMOpaqueValue> Pointer,
  int Idx,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildGlobalString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<ffi.Int8> Str,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildGlobalString = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<ffi.Int8> Str,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildGlobalStringPtr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<ffi.Int8> Str,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildGlobalStringPtr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<ffi.Int8> Str,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMGetVolatile = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
);

typedef _dart_LLVMGetVolatile = int Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
);

typedef _c_LLVMSetVolatile = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
  ffi.Int32 IsVolatile,
);

typedef _dart_LLVMSetVolatile = void Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
  int IsVolatile,
);

typedef _c_LLVMGetWeak = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
);

typedef _dart_LLVMGetWeak = int Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
);

typedef _c_LLVMSetWeak = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  ffi.Int32 IsWeak,
);

typedef _dart_LLVMSetWeak = void Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  int IsWeak,
);

typedef _c_LLVMGetOrdering = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
);

typedef _dart_LLVMGetOrdering = int Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
);

typedef _c_LLVMSetOrdering = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
  ffi.Int32 Ordering,
);

typedef _dart_LLVMSetOrdering = void Function(
  ffi.Pointer<LLVMOpaqueValue> MemoryAccessInst,
  int Ordering,
);

typedef _c_LLVMGetAtomicRMWBinOp = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicRMWInst,
);

typedef _dart_LLVMGetAtomicRMWBinOp = int Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicRMWInst,
);

typedef _c_LLVMSetAtomicRMWBinOp = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicRMWInst,
  ffi.Int32 BinOp,
);

typedef _dart_LLVMSetAtomicRMWBinOp = void Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicRMWInst,
  int BinOp,
);

typedef _c_LLVMBuildTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildZExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildZExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildSExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildSExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFPToUI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFPToUI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFPToSI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFPToSI = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildUIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildUIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildSIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildSIToFP = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFPTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFPTrunc = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFPExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFPExt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildPtrToInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildPtrToInt = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildIntToPtr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildIntToPtr = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildAddrSpaceCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildAddrSpaceCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildZExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildZExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildSExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildSExtOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildTruncOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildTruncOrBitCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Int32 Op,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  int Op,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildPointerCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildPointerCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildIntCast2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Int32 IsSigned,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildIntCast2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  int IsSigned,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFPCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFPCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildIntCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildIntCast = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<LLVMOpaqueType> DestTy,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildICmp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Int32 Op,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildICmp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  int Op,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFCmp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Int32 Op,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFCmp = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  int Op,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildPhi = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildPhi = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildCall = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  ffi.Uint32 NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildCall = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  int NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildCall2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> arg1,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  ffi.Uint32 NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildCall2 = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueType> arg1,
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueValue>> Args,
  int NumArgs,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildSelect = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> If,
  ffi.Pointer<LLVMOpaqueValue> Then,
  ffi.Pointer<LLVMOpaqueValue> Else,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildSelect = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> If,
  ffi.Pointer<LLVMOpaqueValue> Then,
  ffi.Pointer<LLVMOpaqueValue> Else,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildVAArg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> List,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildVAArg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> List,
  ffi.Pointer<LLVMOpaqueType> Ty,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildExtractElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> VecVal,
  ffi.Pointer<LLVMOpaqueValue> Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildExtractElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> VecVal,
  ffi.Pointer<LLVMOpaqueValue> Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildInsertElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> VecVal,
  ffi.Pointer<LLVMOpaqueValue> EltVal,
  ffi.Pointer<LLVMOpaqueValue> Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildInsertElement = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> VecVal,
  ffi.Pointer<LLVMOpaqueValue> EltVal,
  ffi.Pointer<LLVMOpaqueValue> Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildShuffleVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V1,
  ffi.Pointer<LLVMOpaqueValue> V2,
  ffi.Pointer<LLVMOpaqueValue> Mask,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildShuffleVector = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> V1,
  ffi.Pointer<LLVMOpaqueValue> V2,
  ffi.Pointer<LLVMOpaqueValue> Mask,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildExtractValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> AggVal,
  ffi.Uint32 Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildExtractValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> AggVal,
  int Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildInsertValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> AggVal,
  ffi.Pointer<LLVMOpaqueValue> EltVal,
  ffi.Uint32 Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildInsertValue = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> AggVal,
  ffi.Pointer<LLVMOpaqueValue> EltVal,
  int Index,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFreeze = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFreeze = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildIsNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildIsNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildIsNotNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildIsNotNull = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildPtrDiff = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildPtrDiff = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> arg0,
  ffi.Pointer<LLVMOpaqueValue> LHS,
  ffi.Pointer<LLVMOpaqueValue> RHS,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildFence = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Int32 ordering,
  ffi.Int32 singleThread,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _dart_LLVMBuildFence = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  int ordering,
  int singleThread,
  ffi.Pointer<ffi.Int8> Name,
);

typedef _c_LLVMBuildAtomicRMW = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Int32 op,
  ffi.Pointer<LLVMOpaqueValue> PTR,
  ffi.Pointer<LLVMOpaqueValue> Val,
  ffi.Int32 ordering,
  ffi.Int32 singleThread,
);

typedef _dart_LLVMBuildAtomicRMW = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  int op,
  ffi.Pointer<LLVMOpaqueValue> PTR,
  ffi.Pointer<LLVMOpaqueValue> Val,
  int ordering,
  int singleThread,
);

typedef _c_LLVMBuildAtomicCmpXchg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Ptr,
  ffi.Pointer<LLVMOpaqueValue> Cmp,
  ffi.Pointer<LLVMOpaqueValue> New,
  ffi.Int32 SuccessOrdering,
  ffi.Int32 FailureOrdering,
  ffi.Int32 SingleThread,
);

typedef _dart_LLVMBuildAtomicCmpXchg = ffi.Pointer<LLVMOpaqueValue> Function(
  ffi.Pointer<LLVMOpaqueBuilder> B,
  ffi.Pointer<LLVMOpaqueValue> Ptr,
  ffi.Pointer<LLVMOpaqueValue> Cmp,
  ffi.Pointer<LLVMOpaqueValue> New,
  int SuccessOrdering,
  int FailureOrdering,
  int SingleThread,
);

typedef _c_LLVMIsAtomicSingleThread = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicInst,
);

typedef _dart_LLVMIsAtomicSingleThread = int Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicInst,
);

typedef _c_LLVMSetAtomicSingleThread = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicInst,
  ffi.Int32 SingleThread,
);

typedef _dart_LLVMSetAtomicSingleThread = void Function(
  ffi.Pointer<LLVMOpaqueValue> AtomicInst,
  int SingleThread,
);

typedef _c_LLVMGetCmpXchgSuccessOrdering = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
);

typedef _dart_LLVMGetCmpXchgSuccessOrdering = int Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
);

typedef _c_LLVMSetCmpXchgSuccessOrdering = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  ffi.Int32 Ordering,
);

typedef _dart_LLVMSetCmpXchgSuccessOrdering = void Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  int Ordering,
);

typedef _c_LLVMGetCmpXchgFailureOrdering = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
);

typedef _dart_LLVMGetCmpXchgFailureOrdering = int Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
);

typedef _c_LLVMSetCmpXchgFailureOrdering = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  ffi.Int32 Ordering,
);

typedef _dart_LLVMSetCmpXchgFailureOrdering = void Function(
  ffi.Pointer<LLVMOpaqueValue> CmpXchgInst,
  int Ordering,
);

typedef _c_LLVMCreateModuleProviderForExistingModule
    = ffi.Pointer<LLVMOpaqueModuleProvider> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMCreateModuleProviderForExistingModule
    = ffi.Pointer<LLVMOpaqueModuleProvider> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMDisposeModuleProvider = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueModuleProvider> M,
);

typedef _dart_LLVMDisposeModuleProvider = void Function(
  ffi.Pointer<LLVMOpaqueModuleProvider> M,
);

typedef _c_LLVMCreateMemoryBufferWithContentsOfFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> Path,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueMemoryBuffer>> OutMemBuf,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
);

typedef _dart_LLVMCreateMemoryBufferWithContentsOfFile = int Function(
  ffi.Pointer<ffi.Int8> Path,
  ffi.Pointer<ffi.Pointer<LLVMOpaqueMemoryBuffer>> OutMemBuf,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
);

typedef _c_LLVMCreateMemoryBufferWithSTDIN = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueMemoryBuffer>> OutMemBuf,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
);

typedef _dart_LLVMCreateMemoryBufferWithSTDIN = int Function(
  ffi.Pointer<ffi.Pointer<LLVMOpaqueMemoryBuffer>> OutMemBuf,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
);

typedef _c_LLVMCreateMemoryBufferWithMemoryRange
    = ffi.Pointer<LLVMOpaqueMemoryBuffer> Function(
  ffi.Pointer<ffi.Int8> InputData,
  ffi.Uint64 InputDataLength,
  ffi.Pointer<ffi.Int8> BufferName,
  ffi.Int32 RequiresNullTerminator,
);

typedef _dart_LLVMCreateMemoryBufferWithMemoryRange
    = ffi.Pointer<LLVMOpaqueMemoryBuffer> Function(
  ffi.Pointer<ffi.Int8> InputData,
  int InputDataLength,
  ffi.Pointer<ffi.Int8> BufferName,
  int RequiresNullTerminator,
);

typedef _c_LLVMCreateMemoryBufferWithMemoryRangeCopy
    = ffi.Pointer<LLVMOpaqueMemoryBuffer> Function(
  ffi.Pointer<ffi.Int8> InputData,
  ffi.Uint64 InputDataLength,
  ffi.Pointer<ffi.Int8> BufferName,
);

typedef _dart_LLVMCreateMemoryBufferWithMemoryRangeCopy
    = ffi.Pointer<LLVMOpaqueMemoryBuffer> Function(
  ffi.Pointer<ffi.Int8> InputData,
  int InputDataLength,
  ffi.Pointer<ffi.Int8> BufferName,
);

typedef _c_LLVMGetBufferStart = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
);

typedef _dart_LLVMGetBufferStart = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
);

typedef _c_LLVMGetBufferSize = ffi.Uint64 Function(
  ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
);

typedef _dart_LLVMGetBufferSize = int Function(
  ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
);

typedef _c_LLVMDisposeMemoryBuffer = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
);

typedef _dart_LLVMDisposeMemoryBuffer = void Function(
  ffi.Pointer<LLVMOpaqueMemoryBuffer> MemBuf,
);

typedef _c_LLVMGetGlobalPassRegistry = ffi.Pointer<LLVMOpaquePassRegistry>
    Function();

typedef _dart_LLVMGetGlobalPassRegistry = ffi.Pointer<LLVMOpaquePassRegistry>
    Function();

typedef _c_LLVMCreatePassManager = ffi.Pointer<LLVMOpaquePassManager>
    Function();

typedef _dart_LLVMCreatePassManager = ffi.Pointer<LLVMOpaquePassManager>
    Function();

typedef _c_LLVMCreateFunctionPassManagerForModule
    = ffi.Pointer<LLVMOpaquePassManager> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMCreateFunctionPassManagerForModule
    = ffi.Pointer<LLVMOpaquePassManager> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMCreateFunctionPassManager = ffi.Pointer<LLVMOpaquePassManager>
    Function(
  ffi.Pointer<LLVMOpaqueModuleProvider> MP,
);

typedef _dart_LLVMCreateFunctionPassManager = ffi.Pointer<LLVMOpaquePassManager>
    Function(
  ffi.Pointer<LLVMOpaqueModuleProvider> MP,
);

typedef _c_LLVMRunPassManager = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaquePassManager> PM,
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMRunPassManager = int Function(
  ffi.Pointer<LLVMOpaquePassManager> PM,
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _c_LLVMInitializeFunctionPassManager = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaquePassManager> FPM,
);

typedef _dart_LLVMInitializeFunctionPassManager = int Function(
  ffi.Pointer<LLVMOpaquePassManager> FPM,
);

typedef _c_LLVMRunFunctionPassManager = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaquePassManager> FPM,
  ffi.Pointer<LLVMOpaqueValue> F,
);

typedef _dart_LLVMRunFunctionPassManager = int Function(
  ffi.Pointer<LLVMOpaquePassManager> FPM,
  ffi.Pointer<LLVMOpaqueValue> F,
);

typedef _c_LLVMFinalizeFunctionPassManager = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaquePassManager> FPM,
);

typedef _dart_LLVMFinalizeFunctionPassManager = int Function(
  ffi.Pointer<LLVMOpaquePassManager> FPM,
);

typedef _c_LLVMDisposePassManager = ffi.Void Function(
  ffi.Pointer<LLVMOpaquePassManager> PM,
);

typedef _dart_LLVMDisposePassManager = void Function(
  ffi.Pointer<LLVMOpaquePassManager> PM,
);

typedef _c_LLVMStartMultithreaded = ffi.Int32 Function();

typedef _dart_LLVMStartMultithreaded = int Function();

typedef _c_LLVMStopMultithreaded = ffi.Void Function();

typedef _dart_LLVMStopMultithreaded = void Function();

typedef _c_LLVMIsMultithreaded = ffi.Int32 Function();

typedef _dart_LLVMIsMultithreaded = int Function();

typedef _c_LLVMVerifyModule = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Int32 Action,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
);

typedef _dart_LLVMVerifyModule = int Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  int Action,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> OutMessage,
);

typedef _c_LLVMVerifyFunction = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  ffi.Int32 Action,
);

typedef _dart_LLVMVerifyFunction = int Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
  int Action,
);

typedef _c_LLVMViewFunctionCFG = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMViewFunctionCFG = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMViewFunctionCFGOnly = ffi.Void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _dart_LLVMViewFunctionCFGOnly = void Function(
  ffi.Pointer<LLVMOpaqueValue> Fn,
);

typedef _c_LLVMWriteBitcodeToFile = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Path,
);

typedef _dart_LLVMWriteBitcodeToFile = int Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Pointer<ffi.Int8> Path,
);

typedef _c_LLVMWriteBitcodeToFD = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Int32 FD,
  ffi.Int32 ShouldClose,
  ffi.Int32 Unbuffered,
);

typedef _dart_LLVMWriteBitcodeToFD = int Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  int FD,
  int ShouldClose,
  int Unbuffered,
);

typedef _c_LLVMWriteBitcodeToFileHandle = ffi.Int32 Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  ffi.Int32 Handle,
);

typedef _dart_LLVMWriteBitcodeToFileHandle = int Function(
  ffi.Pointer<LLVMOpaqueModule> M,
  int Handle,
);

typedef _c_LLVMWriteBitcodeToMemoryBuffer = ffi.Pointer<LLVMOpaqueMemoryBuffer>
    Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);

typedef _dart_LLVMWriteBitcodeToMemoryBuffer
    = ffi.Pointer<LLVMOpaqueMemoryBuffer> Function(
  ffi.Pointer<LLVMOpaqueModule> M,
);
